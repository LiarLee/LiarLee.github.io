<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VPCFlowlog解析</title>
    <url>/2023/07/05/AWS/AWS_VPC%20Flowlog%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="VPC-Flow-Log-怎么看"><a href="#VPC-Flow-Log-怎么看" class="headerlink" title="VPC Flow Log 怎么看"></a>VPC Flow Log 怎么看</h2><p><a href="https://docs.amazonaws.cn/vpc/latest/userguide/flow-logs.html#flow-log-records">https://docs.amazonaws.cn/vpc/latest/userguide/flow-logs.html#flow-log-records</a><br><a href="https://docs.amazonaws.cn/vpc/latest/userguide/flow-logs-records-examples.html#flow-log-example-tcp-flag">https://docs.amazonaws.cn/vpc/latest/userguide/flow-logs-records-examples.html#flow-log-example-tcp-flag</a>  </p>
<p>vpc flow log里的tcp-flags记录的不是某个单个tcp包头里的flag，而是单次观察的时间窗口里这条flow的所有tcp包出现过的tcp flag的合计。  </p>
<p>TCP flags can be OR-ed during the aggregation interval. For short connections, the flags might be set on the same line in the flow log record, for example, 19 for SYN-ACK and FIN, and 3 for SYN and FIN. For an example, see TCP flag sequence.<br>For general information about TCP flags (such as the meaning of flags like FIN, SYN, and ACK), see TCP segment structure<br>on <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure">[Wikipedia]</a>.</p>
<p>这个记录里面的值， 是这样计算出来的， 从右向左 ， 从 0 次方开始计算。</p>
<blockquote>
<p>FIN  2^0</p>
<p>SYN 2^1 </p>
<p>RST 2^2</p>
<p>PSH 2^3</p>
<p>ACK 2^4</p>
<p>URG 2^5</p>
<p>ECE 2^6</p>
<p>CWR 2^7</p>
</blockquote>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS, VPC, FLowLog</tag>
      </tags>
  </entry>
  <entry>
    <title>Cilium 踩坑总结</title>
    <url>/2022/08/19/AWS/EKS_CiliumInstallation&amp;Summary/</url>
    <content><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><ul>
<li><p><strong>KVM</strong>  - hayden@HaydenArchDesktop ~&gt; virsh version</p>
<blockquote>
<p> Compiled against library: libvirt 8.6.0<br> Using library: libvirt 8.6.0<br> Using API: QEMU 8.6.0<br> Running hypervisor: QEMU 7.0.0</p>
</blockquote>
</li>
<li><p><strong>VM OS</strong>： root@fedora ~# cat &#x2F;etc&#x2F;os-release</p>
<blockquote>
<p> NAME&#x3D;”Fedora Linux”<br> VERSION&#x3D;”36 (Thirty Six)”<br> ID&#x3D;fedora<br> VERSION_ID&#x3D;36</p>
</blockquote>
</li>
<li><p><strong>KVM</strong> 虚拟机两台</p>
<blockquote>
<ul>
<li>Master： hostname: fedora</li>
<li>Node： hostname: knode1</li>
</ul>
</blockquote>
</li>
<li><p><strong>kubernetes 版本</strong>： v1.24.3</p>
</li>
<li><p><strong>kubernetes 安装方式</strong>： kubeadm </p>
</li>
<li><p><strong>docker版本</strong>:  docker:&#x2F;&#x2F;20.10.17 </p>
<blockquote>
<p>NOTE: (尝试使用Containerd， 但是翻车了， 控制平面的Pod启动不了， 所以放弃了，遂使用CRI-Dockerd，配置了Docker runtime， Containerd使用默认的参数无法正常的启动， 看起来即使真的升级到了1.24 迁移还是一个问题)</p>
</blockquote>
</li>
<li><p><strong>Kernel Version</strong>: 5.17.5-300.fc36.x86_64</p>
</li>
</ul>
<h1 id="Helm参数"><a href="#Helm参数" class="headerlink" title="Helm参数"></a>Helm参数</h1><p>如果是在KVM启动的虚拟机，可以通过这个安装参数来开启更多功能，但是受限于我的KVM虚拟网卡驱动不能attach xdp 程序， 所以。。。。xdp 加速无法启用，但是其他的高级特性均可开启， 集群状态正常。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">helm upgrade <span class="token parameter variable">-i</span> cilium cilium/cilium <span class="token punctuation">\</span>
  <span class="token parameter variable">--namespace</span> kube-system <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">tunnel</span><span class="token operator">=</span>disabled <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">autoDirectNodeRoutes</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">loadBalancer.mode</span><span class="token operator">=</span>dsr <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeProxyReplacement</span><span class="token operator">=</span>strict <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">enableIPv4Masquerade</span><span class="token operator">=</span>false <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">loadBalancer.algorithm</span><span class="token operator">=</span>maglev <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">devices</span><span class="token operator">=</span>enp1s0 <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">k8sServiceHost</span><span class="token operator">=</span><span class="token number">192.168</span>.31.100 <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">k8sServicePort</span><span class="token operator">=</span><span class="token number">6443</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">hubble.relay.enabled</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">hubble.ui.enabled</span><span class="token operator">=</span>true</code></pre>
<h1 id="Cilium-Cli"><a href="#Cilium-Cli" class="headerlink" title="Cilium Cli"></a>Cilium Cli</h1><p>touch .&#x2F;install_cilium_cli.sh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CILIUM_CLI_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt<span class="token variable">)</span></span>
<span class="token assign-left variable">CLI_ARCH</span><span class="token operator">=</span>amd64
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token operator">=</span> <span class="token string">"aarch64"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token assign-left variable">CLI_ARCH</span><span class="token operator">=</span>arm64<span class="token punctuation">;</span> <span class="token keyword">fi</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">--fail</span> --remote-name-all https://github.com/cilium/cilium-cli/releases/download/<span class="token variable">$&#123;CILIUM_CLI_VERSION&#125;</span>/cilium-linux-<span class="token variable">$&#123;CLI_ARCH&#125;</span>.tar.gz<span class="token punctuation">&#123;</span>,.sha256sum<span class="token punctuation">&#125;</span>
sha256sum <span class="token parameter variable">--check</span> cilium-linux-<span class="token variable">$&#123;CLI_ARCH&#125;</span>.tar.gz.sha256sum
<span class="token function">sudo</span> <span class="token function">tar</span> xzvfC cilium-linux-<span class="token variable">$&#123;CLI_ARCH&#125;</span>.tar.gz /usr/local/bin
<span class="token function">rm</span> cilium-linux-<span class="token variable">$&#123;CLI_ARCH&#125;</span>.tar.gz<span class="token punctuation">&#123;</span>,.sha256sum<span class="token punctuation">&#125;</span></code></pre>
<h1 id="Hubble-Cli"><a href="#Hubble-Cli" class="headerlink" title="Hubble Cli"></a>Hubble Cli</h1><p>touch .&#x2F;install_hubble_client.sh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">HUBBLE_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://raw.githubusercontent.com/cilium/hubble/master/stable.txt<span class="token variable">)</span></span>
<span class="token assign-left variable">HUBBLE_ARCH</span><span class="token operator">=</span>amd64
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token operator">=</span> <span class="token string">"aarch64"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token assign-left variable">HUBBLE_ARCH</span><span class="token operator">=</span>arm64<span class="token punctuation">;</span> <span class="token keyword">fi</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">--fail</span> --remote-name-all https://github.com/cilium/hubble/releases/download/<span class="token variable">$HUBBLE_VERSION</span>/hubble-linux-<span class="token variable">$&#123;HUBBLE_ARCH&#125;</span>.tar.gz<span class="token punctuation">&#123;</span>,.sha256sum<span class="token punctuation">&#125;</span>
sha256sum <span class="token parameter variable">--check</span> hubble-linux-<span class="token variable">$&#123;HUBBLE_ARCH&#125;</span>.tar.gz.sha256sum
<span class="token function">sudo</span> <span class="token function">tar</span> xzvfC hubble-linux-<span class="token variable">$&#123;HUBBLE_ARCH&#125;</span>.tar.gz /usr/local/bin
<span class="token function">rm</span> hubble-linux-<span class="token variable">$&#123;HUBBLE_ARCH&#125;</span>.tar.gz<span class="token punctuation">&#123;</span>,.sha256sum<span class="token punctuation">&#125;</span></code></pre>

<h2 id="Cilium-Cli-安装插件命令"><a href="#Cilium-Cli-安装插件命令" class="headerlink" title="Cilium Cli 安装插件命令"></a>Cilium Cli 安装插件命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">cilium upgrade <span class="token comment"># 原地升级</span>

<span class="token comment"># 安装并直接替换kubeproxy</span>
cilium <span class="token function">install</span> <span class="token parameter variable">--version</span> <span class="token number">1.14</span>.1 <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeProxyReplacement</span><span class="token operator">=</span>true <span class="token parameter variable">--set</span><span class="token operator">=</span>ipam.operator.clusterPoolIPv4PodCIDRList<span class="token operator">=</span><span class="token string">"10.42.0.0/16"</span> <span class="token parameter variable">--set</span> <span class="token assign-left variable">k8sServiceHost</span><span class="token operator">=</span>kube3s.liarlee.site <span class="token parameter variable">--set</span> <span class="token assign-left variable">k8sServicePort</span><span class="token operator">=</span><span class="token number">6443</span>


<span class="token comment"># 升级</span>
hayden@arch ~<span class="token operator">></span> cilium upgrade
🔮 Auto-detected Kubernetes kind: K3s
ℹ️  Using Cilium version <span class="token number">1.14</span>.2
🔮 Auto-detected cluster name: default

<span class="token comment"># 看状态</span>
cilium status
<span class="token comment"># 使用hubble</span>
cilium hubble port-forward <span class="token operator">&amp;</span>

cilium hubble <span class="token builtin class-name">enable</span> <span class="token parameter variable">--ui</span>

hubble observe <span class="token parameter variable">--since</span><span class="token operator">=</span>1m <span class="token parameter variable">-t</span> l7 -

</code></pre>
<hr>
<h1 id="特性以及状态检查"><a href="#特性以及状态检查" class="headerlink" title="特性以及状态检查"></a>特性以及状态检查</h1><p>默认的安装完成之后开启特性如下：</p>
<ol>
<li>Kubeproxy Bypass</li>
<li>Iptables Bypass</li>
<li>LoadBalancer 算法： Meglav</li>
<li>LoadBalancer 特性： DSR</li>
<li>报文Masquerade 封装： Disabled</li>
<li>Hubble ： Enable</li>
<li>隧道封包： Disabled</li>
</ol>
<hr>
<p>下面是 CIlium Status的命令返回结果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@fedora ~<span class="token comment"># cilium status</span>
    /¯¯<span class="token punctuation">\</span>
 /¯¯<span class="token punctuation">\</span>__/¯¯<span class="token punctuation">\</span>    Cilium:         OK
 <span class="token punctuation">\</span>__/¯¯<span class="token punctuation">\</span>__/    Operator:       OK
 /¯¯<span class="token punctuation">\</span>__/¯¯<span class="token punctuation">\</span>    Hubble:         OK
 <span class="token punctuation">\</span>__/¯¯<span class="token punctuation">\</span>__/    ClusterMesh:    disabled
    <span class="token punctuation">\</span>__/

Deployment        cilium-operator    Desired: <span class="token number">2</span>, Ready: <span class="token number">2</span>/2, Available: <span class="token number">2</span>/2
Deployment        hubble-relay       Desired: <span class="token number">1</span>, Ready: <span class="token number">1</span>/1, Available: <span class="token number">1</span>/1
DaemonSet         cilium             Desired: <span class="token number">2</span>, Ready: <span class="token number">2</span>/2, Available: <span class="token number">2</span>/2
Deployment        hubble-ui          Desired: <span class="token number">1</span>, Ready: <span class="token number">1</span>/1, Available: <span class="token number">1</span>/1
Containers:       hubble-relay       Running: <span class="token number">1</span>
                  hubble-ui          Running: <span class="token number">1</span>
                  cilium             Running: <span class="token number">2</span>
                  cilium-operator    Running: <span class="token number">2</span>
Cluster Pods:     <span class="token number">14</span>/14 managed by Cilium
Image versions    hubble-ui          quay.io/cilium/hubble-ui:v0.9.0@sha256:0ef04e9a29212925da6bdfd0ba5b581765e41a01f1cc30563cef9b30b457fea0: <span class="token number">1</span>
                  hubble-ui          quay.io/cilium/hubble-ui-backend:v0.9.0@sha256:000df6b76719f607a9edefb9af94dfd1811a6f1b6a8a9c537cba90bf12df474b: <span class="token number">1</span>
                  cilium             quay.io/cilium/cilium:v1.12.0@sha256:079baa4fa1b9fe638f96084f4e0297c84dd4fb215d29d2321dcbe54273f63ade: <span class="token number">2</span>
                  cilium-operator    quay.io/cilium/operator-generic:v1.12.0@sha256:bb2a42eda766e5d4a87ee8a5433f089db81b72dd04acf6b59fcbb445a95f9410: <span class="token number">2</span>
                  hubble-relay       quay.io/cilium/hubble-relay:v1.12.0@sha256:ca8033ea8a3112d838f958862fa76c8d895e3c8d0f5590de849b91745af5ac4d: <span class="token number">1</span></code></pre>

<p>ds&#x2F;cilium 中的命令返回结果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@fedora:/home/cilium<span class="token comment"># cilium status</span>
KVStore:                 Ok   Disabled
Kubernetes:              Ok   <span class="token number">1.24</span> <span class="token punctuation">(</span>v1.24.3<span class="token punctuation">)</span> <span class="token punctuation">[</span>linux/amd64<span class="token punctuation">]</span>
Kubernetes APIs:         <span class="token punctuation">[</span><span class="token string">"cilium/v2::CiliumClusterwideNetworkPolicy"</span>, <span class="token string">"cilium/v2::CiliumEndpoint"</span>, <span class="token string">"cilium/v2::CiliumNetworkPolicy"</span>, <span class="token string">"cilium/v2::CiliumNode"</span>, <span class="token string">"core/v1::Namespace"</span>, <span class="token string">"core/v1::Node"</span>, <span class="token string">"core/v1::Pods"</span>, <span class="token string">"core/v1::Service"</span>, <span class="token string">"discovery/v1::EndpointSlice"</span>, <span class="token string">"networking.k8s.io/v1::NetworkPolicy"</span><span class="token punctuation">]</span>
KubeProxyReplacement:    Strict   <span class="token punctuation">[</span>enp1s0 <span class="token number">192.168</span>.31.100 <span class="token punctuation">(</span>Direct Routing<span class="token punctuation">)</span><span class="token punctuation">]</span>
Host firewall:           Disabled
CNI Chaining:            none
Cilium:                  Ok   <span class="token number">1.12</span>.0 <span class="token punctuation">(</span>v1.12.0-9447cd1<span class="token punctuation">)</span>
NodeMonitor:             Listening <span class="token keyword">for</span> events on <span class="token number">4</span> CPUs with 64x4096 of shared memory
Cilium health daemon:    Ok
IPAM:                    IPv4: <span class="token number">3</span>/254 allocated from <span class="token number">10.0</span>.0.0/24,
BandwidthManager:        Disabled
Host Routing:            BPF
Masquerading:            Disabled
Controller Status:       <span class="token number">23</span>/23 healthy
Proxy Status:            OK, <span class="token function">ip</span> <span class="token number">10.0</span>.0.78, <span class="token number">0</span> redirects active on ports <span class="token number">10000</span>-20000
Global Identity Range:   min <span class="token number">256</span>, max <span class="token number">65535</span>
Hubble:                  Ok   Current/Max Flows: <span class="token number">283</span>/4095 <span class="token punctuation">(</span><span class="token number">6.91</span>%<span class="token punctuation">)</span>, Flows/s: <span class="token number">1.62</span>   Metrics: Disabled
Encryption:              Disabled
Cluster health:          <span class="token number">2</span>/2 reachable   <span class="token punctuation">(</span><span class="token number">2022</span>-08-23T01:57:33Z<span class="token punctuation">)</span></code></pre>

<p>Cilium verbose的详细结果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@fedora:/home/cilium<span class="token comment"># cilium status --verbose</span>
KVStore:                Ok   Disabled
Kubernetes:             Ok   <span class="token number">1.24</span> <span class="token punctuation">(</span>v1.24.3<span class="token punctuation">)</span> <span class="token punctuation">[</span>linux/amd64<span class="token punctuation">]</span>
Kubernetes APIs:        <span class="token punctuation">[</span><span class="token string">"cilium/v2::CiliumClusterwideNetworkPolicy"</span>, <span class="token string">"cilium/v2::CiliumEndpoint"</span>, <span class="token string">"cilium/v2::CiliumNetworkPolicy"</span>, <span class="token string">"cilium/v2::CiliumNode"</span>, <span class="token string">"core/v1::Namespace"</span>, <span class="token string">"core/v1::Node"</span>, <span class="token string">"core/v1::Pods"</span>, <span class="token string">"core/v1::Service"</span>, <span class="token string">"discovery/v1::EndpointSlice"</span>, <span class="token string">"networking.k8s.io/v1::NetworkPolicy"</span><span class="token punctuation">]</span>
KubeProxyReplacement:   Strict   <span class="token punctuation">[</span>enp1s0 <span class="token number">192.168</span>.31.100 <span class="token punctuation">(</span>Direct Routing<span class="token punctuation">)</span><span class="token punctuation">]</span>
Host firewall:          Disabled
CNI Chaining:           none
Cilium:                 Ok   <span class="token number">1.12</span>.0 <span class="token punctuation">(</span>v1.12.0-9447cd1<span class="token punctuation">)</span>
NodeMonitor:            Listening <span class="token keyword">for</span> events on <span class="token number">4</span> CPUs with 64x4096 of shared memory
Cilium health daemon:   Ok
IPAM:                   IPv4: <span class="token number">3</span>/254 allocated from <span class="token number">10.0</span>.0.0/24,
Allocated addresses:
  <span class="token number">10.0</span>.0.11 <span class="token punctuation">(</span>kube-system/coredns-6d4b75cb6d-tbgrr<span class="token punctuation">)</span>
  <span class="token number">10.0</span>.0.201 <span class="token punctuation">(</span>health<span class="token punctuation">)</span>
  <span class="token number">10.0</span>.0.78 <span class="token punctuation">(</span>router<span class="token punctuation">)</span>
BandwidthManager:       Disabled
Host Routing:           BPF
Masquerading:           Disabled
Clock Source <span class="token keyword">for</span> BPF:   ktime
Controller Status:      <span class="token number">23</span>/23 healthy
  Name                                  Last success   Last error   Count   Message
  cilium-health-ep                      29s ago        never        <span class="token number">0</span>       no error
  dns-garbage-collector-job             34s ago        never        <span class="token number">0</span>       no error
  endpoint-1313-regeneration-recovery   never          never        <span class="token number">0</span>       no error
  endpoint-2868-regeneration-recovery   never          never        <span class="token number">0</span>       no error
  endpoint-2945-regeneration-recovery   never          never        <span class="token number">0</span>       no error
  endpoint-gc                           3m34s ago      never        <span class="token number">0</span>       no error
  ipcache-inject-labels                 3m30s ago      3m33s ago    <span class="token number">0</span>       no error
  k8s-heartbeat                         4s ago         never        <span class="token number">0</span>       no error
  link-cache                            15s ago        never        <span class="token number">0</span>       no error
  metricsmap-bpf-prom-sync              4s ago         never        <span class="token number">0</span>       no error
  resolve-identity-1313                 3m29s ago      never        <span class="token number">0</span>       no error
  resolve-identity-2868                 3m29s ago      never        <span class="token number">0</span>       no error
  resolve-identity-2945                 3m30s ago      never        <span class="token number">0</span>       no error
  sync-endpoints-and-host-ips           30s ago        never        <span class="token number">0</span>       no error
  sync-lb-maps-with-k8s-services        3m30s ago      never        <span class="token number">0</span>       no error
  sync-node-with-ciliumnode <span class="token punctuation">(</span>fedora<span class="token punctuation">)</span>    3m32s ago      3m33s ago    <span class="token number">0</span>       no error
  sync-policymap-1313                   26s ago        never        <span class="token number">0</span>       no error
  sync-policymap-2868                   26s ago        never        <span class="token number">0</span>       no error
  sync-policymap-2945                   26s ago        never        <span class="token number">0</span>       no error
  sync-to-k8s-ciliumendpoint <span class="token punctuation">(</span><span class="token number">1313</span><span class="token punctuation">)</span>     9s ago         never        <span class="token number">0</span>       no error
  sync-to-k8s-ciliumendpoint <span class="token punctuation">(</span><span class="token number">2868</span><span class="token punctuation">)</span>     9s ago         never        <span class="token number">0</span>       no error
  sync-to-k8s-ciliumendpoint <span class="token punctuation">(</span><span class="token number">2945</span><span class="token punctuation">)</span>     0s ago         never        <span class="token number">0</span>       no error
  template-dir-watcher                  never          never        <span class="token number">0</span>       no error
Proxy Status:            OK, <span class="token function">ip</span> <span class="token number">10.0</span>.0.78, <span class="token number">0</span> redirects active on ports <span class="token number">10000</span>-20000
Global Identity Range:   min <span class="token number">256</span>, max <span class="token number">65535</span>
Hubble:                  Ok   Current/Max Flows: <span class="token number">377</span>/4095 <span class="token punctuation">(</span><span class="token number">9.21</span>%<span class="token punctuation">)</span>, Flows/s: <span class="token number">1.67</span>   Metrics: Disabled
KubeProxyReplacement Details:
  Status:                 Strict
  Socket LB:              Enabled
  Socket LB Protocols:    TCP, UDP
  Devices:                enp1s0 <span class="token number">192.168</span>.31.100 <span class="token punctuation">(</span>Direct Routing<span class="token punctuation">)</span>
  Mode:                   DSR
  Backend Selection:      Maglev <span class="token punctuation">(</span>Table Size: <span class="token number">16381</span><span class="token punctuation">)</span>
  Session Affinity:       Enabled
  Graceful Termination:   Enabled
  NAT46/64 Support:       Disabled
  XDP Acceleration:       Disabled
  Services:
  - ClusterIP:      Enabled
  - NodePort:       Enabled <span class="token punctuation">(</span>Range: <span class="token number">30000</span>-32767<span class="token punctuation">)</span>
  - LoadBalancer:   Enabled
  - externalIPs:    Enabled
  - HostPort:       Enabled
BPF Maps:   dynamic sizing: on <span class="token punctuation">(</span>ratio: <span class="token number">0.002500</span><span class="token punctuation">)</span>
  Name                          Size
  Non-TCP connection tracking   <span class="token number">65536</span>
  TCP connection tracking       <span class="token number">131072</span>
  Endpoint policy               <span class="token number">65535</span>
  Events                        <span class="token number">4</span>
  IP cache                      <span class="token number">512000</span>
  IP masquerading agent         <span class="token number">16384</span>
  IPv4 fragmentation            <span class="token number">8192</span>
  IPv4 <span class="token function">service</span>                  <span class="token number">65536</span>
  IPv6 <span class="token function">service</span>                  <span class="token number">65536</span>
  IPv4 <span class="token function">service</span> backend          <span class="token number">65536</span>
  IPv6 <span class="token function">service</span> backend          <span class="token number">65536</span>
  IPv4 <span class="token function">service</span> reverse NAT      <span class="token number">65536</span>
  IPv6 <span class="token function">service</span> reverse NAT      <span class="token number">65536</span>
  Metrics                       <span class="token number">1024</span>
  NAT                           <span class="token number">131072</span>
  Neighbor table                <span class="token number">131072</span>
  Global policy                 <span class="token number">16384</span>
  Per endpoint policy           <span class="token number">65536</span>
  Session affinity              <span class="token number">65536</span>
  Signal                        <span class="token number">4</span>
  Sockmap                       <span class="token number">65535</span>
  Sock reverse NAT              <span class="token number">65536</span>
  Tunnel                        <span class="token number">65536</span>
Encryption:            Disabled
Cluster health:        <span class="token number">2</span>/2 reachable    <span class="token punctuation">(</span><span class="token number">2022</span>-08-23T01:59:33Z<span class="token punctuation">)</span>
  Name                 IP               Node        Endpoints
  fedora <span class="token punctuation">(</span>localhost<span class="token punctuation">)</span>   <span class="token number">192.168</span>.31.100   reachable   reachable
  knode1               <span class="token number">192.168</span>.31.101   reachable   reachable</code></pre>

<p>cilium-health status –probe 之后的结果， 多个节点之间的联通性正常：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@fedora:/home/cilium<span class="token comment"># cilium-health status --probe</span>
Probe time:   <span class="token number">2022</span>-08-23T02:01:04Z
Nodes:
  fedora <span class="token punctuation">(</span>localhost<span class="token punctuation">)</span>:
    Host connectivity to <span class="token number">192.168</span>.31.100:
      ICMP to stack:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">140.825</span>µs
      HTTP to agent:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">199.54</span>µs
    Endpoint connectivity to <span class="token number">10.0</span>.0.201:
      ICMP to stack:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">128.2</span>µs
      HTTP to agent:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">263.034</span>µs
  knode1:
    Host connectivity to <span class="token number">192.168</span>.31.101:
      ICMP to stack:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">235.981</span>µs
      HTTP to agent:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">330.706</span>µs
    Endpoint connectivity to <span class="token number">10.0</span>.1.251:
      ICMP to stack:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">177.807</span>µs
      HTTP to agent:   OK, <span class="token assign-left variable">RTT</span><span class="token operator">=</span><span class="token number">275.869</span>µs</code></pre>

<p>没有执行Cilium connectivity Test， 这个测试和 1.1.1.1:443 的测试在基本上每次都是失败的。目前原因还不清楚， 没调查，但是集群内的Pod访问外部的网络是完全正常的。 </p>
<p>基于AWS EC2 测试的结果（无法关闭 Masquerade 以及 绕过 Iptables）， 与flannel相比，Cilium当前的性能还是少少差一点点，但是跨越公网访问的稳定性更强，HTTP完全没有Failed请求。</p>
<p>没有开启XDP， 原因是我使用的是KVM的虚拟机 ，使用的驱动程序是VirtIO， 看起来这个驱动在我当前版本的虚拟化里面可能需要做一些特殊的设置才能开启， 我没有继续进行测试。</p>
<p>目前也没法对性能做任何的对比测试，  没有条件启动两个集群做对比，可以想见因为底层的响应时间极快，所以没有办法看出差距； 要么就是资源的抢占导致本身的测试结果不够稳定。</p>
<p>我目前还在 EC2 以及 EKS 中调试：</p>
<ol>
<li><p>EKS：AWS CNI替换掉之后有自己的问题， 不能开启完全的Iptables Bypass， 由于启用了ENI MODE 就会提供 EndpointRoute， 感觉这已经是BypassIptables， 但是没能验证，不确定。</p>
</li>
<li><p>EC2 部署的 Kubernetes： 集群不能开启HostRouting， 开启之后cilium-health status 无法完成对端节点上面Endpoint的检查， Connection Timeout。也不能完全work。</p>
</li>
</ol>
<h1 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h1><blockquote>
<p>其他公司业务的配置以及测试。</p>
<p><a href="https://www.ebpf.top/post/cilium-standalone-L4LB-XDP-zh/">https://www.ebpf.top/post/cilium-standalone-L4LB-XDP-zh/</a></p>
<p>按照Linux基金会的PPT中描述， KVM 虚拟化条件下也是可以开启XDP的，但是我只是测试， 就不折腾了， 我自己的PC 效果不一定明显。</p>
<p><a href="https://events19.linuxfoundation.cn/wp-content/uploads/2017/11/Accelerating-VM-Networking-through-XDP_Jason-Wang.pdf">https://events19.linuxfoundation.cn/wp-content/uploads/2017/11/Accelerating-VM-Networking-through-XDP_Jason-Wang.pdf</a> </p>
<p><a href="https://lore.kernel.org/bpf/b41ab0f0-4537-74b5-d7c3-b20ce082bdd6@redhat.com/T/">https://lore.kernel.org/bpf/b41ab0f0-4537-74b5-d7c3-b20ce082bdd6@redhat.com/T/</a></p>
<p><a href="https://lwn.net/Articles/841755/">https://lwn.net/Articles/841755/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, Cilium, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置kubelet的节点自动回收资源</title>
    <url>/2022/04/19/AWS/EKS_ConfigureNodeGC/</url>
    <content><![CDATA[<h1 id="配置Node节点按照磁盘阈值回收空间"><a href="#配置Node节点按照磁盘阈值回收空间" class="headerlink" title="配置Node节点按照磁盘阈值回收空间"></a>配置Node节点按照磁盘阈值回收空间</h1><blockquote>
<p><a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/eks-worker-nodes-image-cache/">https://aws.amazon.com/cn/premiumsupport/knowledge-center/eks-worker-nodes-image-cache/</a></p>
</blockquote>
<span id="more"></span>

<h1 id="修改Kubelet参数"><a href="#修改Kubelet参数" class="headerlink" title="修改Kubelet参数"></a>修改Kubelet参数</h1><ol>
<li>Kubelet默认提供了GC的参数  <pre class="language-bash" data-language="bash"><code class="language-bash">--image-gc-high-threshold 参数用于定义触发映像垃圾收集的磁盘使用百分比。默认值为 <span class="token number">85</span>%。
--image-gc-low-threshold 参数用于定义映像垃圾收集尝试释放的磁盘使用百分比。默认值为 <span class="token number">80</span>%。  </code></pre></li>
<li>如果是自己管理的Node，最好的方式是直接配置kubelet命令行的参数，将上面的参数指定需要的阈值，然后重启kubelet即可。<br>配置文件一般在 ： &#x2F;etc&#x2F;kubernetes&#x2F;kubelet.config<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"imageGCHighThresholdPercent"</span><span class="token builtin class-name">:</span> <span class="token number">70</span>, 
<span class="token string">"imageGCLowThresholdPercent"</span><span class="token builtin class-name">:</span> <span class="token number">50</span>,  </code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>serviceAccount 获取 Token 以及权限的方式</title>
    <url>/2023/08/05/AWS/EKS_ServiceAccountToken/</url>
    <content><![CDATA[<p>手动获取Token 并发送请求给容器接口。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/var/run/secrets/kubernetes.io/serviceaccount $ <span class="token builtin class-name">pwd</span>


/var/run/secrets/kubernetes.io/serviceaccount $ <span class="token function">cat</span> ./token
eyJhbGciOiJSUzI1NiIsImtpZCI6ImE3N2JhOGMwY2FjYWEwNDk0MWU4MWM0ODk1Y2JiZjBiOTU2NTA1OTYifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTcyMTk3ODkxOCwiaWF0IjoxNjkwNDQyOTE4LCJpc3MiOiJodHRwczovL29pZGMuZWtzLmNuLW5vcnRoLTEuYW1hem9uYXdzLmNvbS5jbi9pZC9DMEE5NzJGNERCMThBOTMxN0RBMzk0Q0MwRDMzMjU3RiIsImt1YmVybmV0ZXMuaW8iOnsibmFtZXNwYWNlIjoibW9uaXRvcmluZyIsInBvZCI6eyJuYW1lIjoicHJvbWV0aGV1cy1rOHMtMCIsInVpZCI6ImE4YzdkMGY2LWUyMmEtNGY2Ny04NzYzLWNiNGQwYzM5MWFlMCJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoicHJvbWV0aGV1cy1rOHMiLCJ1aWQiOiJmN2M3YWMzZC1iZmY4LTRmODctYTlkNy04MjJjYWM4ZDVjMjkifSwid2FybmFmdGVyIjoxNjkwNDQ2NTI1fSwibmJmIjoxNjkwNDQyOTE4LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6bW9uaXRvcmluZzpwcm9tZXRoZXVzLWs4cyJ9.D3a7b93ZnBrmM-hjFrklce8upr8gUhUYYwmjGzZKOKb4EWUCoQXY1p197UoViUmYzbiOhchbehKosFcOjiL2GVGXqDRIXPmFU9p8l80Z9fuilB2TmexB6uBavuEF6blKHkH0VjyVQ3Kg39WzjD0Atrw-G6N4QZ_m0TOcKFfqRPebbH-Q-vzz5UuNPUYRKF4XZIT84QqYLYiBOkkeFIS_abo18YddMbn2AZQcbWamxQV2XPXjNKKwHeQvP1Xdr4hZLt0oGudE2XZtQp60ZCrfDmQteh-KhMWRvsZpoNvE4n8HieAhTTrFq_TjjX9IHlXrPmcONAkQ33jVgRIaw_r_0g


<span class="token builtin class-name">export</span> <span class="token assign-left variable">TOKEN</span><span class="token operator">=</span><span class="token string">"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImE3N2JhOGMwY2FjYWEwNDk0MWU4MWM0ODk1Y2JiZjBiOTU2NTA1OTYifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTcyMTk3ODkxOCwiaWF0IjoxNjkwNDQyOTE4LCJpc3MiOiJodHRwczovL29pZGMuZWtzLmNuLW5vcnRoLTEuYW1hem9uYXdzLmNvbS5jbi9pZC9DMEE5NzJGNERCMThBOTMxN0RBMzk0Q0MwRDMzMjU3RiIsImt1YmVybmV0ZXMuaW8iOnsibmFtZXNwYWNlIjoibW9uaXRvcmluZyIsInBvZCI6eyJuYW1lIjoicHJvbWV0aGV1cy1rOHMtMCIsInVpZCI6ImE4YzdkMGY2LWUyMmEtNGY2Ny04NzYzLWNiNGQwYzM5MWFlMCJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoicHJvbWV0aGV1cy1rOHMiLCJ1aWQiOiJmN2M3YWMzZC1iZmY4LTRmODctYTlkNy04MjJjYWM4ZDVjMjkifSwid2FybmFmdGVyIjoxNjkwNDQ2NTI1fSwibmJmIjoxNjkwNDQyOTE4LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6bW9uaXRvcmluZzpwcm9tZXRoZXVzLWs4cyJ9.D3a7b93ZnBrmM-hjFrklce8upr8gUhUYYwmjGzZKOKb4EWUCoQXY1p197UoViUmYzbiOhchbehKosFcOjiL2GVGXqDRIXPmFU9p8l80Z9fuilB2TmexB6uBavuEF6blKHkH0VjyVQ3Kg39WzjD0Atrw-G6N4QZ_m0TOcKFfqRPebbH-Q-vzz5UuNPUYRKF4XZIT84QqYLYiBOkkeFIS_abo18YddMbn2AZQcbWamxQV2XPXjNKKwHeQvP1Xdr4hZLt0oGudE2XZtQp60ZCrfDmQteh-KhMWRvsZpoNvE4n8HieAhTTrFq_TjjX9IHlXrPmcONAkQ33jVgRIaw_r_0g"</span>

<span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-H</span> <span class="token string">"<span class="token variable">$TOKEN</span>"</span> https://127.0.0.1:10250/metrics</code></pre>

]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>删除所有非Running状态的Pod</title>
    <url>/2023/03/23/AWS/EKS_%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E9%9D%9ERunning%E7%8A%B6%E6%80%81%E7%9A%84Pod/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p> 如果所有的节点上面都有Taint， 然后这个没有Taint的节点磁盘满了， 会导致当前的节点上面留下许多状态不正常的Pod， 这些Pod大概率是停留在了Evicted状态， 或者是Completed, 甚至是 Unknown 。 </p>
<p>这种状态的Pod Deployment默认的情况下不会自动回收， 所以需要人工操作一下。 </p>
<p><a href="https://gist.github.com/ipedrazas/9c622404fb41f2343a0db85b3821275d">Knowledge Source</a></p>
<h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><p>记录一个命令来处理这个类型的Pod。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kubectl delete pod --field-selector<span class="token operator">=</span><span class="token string">"status.phase==Failed"</span></code></pre>

<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><ol>
<li>集群内两个节点， 其中一个节点Taint  <pre class="language-bash" data-language="bash"><code class="language-bash">kubectl taint nodes ip-172-31-60-181.cn-north-1.compute.internal <span class="token assign-left variable">app</span><span class="token operator">=</span>grafana:NoSchedule</code></pre></li>
<li>启动30个Grafana</li>
<li>登录到节点上面， 创建一个巨大的文件， 触发DiskPressure。  <pre class="language-bash" data-language="bash"><code class="language-bash">fallocate <span class="token parameter variable">-l</span> 72G ./large.file</code></pre></li>
<li>等待节点的DiskPressure被识别， 然后触发驱逐。<br>  <img src="https://s2.loli.net/2023/03/24/FhKR1VcmTykOQHM.png" alt="Snipaste_2023-03-23_23-49-57.png"></li>
<li>删除文件， 取消DiskPressure状态， 等待 30 个新的Pod Ready。<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./large.file</code></pre></li>
<li>使用命令清除所有不是Running状态的Pod。<pre class="language-bash" data-language="bash"><code class="language-bash">~$ kubectl delete pod --field-selector<span class="token operator">=</span><span class="token string">"status.phase==Failed"</span></code></pre></li>
<li>Over.<br>  <img src="https://s2.loli.net/2023/03/24/r268vuJj9fFncae.png" alt="38298320d5dbfe6c1c7763c4784d2e9.png"></li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>将ArchLinux作为节点加入EKS UnmanagedNode</title>
    <url>/2023/04/20/AWS/EKS_%E6%B7%BB%E5%8A%A0ArchLinux%E5%88%B0EKS%E4%BD%9C%E4%B8%BA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="添加一个自管理的节点"><a href="#添加一个自管理的节点" class="headerlink" title="添加一个自管理的节点"></a>添加一个自管理的节点</h2><p>添加这个自管理的节点是直接添加进入集群的， 并未使用EKS节点组的概念， 所以这个节点是可以被重启， 或者健康检查失败的， 并不具有任何的扩展或者弹性管理的能力。</p>
<ol>
<li><p>创建集群，启动一个新的 EC2， 登录到已经启动的 EKS 优化 OS 内，准备复制一些脚本过来。</p>
</li>
<li><p>添加EC2的标签： kubernetes.io&#x2F;cluster&#x2F;clusterName  owned</p>
</li>
<li><p>配置EC2的Instance Profile</p>
</li>
<li><p>控制台获取 Kubernetes APIServer的Endpoint URL</p>
</li>
<li><p>获取 apiserver b64 CA : <code>cat ~/.kube/config</code> 这个文件里面可以找到 ，或者是通过EKS的控制台上面， 找到 Base64 的 CA。</p>
</li>
<li><p>编辑 userdata， 或者 ssh 登录到ec2上面创建一个bash脚本用来调用 bootstrap.sh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/eks<span class="token punctuation">;</span> <span class="token function">touch</span> ~/eks/start.sh
---
<span class="token comment">#!/bin/bash</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-ex</span>

<span class="token assign-left variable">B64_CLUSTER_CA</span><span class="token operator">=</span>
<span class="token assign-left variable">API_SERVER_URL</span><span class="token operator">=</span>
<span class="token assign-left variable">K8S_CLUSTER_DNS_IP</span><span class="token operator">=</span><span class="token number">10.100</span>.0.10

/etc/eks/bootstrap.sh <span class="token variable">$&#123;ClusterName&#125;</span> --b64-cluster-ca <span class="token variable">$&#123;B64_CLUSTER_CA&#125;</span> --apiserver-endpoint <span class="token variable">$&#123;API_SERVER_URL&#125;</span></code></pre>
</li>
<li><p>集群里面<strong>没有节点组 ， 也不会创建aws-auth configmap</strong> 所以节点无法正常的加入集群， 需要手动创建。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapRoles</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: [CLUSTER_ROLE]
      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span>
  <span class="token key atrule">mapUsers</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    []</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>auth
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system</code></pre></li>
</ol>
<h2 id="需要复制的文件"><a href="#需要复制的文件" class="headerlink" title="需要复制的文件"></a>需要复制的文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> containerd <span class="token comment"># 安装Containerd</span>
<span class="token function">scp</span> /etc/eks/bootstrap.sh root@54.222.253.235:/etc/eks/bootstrap.sh <span class="token comment"># 复制bootstrap</span>
<span class="token function">scp</span> /usr/bin/imds root@54.222.253.235:/usr/bin/imds <span class="token comment"># shell 脚本， 用来帮忙调用ec2 metadata 获取实例和VPC子网的信息</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/eks/ root@54.222.253.235:/etc/eks/ <span class="token comment"># 直接复制了eks的相关脚本和配置模板</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /var/lib/kubelet/kubeconfig root@54.222.253.235:/var/lib/kubelet/kubeconfig <span class="token comment"># 复制kubeletconfig配置文件模板</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/kubernetes/ root@54.222.253.235:/etc/kubernetes/ <span class="token comment"># 复制 kubernetes 的配置文件</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/kubernetes/kubelet/ root@54.222.253.235:/etc/kubernetes/kubelet/ <span class="token comment"># 上面的命令没有递归复制， 所以需要指定</span>

<span class="token comment"># 设置对应的内核参数， 如果不做kubelet 会报错提示 这些参数不符合要求。</span>
kernel.panic <span class="token operator">=</span> <span class="token number">10</span>
kernel.panic_on_oops <span class="token operator">=</span> <span class="token number">1</span>
vm.overcommit_memory <span class="token operator">=</span> <span class="token number">1</span></code></pre>

<h3 id="Bootstrap-脚本内容分析"><a href="#Bootstrap-脚本内容分析" class="headerlink" title="Bootstrap 脚本内容分析"></a>Bootstrap 脚本内容分析</h3><p>记录一下脚本自动配置的内容， 大概就是 获取变量， aws的服务地址， ec2 元数据地址， 替换模板中的变量生成Kubelet配置文件 和 Containerd 的配置文件（这个替换是一次性的， 也就是说， bootstrap只能变更模板中的变量一次， 第二次执行只会生成刷新一次集群的信息， 以及重启服务）。</p>
<ol>
<li>读取bootstrap后面给出的参数，设置变量， 例如： ClusterName etc.</li>
<li>查看Kubelet的版本， 决定Runtime， containerd | dockerd, 判断条件是 kubelet 版本 大于 1.24<pre class="language-bash" data-language="bash"><code class="language-bash">++ kubelet <span class="token parameter variable">--version</span>
++ <span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">'[0-9]\.[0-9]+\.[0-9]+'</span>
+ <span class="token assign-left variable">KUBELET_VERSION</span><span class="token operator">=</span><span class="token number">1.24</span>.9
---
+ <span class="token assign-left variable">IS_124_OR_GREATER</span><span class="token operator">=</span>true
+ <span class="token assign-left variable">DEFAULT_CONTAINER_RUNTIME</span><span class="token operator">=</span>containerd</code></pre></li>
<li>设置ECR以及Pause容器地址<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取region以及aws service domain</span>
+ <span class="token assign-left variable">AWS_DEFAULT_REGION</span><span class="token operator">=</span>cn-north-1
+ <span class="token assign-left variable">AWS_SERVICES_DOMAIN</span><span class="token operator">=</span>amazonaws.com.cn

<span class="token comment"># 调用脚本 /etc/eks/get-ecr-uri.sh cn-north-1 amazonaws.com.cn ''</span>
+ <span class="token assign-left variable">ECR_URI</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn
+ <span class="token assign-left variable">PAUSE_CONTAINER_IMAGE</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause
+ <span class="token assign-left variable">PAUSE_CONTAINER</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5
+ <span class="token assign-left variable">CA_CERTIFICATE_DIRECTORY</span><span class="token operator">=</span>/etc/kubernetes/pki
+ <span class="token assign-left variable">CA_CERTIFICATE_FILE_PATH</span><span class="token operator">=</span>/etc/kubernetes/pki/ca.crt</code></pre></li>
<li>创建证书目录：<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/pki
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,MASTER_ENDPOINT,https://CE0253A94B6B14215AE3282580CFA5E3.yl4.cn-north-1.eks.amazonaws.com.cn,g /var/lib/kubelet/kubeconfig
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,AWS_REGION,cn-north-1,g /var/lib/kubelet/kubeconfig
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,CLUSTER_NAME,NewClusterForManualJoin,g /var/lib/kubelet/kubeconfig</code></pre></li>
<li>获取 VPC CIDR<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># imds shell script help to get metadata.</span>
imds: /usr/bin/imds
++ imds latest/meta-data/local-ipv4
++ imds latest/meta-data/network/interfaces/macs/02:66:06:2e:48:08/vpc-ipv4-cidr-blocks</code></pre></li>
<li>创建kubelet 配置, 计算预留的资源 和 MaxPod 等等参数的数值。<pre class="language-bash" data-language="bash"><code class="language-bash">/etc/kubernetes/kubelet/kubelet-config.json
+ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/kubelet.service.d
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/containerd
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/cni/net.d
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/containerd.service.d</code></pre></li>
<li>创建containerd 配置文件<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token builtin class-name">printf</span> <span class="token string">'[Service]\nSlice=runtime.slice\n'</span>
+ <span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/containerd.service.d/00-runtime-slice.conf
+ <span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,SANDBOX_IMAGE,918309763551.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5,g /etc/eks/containerd/containerd-config.toml</code></pre></li>
<li>kubelet配置和启动。<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-v</span> /etc/eks/containerd/kubelet-containerd.service /etc/systemd/system/kubelet.service
+ <span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/systemd/system/kubelet.service
+ <span class="token function">sudo</span> containerd config dump
+ systemctl <span class="token builtin class-name">enable</span> kubelet
+ systemctl start kubelet</code></pre></li>
</ol>
<h2 id="制作-NodeTemplate-AMI"><a href="#制作-NodeTemplate-AMI" class="headerlink" title="制作 NodeTemplate AMI"></a>制作 NodeTemplate AMI</h2><ol>
<li><p>如果使用已经加入过集群的实例直接制作AMI， 节点会无法加入， kubelet报错是APIserver拒绝这个节点的加入。</p>
<pre class="language-none"><code class="language-none">2023-04-19T15:10:13Z kubelet-eks.daemon[11577]: E0419 15:10:13.325154   11577 event.go:267] Server rejected event &#39;&amp;v1.Event&#123;TypeMeta:v1.TypeMeta&#123;Kind:&quot;&quot;, APIVersion:&quot;&quot;&#125;, ObjectMeta:v1.ObjectMeta&#123;Name:&quot;ip-10-0-1-249.cn-northwest-1.compute.internal.17575e9c08aefd8d&quot;, GenerateName:&quot;&quot;, Namespace:&quot;default&quot;, SelfLink:&quot;&quot;, UID:&quot;&quot;, ResourceVersion:&quot;&quot;, Generation:0, CreationTimestamp:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), DeletionTimestamp:&lt;nil&gt;, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ZZZ_DeprecatedClusterName:&quot;&quot;, ManagedFields:[]v1.ManagedFieldsEntry(nil)&#125;, InvolvedObject:v1.ObjectReference&#123;Kind:&quot;Node&quot;, Namespace:&quot;&quot;, Name:&quot;ip-10-0-1-249.cn-northwest-1.compute.internal&quot;, UID:&quot;ip-10-0-1-249.cn-northwest-1.compute.internal&quot;, APIVersion:&quot;&quot;, ResourceVersion:&quot;&quot;, FieldPath:&quot;&quot;&#125;, Reason:&quot;NodeHasNoDiskPressure&quot;, Message:&quot;Node ip-10-0-1-249.cn-northwest-1.compute.internal status is now: NodeHasNoDiskPressure&quot;, Source:v1.EventSource&#123;Component:&quot;kubelet&quot;, Host:&quot;ip-10-0-1-249.cn-northwest-1.compute.internal&quot;&#125;, FirstTimestamp:time.Date(2023, time.April, 19, 15, 10, 10, 99764621, time.Local), LastTimestamp:time.Date(2023, time.April, 19, 15, 10, 13, 272025156, time.Local), Count:6, Type:&quot;Normal&quot;, EventTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Series:(*v1.EventSeries)(nil), Action:&quot;&quot;, Related:(*v1.ObjectReference)(nil), ReportingController:&quot;&quot;, ReportingInstance:&quot;&quot;&#125;&#39;: &#39;Unauthorized&#39; (will not retry!)</code></pre>
</li>
<li><p>排查所有的地方之后，权限都是正确的， 依旧没发现到底哪里的权限有问题。</p>
</li>
<li><p>发生问题的原因是 已经启动的节点， 有些配置文件已经被更改过了， 写入了固定的信息，  例如apiserver的ca证书， 以及节点的Endpoint地址， 这些文件需要被删除 或者 重新配置，其中最主要的影响 是 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config 这个配置文件中已经被替换的变量， 还有控制平面错误的CA证书以及信息。</p>
</li>
<li><p>所需处理的文件如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-10-0-1-249:/var/lib/kubelet<span class="token comment"># ll /var/lib/kubelet/</span>
total <span class="token number">44</span>
drwxr-xr-x  <span class="token number">8</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 ./
drwxr-xr-x <span class="token number">38</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:40 <span class="token punctuation">..</span>/
-rw-------  <span class="token number">1</span> root root   <span class="token number">62</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 cpu_manager_state
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:50 device-plugins/
-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">575</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 kubeconfig <span class="token comment"># 这个目录中唯一存在的一个文件，里面应该是为配置的变量，不能被替换为确定的值。</span>
-rw-------  <span class="token number">1</span> root root   <span class="token number">61</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 memory_manager_state
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 pki/
drwxr-x---  <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 plugins/
drwxr-x---  <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 plugins_registry/
drwxr-x---  <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 pod-resources/
drwxr-x---  <span class="token number">8</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:50 pods/

root@ip-10-0-1-249:/etc/kubernetes/pki<span class="token comment"># ll /etc/kubernetes/pki/</span>
total <span class="token number">12</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:38 ./
drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> Apr <span class="token number">19</span> <span class="token number">15</span>:33 <span class="token punctuation">..</span>/
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1099</span> Apr <span class="token number">19</span> <span class="token number">15</span>:41 ca.crt</code></pre>

<p>删除上面目录中的所有文件， 并创建一个新的空文件 <code>touch /var/lib/kubelet/kubeconfig</code>， 写入内容如下， 保留其中的变量值， 这个部分的变量会在bootstrap的时候替换掉： </p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Config
<span class="token key atrule">clusters</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">cluster</span><span class="token punctuation">:</span>
    <span class="token key atrule">certificate-authority</span><span class="token punctuation">:</span> /etc/kubernetes/pki/ca.crt
    <span class="token key atrule">server</span><span class="token punctuation">:</span> MASTER_ENDPOINT 
  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes
<span class="token key atrule">contexts</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">context</span><span class="token punctuation">:</span>
    <span class="token key atrule">cluster</span><span class="token punctuation">:</span> kubernetes
    <span class="token key atrule">user</span><span class="token punctuation">:</span> kubelet
  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubelet
<span class="token key atrule">current-context</span><span class="token punctuation">:</span> kubelet
<span class="token key atrule">users</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubelet
  <span class="token key atrule">user</span><span class="token punctuation">:</span>
    <span class="token key atrule">exec</span><span class="token punctuation">:</span>
      <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> client.authentication.k8s.io/v1beta1
      <span class="token key atrule">command</span><span class="token punctuation">:</span> /usr/bin/aws<span class="token punctuation">-</span>iam<span class="token punctuation">-</span>authenticator
      <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">"token"</span>
        <span class="token punctuation">-</span> <span class="token string">"-i"</span>
        <span class="token punctuation">-</span> <span class="token string">"CLUSTER_NAME"</span>
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>region
        <span class="token punctuation">-</span> <span class="token string">"AWS_REGION"</span></code></pre>
</li>
<li><p>将上面的步骤做完之后关闭实例， 并创建一个新的AMI即可。 </p>
</li>
<li><p>当AMI被创建为实例， 并完成运行Bootstrap脚本之后， 所有的节点信息会被重新配置， 这样节点才能正确的加入集群中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java连接数据库报错No subject alternative names present</title>
    <url>/2020/11/16/Database/Databases_Mongo_JavaException-MangoDB-ssl/</url>
    <content><![CDATA[<p>配置监控的时候需要配置和获取MongoDB的信息，使用华为云的MongoDBPaaS服务，如果开启了SSL就无法正常连接。</p>
<p>报错如下： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">Timed out after <span class="token number">30000</span> ms <span class="token keyword">while</span> waiting to connect. Client view of cluster state is <span class="token punctuation">&#123;</span>type<span class="token operator">=</span>UNKNOWN, <span class="token assign-left variable">servers</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>address<span class="token operator">=</span><span class="token number">192.168</span>.1.1:8635, <span class="token assign-left variable">type</span><span class="token operator">=</span>UNKNOWN, <span class="token assign-left variable">state</span><span class="token operator">=</span>CONNECTING, <span class="token assign-left variable">exception</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>com.mongodb.MongoSocketWriteException: Exception sending message<span class="token punctuation">&#125;</span>, caused by <span class="token punctuation">&#123;</span>javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative names present<span class="token punctuation">&#125;</span>, caused by <span class="token punctuation">&#123;</span>java.security.cert.CertificateException: No subject alternative names present<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre>

<p>网上搜索到的结果基本上都是从开发的角度解决这个错误， 如果是从运维的方向上 ， 没有什么有效的方法可以解决这个问题么？比如通过一些参数或者设置。</p>
<p>有的 ： </p>
<blockquote>
<p>在连接串里加上sslinvalidhostnameallowed&#x3D;true即可, 设置是直接允许无效的hostname证书， 算是不解决证书问题一个解决方案吧。</p>
</blockquote>
<p>所以 最后的连接参数变成： </p>
<pre class="language-zsh" data-language="zsh"><code class="language-zsh">mongodb:&#x2F;&#x2F;192.168.1.1:8635&#x2F;test?authSource&#x3D;admin&amp;ssl&#x3D;true&amp;sslinvalidhostnameallowed&#x3D;true</code></pre>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MongoDB, JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库单表的测试</title>
    <url>/2023/05/19/Database/Databases_MySQL-why-2000w/</url>
    <content><![CDATA[<p>基于这个问题的测试<a href="https://articles.zsxq.com/id_szzdrtss5t7o.html">为什么MySQL单表不要超过2000w行？</a></p>
<h2 id="测试过程："><a href="#测试过程：" class="headerlink" title="测试过程："></a>测试过程：</h2><pre class="language-none"><code class="language-none">CREATE TABLE test(
id int NOT NULL AUTO_INCREMENT PRIMARY KEY comment &#39;主键&#39;,
person_id int not null comment &#39;用户id&#39;,
person_name VARCHAR(200) comment &#39;用户名称&#39;,
gmt_create datetime comment &#39;创建时间&#39;,
gmt_modified datetime comment &#39;修改时间&#39;
) comment &#39;人员信息表&#39;;

插入数据：
insert into test values(1,1,&#39;user_1&#39;, NOW(), now());

insert into test (person_id, person_name, gmt_create, gmt_modified)
select (@i:&#x3D;@i+1) as rownum, person_name, now(), now() from test, (select @i:&#x3D;100) as init;
set @i&#x3D;1;

&#x2F;&#x2F;测试 SQL,记录他们的运行时间
select count(*) from test;
select count(*) from test where id&#x3D;XXX;

查看这个表格的数据量大小： 
show table status like &#39;test&#39;\G</code></pre>

<p>200w行表： </p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; describe table test;
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2092640 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
1 row in set, 1 warning (0.00 sec)

MySQL [test]&gt; select count(*) from test;
1 row in set (0.045 sec)
1 row in set (0.050 sec)
1 row in set (0.050 sec)</code></pre>

<p>400w：</p>
<pre class="language-none"><code class="language-none">mysql&gt; describe table test;
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 4185280 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
1 row in set, 1 warning (0.00 sec)

MySQL [test]&gt; select count(*) from test;
1 row in set (0.126 sec)
1 row in set (0.120 sec)
1 row in set (0.119 sec)</code></pre>

<p>800w：</p>
<pre class="language-none"><code class="language-none">mysql&gt; describe table test;
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 8370120 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+
1 row in set, 1 warning (0.00 sec)

MySQL [test]&gt; select count(*) from test;
1 row in set (0.266 sec)
1 row in set (0.266 sec)
1 row in set (0.253 sec)</code></pre>

<p>1600w：</p>
<pre class="language-none"><code class="language-none">mysql&gt; describe table test;
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows     | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 16337090 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
1 row in set, 1 warning (0.00 sec)

MySQL [test]&gt; select count(*) from test;
1 row in set (0.544 sec)
1 row in set (0.524 sec)
1 row in set (0.523 sec)</code></pre>

<p>3200w：</p>
<pre class="language-none"><code class="language-none">mysql&gt; describe table test;
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows     | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 32665301 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------+
1 row in set, 1 warning (0.00 sec)

MySQL [test]&gt; select count(*) from test;
1 row in set (1.068 sec)
1 row in set (1.057 sec)
1 row in set (1.044 sec)</code></pre>

<p>这个结果基本上都是线性的， 感觉数据量实在是太小了。</p>
<pre class="language-none"><code class="language-none">mysql&gt; show table status like &#39;test&#39;\G
*************************** 1. row ***************************
           Name: test
         Engine: InnoDB
        Version: 10
     Row_format: Dynamic
           Rows: 4182365
 Avg_row_length: 48
    Data_length: 202063872
Max_data_length: 0
   Index_length: 0
      Data_free: 6291456
 Auto_increment: 4652971
    Create_time: 2023-05-19 07:56:46
    Update_time: 2023-05-19 07:57:50
     Check_time: NULL
      Collation: utf8mb4_0900_ai_ci
       Checksum: NULL
 Create_options:
        Comment: 人员信息表
1 row in set (0.00 sec)</code></pre>

<hr>
<h2 id="换个方案（-从大佬那边伸手拿来的"><a href="#换个方案（-从大佬那边伸手拿来的" class="headerlink" title="换个方案（ 从大佬那边伸手拿来的"></a>换个方案（ 从大佬那边伸手拿来的</h2><pre class="language-none"><code class="language-none">CREATE TABLE tt1(
id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
person_id tinyint not null ,
person_name1 VARCHAR(3000) ,
person_name2 VARCHAR(3000) ,
person_name3 VARCHAR(3000) ,
person_name4 VARCHAR(3000) ,
person_name5 VARCHAR(3000) ,
gmt_create datetime ,
gmt_modified datetime
) ;	

insert into tt1 (person_id, person_name1, person_name2, person_name3, person_name4, person_name5, gmt_create, gmt_modified)
values (1, lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), now(), now());

insert into tt1 (person_id, person_name1, person_name2, person_name3, person_name4, person_name5, gmt_create, gmt_modified)
select person_id, person_name1, person_name2, person_name3, person_name4, person_name5, now(), now() from tt1;

show table status like &#39;tt1&#39;\G

rename user &#39;root&#39;@&#39;localhost&#39;  to &#39;root&#39;@&#39;%&#39;;

select user,host from mysql.user;
</code></pre>

<p>这次的话， 添加数据的时间实在是太久了， 记录一下中间结果的变化吧： </p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">MySQL [test]&gt; select count(*) from tt1;
+----------+
| count(*) |
+----------+
|    32768 |
+----------+
1 row in set (0.097 sec)

MySQL [test]&gt; select count(*) from tt1;
+----------+
| count(*) |
+----------+
|    32768 |
+----------+
1 row in set (0.096 sec)

MySQL [test]&gt; select count(*) from tt1;
+----------+
| count(*) |
+----------+
|    65536 |
+----------+
1 row in set (0.199 sec)

MySQL [test]&gt; select count(*) from tt1;
+----------+
| count(*) |
+----------+
|    65536 |
+----------+
1 row in set (0.198 sec)

Query OK, 32768 rows affected (1 min 29.31 sec)
Query OK, 65536 rows affected (2 min 57.96 sec)
Query OK, 131072 rows affected (6 min 6.59 sec)
Query OK, 262144 rows affected (13 min 42.06 sec)

# 查table的Page_NO
SELECT b.name, a.name, index_id, TYPE, a.SPACE, a.PAGE_NO FROM information_schema.INNODB_INDEXES a, information_schema.INNODB_TABLES b WHERE a.TABLE_ID &#x3D; b.table_id AND a.SPACE &lt;&gt; 0 AND b.NAME &#x3D; &#39;tt1&#39;;

mysql&gt; SELECT b.name, a.name, index_id, type, a.space, a.PAGE_NO FROM information_schema.INNODB_INDEXES a, information_schema.INNODB_TABLES b WHERE a.table_id &#x3D; b.table_id AND a.space &lt;&gt; 0;

| cap&#x2F;sbtest24                            | PRIMARY                   |      356 |    3 |   129 |       4 |
| test&#x2F;test                               | PRIMARY                   |      359 |    3 |   131 |       4 |
| test&#x2F;tt1                                | PRIMARY                   |      360 |    3 |   132 |       4 |
+-----------------------------------------+---------------------------+----------+------+-------+---------+

计算对应需要查看的位置， 字节数: 16 * 1024 * page_no + 64
# 使用hexdump 查看表格所在的b+树有几层。
hexdump -s 49216 -n 10 .&#x2F;tt1.ibd

# 创建tt2完全复制tt1的内容。
create table tt2 as select * from tt1;</code></pre>

<blockquote>
<p>对于MySQL的内存使用，在数据库启动后，不会立即将buffer pool对应的内存占用，而是随着使用逐步占用。</p>
<p>在5月19日看到您的实例有连接数达到1200，并持续了一段时间，内存随之下降。您可以通过查看 Innodb_buffer_pool_size 的值来确定 buffer pool 的最大值。<br>然后根据公式来计算预期的内存使用情况：<br>Maximum MySQL Memory Usage &#x3D; innodb_buffer_pool_size + key_buffer_size + ((read_buffer_size + read_rnd_buffer_size + sort_buffer_size + join_buffer_size) X max_connections)</p>
<p>我按照您的配置，创建了mysql 5.7.41 版本，实例类型为 db.m5.xlarge ，公式中的参数均为默认值，计算结果如下：<br>Maximum MySQL Memory Usage<br>&#x3D; innodb_buffer_pool_size + key_buffer_size + ((read_buffer_size + read_rnd_buffer_size + sort_buffer_size + join_buffer_size) X max_connections)<br>&#x3D; 11811160064 + 16777216 + (262144 + 524288 + 262144 + 262144 ) * 1200<br>&#x3D; 13400801280 即 12.48GB</p>
<p>总内存为 16 GB ，减去 12.48 GB，还剩下 3.52 GB。再除去一些SQL执行中消耗的内存以及操作系统等消耗的内存，目前指标上显示剩余1.5GB左右。</p>
<p>在5月19日连接数增加前，按300连接数算，上述公式计算结果为 11.38 GB，然而可用内存指标显示为 7 GB，相加起来是大于 16 GB 的。由此也能说明是 MySQL 并未直接将参数设置的所有可用内存都占用，而是随着使用逐步增加的。<br>当连接数增加后，MySQL真正使用了这部分内存(如buffer pool)，不会主动释放。</p>
<p>因此目前可用内存状况符合预期，如果您希望回收 MySQL 占用的内存，可以考虑重启数据库，但之后业务量较大时，还会重新占用这些内存。</p>
</blockquote>
<h3 id="Mysql80重置密码"><a href="#Mysql80重置密码" class="headerlink" title="Mysql80重置密码"></a>Mysql80重置密码</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">echo &quot;skip-grant-tables&quot; &gt;&gt; &#x2F;etc&#x2F;my.cnf
sudo systemctl restart mysqld

mysql -uroot -p

SET PASSWORD &#x3D; &#39;root&#39;;

rename user &#39;root&#39;@&#39;localhost&#39;  to &#39;root&#39;@&#39;%&#39;;

select user,host from mysql.user;</code></pre>

<h3 id="MySQLVersion-8-0-修改密码策略："><a href="#MySQLVersion-8-0-修改密码策略：" class="headerlink" title="MySQLVersion 8.0 修改密码策略："></a>MySQLVersion 8.0 修改密码策略：</h3><pre class="language-none"><code class="language-none">mysql -u wordpress -p -h mysql.liarlee.site

MySQL [(none)]&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;
+--------------------------------------+--------+
| Variable_name                        | Value  |
+--------------------------------------+--------+
| validate_password.check_user_name    | ON     |
| validate_password.dictionary_file    |        |
| validate_password.length             | 8      |
| validate_password.mixed_case_count   | 1      |
| validate_password.number_count       | 1      |
| validate_password.policy             | MEDIUM |
| validate_password.special_char_count | 1      |
+--------------------------------------+--------+
7 rows in set (0.010 sec)

MySQL [(none)]&gt; set global validate_password.policy&#x3D;0;
Query OK, 0 rows affected (0.000 sec)

MySQL [(none)]&gt; set global validate_password.length&#x3D;4;
Query OK, 0 rows affected (0.001 sec)

MySQL [(none)]&gt; set password&#x3D;&#39;123123&#39;;
Query OK, 0 rows affected (0.005 sec)
</code></pre>

<p>如果添加了 skip-grant-tables 参数的话， 默认需要先flush priviledges; 然后才能更改密码， 否则的话会报错：</p>
<blockquote>
<p>ERROR 1290 (HY000): The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement</p>
</blockquote>
<p>解决办法是 ： </p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123123&#39;;
ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123123&#39;;
ERROR 1819 (HY000): Your password does not satisfy the current policy requirements

mysql&gt; set global validate_password.policy&#x3D;0;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; set global validate_password.length&#x3D;4;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; set password&#x3D;&#39;123123&#39;;
ERROR 1133 (42000): Can&#39;t find any matching row in the user table

mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123123&#39;;
Query OK, 0 rows affected (0.00 sec)</code></pre>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL, Database</tag>
      </tags>
  </entry>
  <entry>
    <title>在EC2实例每次启动的时候都运行Userdata</title>
    <url>/2023/09/06/Linux/Linux_AlwaysRunUserdata/</url>
    <content><![CDATA[<p>使用Cloud-init提供读取Userdata的功能。 </p>
<p>需要在Userdata中添加一个 MIME 的头部， 覆盖默认的行为。</p>
<blockquote>
<p><a href="https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive">https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive</a><br><a href="https://repost.aws/zh-Hans/knowledge-center/execute-user-data-ec2">https://repost.aws/zh-Hans/knowledge-center/execute-user-data-ec2</a></p>
</blockquote>
<p>具体需要添加的MIME 部分： </p>
<pre class="language-mime" data-language="mime"><code class="language-mime">Content-Type: multipart&#x2F;mixed; boundary&#x3D;&quot;&#x2F;&#x2F;&quot;
MIME-Version: 1.0

--&#x2F;&#x2F;
Content-Type: text&#x2F;cloud-config; charset&#x3D;&quot;us-ascii&quot;
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename&#x3D;&quot;cloud-config.txt&quot;

#cloud-config
cloud_final_modules:
- [scripts-user, always]

--&#x2F;&#x2F;
Content-Type: text&#x2F;x-shellscript; charset&#x3D;&quot;us-ascii&quot;
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename&#x3D;&quot;userdata.txt&quot;</code></pre>

<p>之后重新启动这个EC2 就可以了。 </p>
<h2 id="Troubleshooting-Guide"><a href="#Troubleshooting-Guide" class="headerlink" title="Troubleshooting Guide"></a>Troubleshooting Guide</h2><ul>
<li>首先可以的查看Userdata ， 在控制台 或者 AWScli</li>
<li>查看实例内部日志 或者 Console的日志：<br>&#x2F;var&#x2F;log&#x2F;cloud-init.log<br>&#x2F;var&#x2F;log&#x2F;cloud-init-output.log</li>
<li>查看userdata 注入的脚本内容：<br>&#x2F;var&#x2F;lib&#x2F;cloud&#x2F;instances&#x2F;i-09e08d362af7fa401&#x2F;scripts 在这个目录下。<br>文件树 ： <pre class="language-none"><code class="language-none">[root@ip-172-31-50-3 i-09e08d362af7fa401]# tree
.
├── boot-finished
├── cloud-config.txt
├── datasource
├── handlers
├── obj.pkl
├── scripts  # 这个
│   ├── part-001
│   └── part-002
├── sem
│   ├── config_amazonlinux_repo_https
│   ├── config_disk_setup
│   ├── config_keys_to_console
│   ├── config_locale
│   ├── config_mounts
│   ├── config_phone_home
│   ├── config_power_state_change
│   ├── config_resolv_conf
│   ├── config_rsyslog
│   ├── config_runcmd
│   ├── config_scripts_per_instance
│   ├── config_scripts_user
│   ├── config_set_hostname
│   ├── config_set_passwords
│   ├── config_ssh
│   ├── config_ssh_authkey_fingerprints
│   ├── config_timezone
│   ├── config_users_groups
│   ├── config_write_files
│   ├── config_write_metadata
│   ├── config_yum_add_repo
│   ├── config_yum_configure
│   └── consume_data
├── user-data.txt
├── user-data.txt.i
├── vendor-data.txt
└── vendor-data.txt.i

3 directories, 33 files</code></pre></li>
</ul>
<p>如果需要临时的改一些内容， 可以写在Userdata里面， 完成操作之后删除Userdata 就可以了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible笔记-1</title>
    <url>/2019/06/26/Linux/Linux_Ansible-Note-1/</url>
    <content><![CDATA[<p>Ansible的学习笔记。<br>Ansible管理方式是资源在目标主机上，定义所期望的目标状态的方式；每一个操作必须是幂等的（可重复操作但结果不变的）。ansible采用ssh链接所管理的服务器，因此具有agentless的优势。</p>
<h1 id="Ansible的安装"><a href="#Ansible的安装" class="headerlink" title="Ansible的安装"></a>Ansible的安装</h1><p>Ansible在Redhat的仓库中就有二进制包，直接dnf或yum安装就可以了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ yum <span class="token function">install</span> <span class="token parameter variable">-y</span> Ansible</code></pre>

<h1 id="Ansible的配置文件"><a href="#Ansible的配置文件" class="headerlink" title="Ansible的配置文件"></a>Ansible的配置文件</h1><p>Ansible的配置文件常用的有：</p>
<ol>
<li>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg  <strong>Ansible的配置文件</strong></li>
<li>&#x2F;etc&#x2F;ansible&#x2F;hosts       <strong>Ansible允许控制的主机列表，可在hosts文件中对服务器进行分组</strong></li>
</ol>
<h1 id="Ansible的组件"><a href="#Ansible的组件" class="headerlink" title="Ansible的组件"></a>Ansible的组件</h1><ol>
<li>ansible</li>
<li>ansible-playbook</li>
<li>ansible-doc</li>
</ol>
<h1 id="Ansible的配置和使用"><a href="#Ansible的配置和使用" class="headerlink" title="Ansible的配置和使用"></a>Ansible的配置和使用</h1><h2 id="Ansible命令模式"><a href="#Ansible命令模式" class="headerlink" title="Ansible命令模式"></a>Ansible命令模式</h2><blockquote>
<p>ansible [HOST_PARTTEN] -m [MODUELS] -a “[ARGS]” -f [Forks] -C -u [USERNAME] -c [CONNTECTION]</p>
</blockquote>
<h2 id="基于密钥认证ansible"><a href="#基于密钥认证ansible" class="headerlink" title="基于密钥认证ansible"></a>基于密钥认证ansible</h2><p>ansible支持使用ssh用户命名密码的认证方式，也支持使用ssh密钥认证的方式进行链接。ssh密钥的方式可以保证安全性，同时免去输入密码的麻烦。</p>
<ol>
<li>生成ansible的密钥 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-P</span> <span class="token string">""</span></code></pre></li>
<li>复制ansible的公钥到需要连接控制的host上   <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id-rsa.pub root@<span class="token punctuation">[</span>host1-IP<span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id-rsa.pub root@<span class="token punctuation">[</span>host2-IP<span class="token punctuation">]</span></code></pre></li>
<li>在ansible的hosts文件中记录需要控制的主机名或者IP <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"[host1-IP]"</span> <span class="token operator">>></span> /etc/ansible/hosts
<span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"[host2-IP]"</span> <span class="token operator">>></span> /etc/ansible/hosts</code></pre></li>
<li>使用ansible进行控制测试 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span>       <span class="token comment"># 进行连通测试</span>
<span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span> --list-hosts      <span class="token comment"># 列举所有受影响的主机，但是不执行操作</span>
<span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span> <span class="token parameter variable">-C</span>        <span class="token comment"># 进行测试，但是不对控制的主机作更改</span></code></pre></li>
</ol>
<h2 id="Ansible使用示例"><a href="#Ansible使用示例" class="headerlink" title="Ansible使用示例"></a>Ansible使用示例</h2><p>Ansible默认将所有的操作通过模块的方式定义，这里列举了一些常用的模块：</p>
<h3 id="Ansible管理查询命令"><a href="#Ansible管理查询命令" class="headerlink" title="Ansible管理查询命令"></a>Ansible管理查询命令</h3><p>使用ansible-doc命令来进行模块的文档查看, <em>&#x2F;var&#x2F;log&#x2F;messages</em> 中会记录操作日志。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible-doc <span class="token parameter variable">-l</span>      <span class="token comment"># 列举所有当前可用的模块和简单说明</span>
<span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible-doc <span class="token parameter variable">-s</span> <span class="token punctuation">[</span>MODULES_NAME<span class="token punctuation">]</span>     <span class="token comment"># 查看指定模块的使用方法和说明</span></code></pre>
<h3 id="User模块"><a href="#User模块" class="headerlink" title="User模块"></a>User模块</h3><p>设定主机的用户状态，对用户进行创建删除，更改信息以及参数。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置所有主机创建用户user,设置内容有uid,groups,shell</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">"name=user1 uid=3000 state=present groups=testgrp shell=/bin/zsh"</span></code></pre>
<h3 id="Group模块"><a href="#Group模块" class="headerlink" title="Group模块"></a>Group模块</h3><p>设置主机的组状态，对组状态进行编辑。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 控制所有主机创建组testgrp,设置内容有gid,非系统组</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">"gid=3000 name=testgrp state=present system=no"</span>
<span class="token comment"># 控制所有主机删除testgrp</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">"gid=3000 name=testgrp state=absent"</span></code></pre>
<h3 id="Copy模块"><a href="#Copy模块" class="headerlink" title="Copy模块"></a>Copy模块</h3><p>从本地复制内容到控制的所有主机,指定源地址和目的地址。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制本地/etc/fstab到所有主机的/tmp/fstab.ansible,同时设置权限为755</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"src=/etc/fstab dest=/tmp/fstab.ansible mode=755"</span>
<span class="token comment"># 通过键盘输入的文本内容传输到目的文件中，文件可不存在，可同时设置文件的属主属组</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"content='hello,world<span class="token entity" title="\n">\n</span>' dest=/tmp/test.txt owner=liarlee group=liarlee"</span>
<span class="token comment"># 递归复制目录及其子文件到所有主机的/tmp/下</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"src=/etc/httpd dest=/tmp/"</span>
<span class="token comment"># 复制目录下的所有文件到所有主机的/tmp/下，不创建对应的目录</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"src=/etc/httpd/ dest=/tmp/"</span>
<span class="token comment"># 在所有主机的目录下新建一个空文件</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"content='' dest=/tmp/testfile"</span></code></pre>
<h3 id="Fetch模块"><a href="#Fetch模块" class="headerlink" title="Fetch模块"></a>Fetch模块</h3><p>可从远程主机复制文件到本地。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从某个主机复制文件到本地目录，文件不存在退出</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible <span class="token punctuation">[</span>HOST1<span class="token punctuation">]</span> <span class="token parameter variable">-m</span> fetch <span class="token parameter variable">-a</span> <span class="token string">"src=/etc/fstab dest=/tmp/fstab.host1 fail-on-missing=yes"</span></code></pre>
<h3 id="Command模块"><a href="#Command模块" class="headerlink" title="Command模块"></a>Command模块</h3><p>command模块不调用shell去解析命令，仅仅读取第一个命令进行简单执行,因此不支持管道传递参数。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在所有主机上执行ifconfig</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">"ifconfig"</span></code></pre>
<h3 id="Shell模块"><a href="#Shell模块" class="headerlink" title="Shell模块"></a>Shell模块</h3><p>使用shell执行传递的命令，支持管道传递参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行shell命令修改用户的密码</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">"echo PASSWORD | passwd --stdin user1"</span></code></pre>
<h3 id="File模块"><a href="#File模块" class="headerlink" title="File模块"></a>File模块</h3><p>用于设定文件的状态以及属性</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在所有主机上建立目录</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"path=/tmp/testdir state=directory"</span>
<span class="token comment"># 在所有主机上对文件建立符号链接</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"src=/tmp/testfile path=/tmp/testfile.link state=link"</span>
<span class="token comment"># 在所有主机上设置文件或目录的权限</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"path=/tmp/testfile mode=0755"</span></code></pre>
<h3 id="Cron模块"><a href="#Cron模块" class="headerlink" title="Cron模块"></a>Cron模块</h3><p>用于设置计划任务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置每三分钟运行一次同步时间的脚本</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"miniute=*/3 name=synctime job='usr/sbin/update 172.16.0.1 &amp;> /dev/null'state=present"</span>
<span class="token comment"># 删除设置的计划任务</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"miniute=*/3 name=synctime job='usr/sbin/update 172.16.0.1 &amp;> /dev/null'state=absent"</span></code></pre>
<h3 id="Yum模块"><a href="#Yum模块" class="headerlink" title="Yum模块"></a>Yum模块</h3><p>用于调用yum进行软件包的安装卸载等，定义主机安装软件包的状态</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在所有主机安装nginx</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> <span class="token string">"name=nginx state=install"</span></code></pre>
<h3 id="Service模块"><a href="#Service模块" class="headerlink" title="Service模块"></a>Service模块</h3><p>用于定义管理目标主机的服务状态</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在所有的主机上启动nginx服务</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">"name=nginx state=startd"</span>
<span class="token comment"># 在所有的主机上设置nginx开机启动</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">"name=nginx enabled"</span>
<span class="token comment"># 在所有主机上停止nginx服务</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">"name=nginx state=stoppd"</span>
<span class="token comment"># 在所有的主机上重载nginx的配置文件</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">"name=nginx state=reloaded"</span>
<span class="token comment"># 在所有主机上重启nginx服务</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">"name=nginx state=restarted"</span></code></pre>
<h3 id="Scripts模块"><a href="#Scripts模块" class="headerlink" title="Scripts模块"></a>Scripts模块</h3><p>用于在所有主机上执行设置好的脚本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在所有的主机上执行test.sh</span>
    <span class="token punctuation">[</span>root@localhost Liarlee<span class="token punctuation">]</span>$ ansible all <span class="token parameter variable">-m</span> scripts <span class="token parameter variable">-a</span> <span class="token string">"/tmp/test.sh"</span></code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible笔记-2</title>
    <url>/2019/07/07/Linux/Linux_Ansible-Note-2/</url>
    <content><![CDATA[<p>这份笔记介绍的是Ansible playbook的格式及相关的内容。</p>
<h1 id="Ansible笔记"><a href="#Ansible笔记" class="headerlink" title="Ansible笔记"></a>Ansible笔记</h1><h2 id="Ansible-Playbook"><a href="#Ansible-Playbook" class="headerlink" title="Ansible Playbook"></a>Ansible Playbook</h2><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><blockquote>
<p>YAML（&#x2F;ˈjæməl&#x2F;，尾音类似 camel ) 是“YAML不是一种标记语言”的外语缩写（见前方参考资料原文内容）；但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。它是一种直观的能够被电脑识别的数据序列化格式，是一个可读性高并且容易被人类阅读，容易和脚本语言交互，用来表达资料序列的编程语言。<br><strong>数据结构</strong>可以用类似<strong>大纲的缩排方式</strong>呈现，<strong>结构通过缩进来表示</strong>，<strong>连续的项目通过减号“-”来表示</strong>，<strong>map结构里面的key&#x2F;value对用冒号“:”来分隔</strong>。<br>YAML文件一般的文件名为.yaml 或 .yml,文本结构举例如下：</p>
</blockquote>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">house</span><span class="token punctuation">:</span>
  <span class="token key atrule">family</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Doe
    <span class="token key atrule">parents</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> John
      <span class="token punctuation">-</span> Jane
    <span class="token key atrule">children</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> Paul
      <span class="token punctuation">-</span> Mark
      <span class="token punctuation">-</span> Simone
  <span class="token key atrule">address</span><span class="token punctuation">:</span>
    <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">34</span>
    <span class="token key atrule">street</span><span class="token punctuation">:</span> Main Street
    <span class="token key atrule">city</span><span class="token punctuation">:</span> Nowheretown
    <span class="token key atrule">zipcode</span><span class="token punctuation">:</span> <span class="token number">12345</span></code></pre>
<h3 id="Ansible-Playbook的关键字"><a href="#Ansible-Playbook的关键字" class="headerlink" title="Ansible Playbook的关键字"></a>Ansible Playbook的关键字</h3><p>内容与命令的内容基本一致，有如下的几个关键字：</p>
<ol>
<li><strong>- hosts</strong>  用来指定控制主机的范围,<strong>注意短横线后空格接字符</strong></li>
<li><strong>remote_user</strong> 用来指定使用的用户</li>
<li><strong>tasks</strong> 可在字段下方缩进指定需要执行的任务,<strong>注意缩进</strong><ol>
<li><strong>- name</strong> 用来定义任务的名称或描述,<strong>注意短横线后空格接字符</strong></li>
<li><strong>yum</strong>: name&#x3D;httpd state&#x3D;latest 定义使用的模块功能：后面跟操作参数</li>
<li><strong>tags</strong>: 对任务进行标记，可通过命令调用标记执行或排除某些任务</li>
<li><strong>when</strong>: 判断，满足when后面的条件才执行任务</li>
<li><strong>notify</strong>: 触发handler的标志</li>
</ol>
</li>
<li><strong>handlers</strong>: 定义触发任务的内容<ol>
<li><strong>- name</strong>: 任务的名称,<strong>注意短横线后空格接字符</strong></li>
<li><strong>service</strong>: name&#x3D;httpd state&#x3D;restarted 定义使用的模块：后面跟操作参数</li>
</ol>
</li>
</ol>
<h3 id="Ansible-Playbook示例"><a href="#Ansible-Playbook示例" class="headerlink" title="Ansible Playbook示例"></a>Ansible Playbook示例</h3><p>先看一个已经写好的playbook，针对写好的来解释playbook如何书写。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>		<span class="token comment"># 默认的开头</span>
<span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all 		<span class="token comment"># 先定义控制的范围，all表示所有主机，分组可定义在/etc/ansible/hosts文件中；</span>
  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root	<span class="token comment"># 定义执行下面操作的用户，控制权限</span>
  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>		<span class="token comment"># tasks字段负责定义任务</span>
  <span class="token comment"># 如果是Redhat系，执行安装httpd</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install httpd CentOS
      <span class="token key atrule">yum</span><span class="token punctuation">:</span> 
        <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd
        <span class="token key atrule">state</span><span class="token punctuation">:</span> latest
      <span class="token key atrule">tags</span><span class="token punctuation">:</span> install_httpd
      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_os_family == "RedHat"
  <span class="token comment"># 如果是Debain系，执行安装apache</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install httpd Ubuntu
      <span class="token key atrule">apt</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> apache
        <span class="token key atrule">state</span><span class="token punctuation">:</span> latest
      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_os_family == "Ubuntu" 
      <span class="token key atrule">tags</span><span class="token punctuation">:</span> install_httpd
  <span class="token comment"># 执行网站主页的替换，如果变更触发handler字段定义的重启服务任务</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> set the homepage
      <span class="token key atrule">copy</span><span class="token punctuation">:</span> 
        <span class="token key atrule">src</span><span class="token punctuation">:</span> ./index.html
        <span class="token key atrule">dest</span><span class="token punctuation">:</span> /var/www/html/index.html
      <span class="token key atrule">notify</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> restart_the_service
  <span class="token comment"># 执行启动服务</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start httpd
      <span class="token key atrule">service</span><span class="token punctuation">:</span> 
        <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd
        <span class="token key atrule">service</span><span class="token punctuation">:</span> started
  <span class="token comment"># 执行清空防火墙</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> empty firewalld
      <span class="token key atrule">shell</span><span class="token punctuation">:</span> iptables <span class="token punctuation">-</span>F
  <span class="token comment"># 移除apache软件包</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remove httpd
      <span class="token key atrule">yum</span><span class="token punctuation">:</span> 
        <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd
        <span class="token key atrule">state</span><span class="token punctuation">:</span> absent
      <span class="token key atrule">tags</span><span class="token punctuation">:</span> remove_httpd
  <span class="token comment"># 删除预设的apache网站文件</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> clean stuff
      <span class="token key atrule">file</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> /var/www/html/
        <span class="token key atrule">state</span><span class="token punctuation">:</span> absent
      <span class="token key atrule">tags</span><span class="token punctuation">:</span> clean_stuff
  <span class="token comment">#  handler触发后需要执行的任务</span>
  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>
  <span class="token comment"># 重启httpd服务</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart_the_service
      <span class="token key atrule">service</span><span class="token punctuation">:</span> 
        <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd
        <span class="token key atrule">state</span><span class="token punctuation">:</span> restarted</code></pre>
<h3 id="Ansible-Playbook执行命令"><a href="#Ansible-Playbook执行命令" class="headerlink" title="Ansible Playbook执行命令"></a>Ansible Playbook执行命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash">使用格式：
  ansible-playbook <span class="token punctuation">[</span>options<span class="token punctuation">]</span> playbook.yml <span class="token punctuation">[</span>playbook2 <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
命令作用：
  Runs Ansible playbooks, executing the defined tasks on the targeted hosts.
  <span class="token comment"># 运行ansible的playbook，在目标主机上执行已经定义好的任务。</span>

命令示例：
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook --syntax-check install_httpd.yaml
<span class="token comment"># 对playbook进行语法检查</span>
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook <span class="token parameter variable">-C</span> install_httpd.yaml
<span class="token comment"># 对playbook进行运行测试，不改变结果，仅仅进行测试</span>
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook install_httpd.yaml
<span class="token comment"># 对playbook进行运行，并生成运行的结果</span>
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook <span class="token parameter variable">-t</span> <span class="token string">"install_httpd"</span> install-httpd.yaml
<span class="token comment"># 只运行具有“install_httpd”标签的任务</span>
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook --skip-tags <span class="token string">"install_httpd"</span> install-httpd.yaml
<span class="token comment"># 跳过install_httpd标签的任务</span>
<span class="token punctuation">[</span>root@Hayden ~<span class="token punctuation">]</span>$ ansible-playbook --skip-tags <span class="token string">"install_httpd clean_stuff"</span> install-httpd.yaml
<span class="token comment"># 跳过多个标签的任务示例</span></code></pre>

<h2 id="默认文件位置"><a href="#默认文件位置" class="headerlink" title="默认文件位置"></a>默认文件位置</h2><p>sudo pacman -Ql ansible | grep hosts 查看hosts文件的范例文件所在目录，其他文件操作类似.</p>
<p>如果有不明白的命令可通过ansible-doc命令直接查看内置的说明文件，针对模块的<br>ansible-doc -l 为列出所有可用模块</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux安装过程记录</title>
    <url>/2019/05/17/Linux/Linux_Archlinux-Installation/</url>
    <content><![CDATA[<p>自己尝试安装了archlinux在虚拟机里，记录安装过程，不过现在archlinux的WIKI是描述清晰的，直接查看和参考即可。  </p>
<h2 id="Pacman常用命令"><a href="#Pacman常用命令" class="headerlink" title="Pacman常用命令"></a>Pacman常用命令</h2><p>pacman命令的常用说明：  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee ~]# pacman -Sg gnome  查看gnome软件包组下面的所有软件包  
[root@LiarLee ~]# pacman -Qe openssh  查询已经安装的软件包  
[root@LiarLee ~]# pacman -Qs openssh  正则查询软件包
[root@LiarLee ~]# pacman -Rs $(pacman -Qtdq) 递归删除孤立软件包
[root@LiarLee ~]# pacman -Ss 关键字：在仓库中搜索含关键字的包
[root@LiarLee ~]# pacman -Qs 关键字： 搜索已安装的包
[root@LiarLee ~]# pacman -Qi 包名：查看有关包的详尽信息
[root@LiarLee ~]# pacman -Ql 包名：列出该包的文件
[root@LiarLee ~]# pacman -Syyu 下载已经更新本地的所有软件包</code></pre>

<h2 id="安装Archlinux"><a href="#安装Archlinux" class="headerlink" title="安装Archlinux"></a>安装Archlinux</h2><h3 id="1-获取Archlinux镜像"><a href="#1-获取Archlinux镜像" class="headerlink" title="1. 获取Archlinux镜像"></a>1. 获取Archlinux镜像</h3><p>从这个页面获取镜像： <a href="https://www.archlinux.org/download/">LINK HERE</a></p>
<h3 id="2-启动到Archlinux-Live环境"><a href="#2-启动到Archlinux-Live环境" class="headerlink" title="2. 启动到Archlinux Live环境"></a>2. 启动到Archlinux Live环境</h3><p>在VMware中使用镜像文件直接引导Archlinux Live环境。  </p>
<h3 id="3-设置Archlinux的键盘布局"><a href="#3-设置Archlinux的键盘布局" class="headerlink" title="3. 设置Archlinux的键盘布局"></a>3. 设置Archlinux的键盘布局</h3><p>默认为US键盘布局，此处未作修改。    </p>
<h3 id="4-连接到Internet"><a href="#4-连接到Internet" class="headerlink" title="4. 连接到Internet"></a>4. 连接到Internet</h3><p>使用ip link命令查看目前网卡的状态  </p>
<pre class="language-none"><code class="language-none">root@archiso ~ # ip link show
  1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
  2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; dmtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
    link&#x2F;ether 00:0c:29:5e:ea:d5 brd ff:ff:ff:ff:ff:ff
  
root@archiso ~ # ifconfig
  ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
      inet 192.168.229.129  netmask 255.255.255.0  broadcast 192.168.229.255
      inet6 fe80::9888:f57a:5c25:9cf9  prefixlen 64  scopeid 0x20&lt;link&gt;
      inet6 fd15:4ba5:5a2b:1008:6e02:ff6:feeb:c250  prefixlen 64  scopeid 0x0&lt;global&gt;
      ether 00:0c:29:5e:ea:d5  txqueuelen 1000  (Ethernet)
      RX packets 199  bytes 18652 (18.2 KiB)
      RX errors 0  dropped 0  overruns 0  frame 0
      TX packets 186  bytes 23144 (22.6 KiB)
      TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

  lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
      inet 127.0.0.1  netmask 255.0.0.0
      inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
      loop  txqueuelen 1000  (Local Loopback)
      RX packets 0  bytes 0 (0.0 B)
      RX errors 0  dropped 0  overruns 0  frame 0
      TX packets 0  bytes 0 (0.0 B)
      TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
    
root@archiso ~ # ping baidu.com   
  PING baidu.com (123.125.114.144) 56(84) bytes of data.
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;1 ttl&#x3D;128 time&#x3D;14.8 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;2 ttl&#x3D;128 time&#x3D;13.6 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;3 ttl&#x3D;128 time&#x3D;17.1 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;4 ttl&#x3D;128 time&#x3D;14.1 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;5 ttl&#x3D;128 time&#x3D;13.9 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;6 ttl&#x3D;128 time&#x3D;14.7 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;7 ttl&#x3D;128 time&#x3D;13.5 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;8 ttl&#x3D;128 time&#x3D;16.2 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;9 ttl&#x3D;128 time&#x3D;16.9 ms
  64 bytes from 123.125.114.144 (123.125.114.144): icmp_seq&#x3D;10 ttl&#x3D;128 time&#x3D;14.1 ms
  ^C
  --- baidu.com ping statistics ---
  10 packets transmitted, 10 received, 0% packet loss, time 26ms
  rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 13.543&#x2F;14.895&#x2F;17.105&#x2F;1.278 ms</code></pre>
<p>网络连接到此为止无需配置，可以正常访问网络。</p>
<h3 id="5-更新系统时间，硬件时间同步"><a href="#5-更新系统时间，硬件时间同步" class="headerlink" title="5. 更新系统时间，硬件时间同步"></a>5. 更新系统时间，硬件时间同步</h3><p>使用命令查看系统时间以及硬件时间，将同步的当前时间写入硬件：  </p>
<pre class="language-none"><code class="language-none">root@archiso ~ # timedatectl status
      Local time: Wed 2019-04-24 08:55:39 UTC
    Universal time: Wed 2019-04-24 08:55:39 UTC
        RTC time: Wed 2019-04-24 08:55:40
        Time zone: UTC (UTC, +0000)
System clock synchronized: yes
      NTP service: active
    RTC in local TZ: no

root@archiso ~ # timedatectl set-ntp true</code></pre>

<h3 id="6-建立系统的硬盘分区"><a href="#6-建立系统的硬盘分区" class="headerlink" title="6. 建立系统的硬盘分区"></a>6. 建立系统的硬盘分区</h3><p>建立硬盘分区，我建立了两个分区，一个根分区和一个交换分区。  </p>
<pre class="language-none"><code class="language-none">root@archiso ~ # fdisk -l 
  Disk &#x2F;dev&#x2F;sda: 50 GiB, 53687091200 bytes, 104857600 sectors
  Disk model: VMware Virtual S
  Units: sectors of 1 * 512 &#x3D; 512 bytes
  Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes
  I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes
  Disklabel type: dos
  Disk identifier: 0xba00941d

  Device     Boot   Start       End   Sectors  Size Id Type
  &#x2F;dev&#x2F;sda1          2048   1050623   1048576  512M 82 Linux swap &#x2F; Solaris
  &#x2F;dev&#x2F;sda2       1050624 104857599 103806976 49.5G 83 Linux


  Disk &#x2F;dev&#x2F;loop0: 491.2 MiB, 515084288 bytes, 1006024 sectors
  Units: sectors of 1 * 512 &#x3D; 512 bytes
  Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes
  I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</code></pre>
<h3 id="7-已经建立分区的格式化"><a href="#7-已经建立分区的格式化" class="headerlink" title="7. 已经建立分区的格式化"></a>7. 已经建立分区的格式化</h3><ol>
<li>格式化ext4分区<pre class="language-none"><code class="language-none">root@archiso ~ # mkfs.ext4 &#x2F;dev&#x2F;sda2</code></pre></li>
<li>格式化swap分区<pre class="language-none"><code class="language-none">root@archiso ~ # mkswap &#x2F;dev&#x2F;sda1  # 将&#x2F;dev&#x2F;sda1格式化为swap分区
root@archiso ~ # swapon &#x2F;dev&#x2F;sda1  # 将&#x2F;dev&#x2F;sda1启用为swap分区</code></pre></li>
</ol>
<h3 id="8-挂载分区"><a href="#8-挂载分区" class="headerlink" title="8. 挂载分区"></a>8. 挂载分区</h3><p>使用系统挂载点&#x2F;mnt，将&#x2F;dev&#x2F;sda2作为系统的根目录挂载到&#x2F;mnt上。 </p>
<pre class="language-none"><code class="language-none">root@archiso ~ # mount &#x2F;dev&#x2F;sda2 &#x2F;mnt</code></pre>
<h3 id="9-定义安装所需的Mirrorlist"><a href="#9-定义安装所需的Mirrorlist" class="headerlink" title="9. 定义安装所需的Mirrorlist"></a>9. 定义安装所需的Mirrorlist</h3><h3 id="10-安装基础的Archlinux系统组件"><a href="#10-安装基础的Archlinux系统组件" class="headerlink" title="10. 安装基础的Archlinux系统组件"></a>10. 安装基础的Archlinux系统组件</h3><p>部署安装linux的文件系统，安装系统基础组建的软件包。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# pacstrap &#x2F;mnt base</code></pre>
<h3 id="11-新系统的相关配置"><a href="#11-新系统的相关配置" class="headerlink" title="11. 新系统的相关配置"></a>11. 新系统的相关配置</h3><h4 id="1-Fstab"><a href="#1-Fstab" class="headerlink" title="1. Fstab"></a>1. Fstab</h4><p>根据自己建立的分区自动生成系统的分区表。<br>    <pre class="language-none"><code class="language-none">  [root@LiarLee &#x2F;]# genfstab -U &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstab		# 生成新的fstab，写入安装硬盘的&#x2F;etc&#x2F;fstab  
  [root@LiarLee ~]# cat &#x2F;etc&#x2F;fstab		#  查看新的分区表
# Static Information about the Filesystems.
# See fstab(5) for Details.

    # &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;
    # &#x2F;dev&#x2F;sda2
    UUID&#x3D;3b61b364-b9eb-4e31-b65a-55fdcf09c614	&#x2F;         	ext4      	rw,relatime	0 1
  
    # &#x2F;dev&#x2F;sda1
    UUID&#x3D;91987ac9-fa6b-4ac5-a9c5-014169dcf058	none      	swap      	defaults  	0 0</code></pre></p>
<h4 id="2-Chroot"><a href="#2-Chroot" class="headerlink" title="2. Chroot"></a>2. Chroot</h4><p>使用chroot命令切换根文件系统。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# arch-chroot &#x2F;mnt</code></pre>
<h4 id="3-Timezone"><a href="#3-Timezone" class="headerlink" title="3. Timezone"></a>3. Timezone</h4><p>chroot命令相当于直接将当前的shell切换到了新安装的系统中。<br>设置新的系统的时间及同步硬件时间。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime
[root@LiarLee &#x2F;]# hwclock --systohc</code></pre>
<h4 id="4-本地设置"><a href="#4-本地设置" class="headerlink" title="4. 本地设置"></a>4. 本地设置</h4><h4 id="5-网络设置"><a href="#5-网络设置" class="headerlink" title="5. 网络设置"></a>5. 网络设置</h4><p>配置hostname以及本地解析hosts文件的解析条目。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# vim &#x2F;etc&#x2F;hostname
  YOUR_HOSTNAME.YOUR_DOMAIN

[root@LiarLee &#x2F;]# vim &#x2F;etc&#x2F;hosts
  127.0.0.1	localhost
  ::1		localhost
  IP_ADDRESS 	YOUR_HOSTNAME.YOUR_DOMAIN YOUR_HOSTNAME</code></pre>

<h4 id="6-生成initramfs"><a href="#6-生成initramfs" class="headerlink" title="6. 生成initramfs"></a>6. 生成initramfs</h4><p>为新的系统生成ramfs。<br>ramfs的作用是，利用ramfs的文件系统，快速驱动周边的系统设备。在ramfs的使命结束后，自动chroot到新系统的文件系统中。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# mkinitcpio -p linux</code></pre>
<h4 id="7-设置root密码"><a href="#7-设置root密码" class="headerlink" title="7. 设置root密码"></a>7. 设置root密码</h4><p>修改root密码。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# passwd </code></pre>
<h4 id="8-安装grub2"><a href="#8-安装grub2" class="headerlink" title="8. 安装grub2"></a>8. 安装grub2</h4><p>这里pacman命令已经可以使用了，因此直接在这个安装grub2，这样才可以在后面正确的重启到新安装好的系统。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# pacman -S grub2 
[root@LiarLee &#x2F;]# grub-mkconfig </code></pre>
<h3 id="12-重启引导新系统"><a href="#12-重启引导新系统" class="headerlink" title="12. 重启引导新系统"></a>12. 重启引导新系统</h3><p>将已经安装完成的那个根分区卸载，之后就可以重启了。  </p>
<pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# umount -R &#x2F;mnt  # umount 接触挂载新的根文件系统  
[root@LiarLee &#x2F;]# fuser &#x2F;mnt		# fuser 查看占用文件系统的进程，如果确认的话可以直接-k结束所有占用的进程
[root@LiarLee &#x2F;]# reboot 		# 重启</code></pre>
<h3 id="13-安装图形化界面"><a href="#13-安装图形化界面" class="headerlink" title="13. 安装图形化界面"></a>13. 安装图形化界面</h3><h4 id="1-安装Xorg"><a href="#1-安装Xorg" class="headerlink" title="1. 安装Xorg"></a>1. 安装Xorg</h4><p>安装如下的所有组件，重启就可以进入图形化环境了。<br>    1. 运行错误 xterm:command not found<br>        <code>[root@LiarLee /]# pacman -S xterm zlib</code><br>    1. 运行报错 twm:command not found<br>        <code>[root@LiarLee /]# pacman -S xorg-twm xorg-xclock</code><br>    1. 安装鼠标驱动<br>        <code>[root@LiarLee /]# pacman -S xf86-input-mouse</code><br>    1. 安装VMware图形驱动<br>        <code>[root@LiarLee /]# pacman -S xf86-video-vmware</code><br>    1. 安装Xorg服务本体<br>        <code>[root@LiarLee /]# pacman -S xorg-server xorg-xinit </code><br>    1. 安装Gnome桌面环境<br>        <code>[root@LiarLee /]# pacman -S gnome</code><br>    1. 安装GDM - Gnome桌面管理工具，也可用其他替换<br>        [<code>root@LiarLee /]# pacman -S gdm</code></p>
<h4 id="2-安装图形化之后测试启动速度"><a href="#2-安装图形化之后测试启动速度" class="headerlink" title="2. 安装图形化之后测试启动速度"></a>2. 安装图形化之后测试启动速度</h4><p>systemd提供了命令检测启动的速度，包括内核启动速度以及用户空间的启动速度。</p>
<ol>
<li>systemd-analyze  </li>
<li>systemd-analyze blame</li>
</ol>
<pre class="language-none"><code class="language-none">[root@LiarLee ~]# systemd-analyze 
Startup finished in 1.892s (kernel) + 1.182s (userspace) &#x3D; 3.075s 
graphical.target reached after 1.182s in userspace</code></pre>
<h4 id="3-刷新国内的镜像源"><a href="#3-刷新国内的镜像源" class="headerlink" title="3. 刷新国内的镜像源"></a>3. 刷新国内的镜像源</h4><pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# cd &#x2F;etc&#x2F;pacman.d&#x2F;
[root@LiarLee pacman.d]#  mv mirrorlist mirrorlist.bak
[root@LiarLee pacman.d]#  wget -O &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist https:&#x2F;&#x2F;www.archlinux.org&#x2F;mirrorlist&#x2F;?country&#x3D;CN
[root@LiarLee pacman.d]#  mv mirrorlist mirrorlist.rank 
[root@LiarLee pacman.d]#  rankmirrors mirrorlist.rank &gt;&gt; mirrorlist
[root@LiarLee pacman.d]# sed &#39;s&#x2F;^Server&#x2F;#Server&#x2F;g&#39; .&#x2F;mirrorlist &gt;&gt; .&#x2F;mirrorlist
[root@LiarLee pacman.d]# s[root@LiarLee pacman.d]# spacman -Syyu</code></pre>
<h3 id="14-自行编译内核操作"><a href="#14-自行编译内核操作" class="headerlink" title="14. 自行编译内核操作"></a>14. 自行编译内核操作</h3><pre class="language-none"><code class="language-none">[root@LiarLee &#x2F;]# pacman -S base-devel bc xmlto kmod inetutils
[root@LiarLee &#x2F;]# useradd -d &#x2F;home&#x2F;admin -p admin admin  
[root@LiarLee &#x2F;]# chown -R admin:admin &#x2F;home&#x2F;admin
[root@LiarLee &#x2F;]# mkdir &#x2F;home&#x2F;admin&#x2F;mk-new-kernel&#x2F;
[root@LiarLee &#x2F;]# su - admin 
[root@LiarLee &#x2F;]# cd &#x2F;home&#x2F;admin&#x2F;mk-new-kernel&#x2F;
[root@LiarLee &#x2F;]# wget https:&#x2F;&#x2F;cdn.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F;v5.x&#x2F;linux-5.0.8.tar.xz
[root@LiarLee &#x2F;]# tar xvf linux-5.0.8.tar.xz 
[root@LiarLee &#x2F;]# cd linux-5.0.8&#x2F;
[root@LiarLee &#x2F;]# make clean &amp;&amp; make mrproper
[root@LiarLee &#x2F;]# make localmodconfig
[root@LiarLee &#x2F;]# make nconfig
[root@LiarLee &#x2F;]# make </code></pre>
<h3 id="15-部分问题"><a href="#15-部分问题" class="headerlink" title="15. 部分问题"></a>15. 部分问题</h3><ol>
<li><p>重启之后没有DHCP获取IP地址的解决方法：  </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@LiarLee /<span class="token punctuation">]</span><span class="token comment"># systemctl enable dhcpcd</span>
<span class="token punctuation">[</span>root@LiarLee /<span class="token punctuation">]</span><span class="token comment"># systemctl start dhcpcd </span>
<span class="token punctuation">[</span>root@LiarLee /<span class="token punctuation">]</span><span class="token comment"># pacman -S net-tools</span></code></pre>
</li>
<li><p>Wayland + Sway + Hypeland. （计划中， 等我闲的不行了…..</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux启动流程简述</title>
    <url>/2019/07/13/Linux/Linux_Boot-sequence/</url>
    <content><![CDATA[<p>记录Linux启动流程。</p>
<h1 id="Linux启动的简要流程"><a href="#Linux启动的简要流程" class="headerlink" title="Linux启动的简要流程"></a>Linux启动的简要流程</h1><h2 id="Linux-MBR启动流程"><a href="#Linux-MBR启动流程" class="headerlink" title="Linux-MBR启动流程"></a>Linux-MBR启动流程</h2><p>POST – GRUB(Bootloader-MBR) – Kernel – init</p>
<h2 id="详细描述及说明"><a href="#详细描述及说明" class="headerlink" title="详细描述及说明"></a>详细描述及说明</h2><ol>
<li>在触发开机通电之后，计算机读取BIOS中CMOS芯片的已经写好的程序进行主板设备的通电自检.</li>
<li>在自检完成后将读取硬盘上的前512个字节，通过前面的446个字节载入grub的bootloader及硬盘相关驱动.</li>
<li>同时引导grub进入stage1.5,stage1.5指向了定义在boot分区下的grub.cfg，及相关的grub图形文件.</li>
<li>grub的stage2进行了grub的菜单展示及内核选择的界面.</li>
<li>通过grub的引导，计算机挂载内核，识别的根文件系统.</li>
<li>启动init进程，通过SysV管理其他进程的启动及执行.</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RPM制作的笔记</title>
    <url>/2018/07/03/Linux/Linux_BuildRPMs/</url>
    <content><![CDATA[<p>关于制作RPM包的笔记～</p>
<h2 id="一-制作RPM包教程"><a href="#一-制作RPM包教程" class="headerlink" title="一. 制作RPM包教程"></a>一. 制作RPM包教程</h2><p>源码包的制作教程基于RHEL 5 &amp; 6,当我写这个的时候还没有7版本, 我会在后续更新新版本的路数（大半夜翻到这个破防了， 来自18年的flag ， 现在是时间是 2023 - 08 - 18 ， 过了。</p>
<h3 id="1-Rpm包的制作流程简述"><a href="#1-Rpm包的制作流程简述" class="headerlink" title="1. Rpm包的制作流程简述"></a>1. Rpm包的制作流程简述</h3><ol>
<li>放置源码进入SOURCES文件夹</li>
<li>写好SPEC文件</li>
<li>运行rpmbuild命令,自动执行安装和清理</li>
<li>自动将所有的源码解压到BUILD目录</li>
<li>自动安装所有的源码程序到BUILDROOT目录</li>
<li>自动根据SPEC文件里面的file程序段打包到rpm包中</li>
<li>自动进行后续的清理</li>
<li>生成完整的RPM包</li>
<li>手动进行安装测试</li>
</ol>
<h3 id="2-如何做准备"><a href="#2-如何做准备" class="headerlink" title="2. 如何做准备"></a>2. 如何做准备</h3><p>需要明确的几个问题：</p>
<ol>
<li>我们需要做一个什么样的RPM包，这个RPM包使用来做什么的，RPMs不一定包含的是二进制的内容，不一定需要编译。</li>
<li>至少我们需要源码，注意原材料的收集。</li>
<li>官方建议使用干净的源码，如果有补丁需要在制作的过程中打上补丁。</li>
<li>同一个软件，不同版本的RPM，新版本是否可以支持升级旧版本。需不需要清理旧版本的文件。升级是否会造成冲突。</li>
<li>依赖关系。</li>
<li>每一个PRM包都提供一种功能，Capability，可以被其他的PRM包依赖。RPM包的名字和所安装的文件都可以给其他的软件提供依赖。</li>
<li>自身名字的意义，提供的每一文件也可以被依赖，</li>
<li>他的安装和运行需要依赖于其他的RPM包本身或者所具有的文件，叫做依赖关系。  </li>
<li>两类依赖关系，编译依赖和安装依赖。</li>
<li>规划依赖关系，写SPEC文件。</li>
<li>制作RPMs。</li>
<li>简单测试RPMs。</li>
</ol>
<h3 id="3-RPMs的规划"><a href="#3-RPMs的规划" class="headerlink" title="3. RPMs的规划"></a>3. RPMs的规划</h3><ol>
<li>是否是应用程序，是否需要补丁，是否需要新的功能。</li>
<li>是一个程序的库文件</li>
<li>是一个系统配置文件集</li>
<li>是一个文档文件包</li>
<li>是否拆分完整的软件，例如：MySQL-5.5.22.tar.gz，在制作RPM包的时候被拆分为MySQL，mysql-server，mysql-devel，等等。</li>
<li>是一个二进制还是源码，当时都有。例如:src.rpm,里面包括了 source.tar.gz 和 spec,需要使用者安装完成之后编译再安装。</li>
</ol>
<h3 id="4-制作过程"><a href="#4-制作过程" class="headerlink" title="4. 制作过程"></a>4. 制作过程</h3><h4 id="1-设计目录结构-set-Up-the-Directory-structure"><a href="#1-设计目录结构-set-Up-the-Directory-structure" class="headerlink" title="1. 设计目录结构(set Up the Directory structure)"></a>1. 设计目录结构(set Up the Directory structure)</h4><p><strong>制作RPM过程中千万不能用root用户</strong><br>每个版本对于目录的要求不同，五个不同的目录：  </p>
<ol>
<li><strong>BUILD</strong>：不需要放任何的内容，这个目录是真正工作的目录。用于解压编译源码。  </li>
<li><strong>RPMS</strong>：制作完成的RPM包放在这个里面，里面的目录的名字和结构与特定平台架构有关，可以交叉平台编译。  </li>
<li><strong>SOURCES</strong>:所有收集的源码都在这个目录里面。  </li>
<li><strong>SPECS</strong>:放置SPEC文件，作为制作过程的指导说明。以软件包的名字命名，以.spec结尾。  </li>
<li><strong>SRPMS</strong>:放置了SRC(source)格式的RPM包。<br>红帽提供了默认的制作目录，在&#x2F;usr&#x2F;src&#x2F;redhat.</li>
</ol>
<pre><code><pre class="language-none"><code class="language-none">[LiarLee@localhost ~] tree &#x2F;usr&#x2F;src&#x2F;redhat</code></pre>
</code></pre>
<h4 id="2-放置文件到正确的指定的目录-Place-The-Sources-in-the-Right-dirctory-。"><a href="#2-放置文件到正确的指定的目录-Place-The-Sources-in-the-Right-dirctory-。" class="headerlink" title="2. 放置文件到正确的指定的目录(Place The Sources in the Right dirctory)。"></a>2. 放置文件到正确的指定的目录(Place The Sources in the Right dirctory)。</h4><p>  我们首先需要自己制定自己的制作源码目录，在不使用root用户的前提下进行制作,需要修改系统的宏，来制定新的工作目录。修改工作目录的过程如下：</p>
<ol>
<li>使用命令查看默认的宏： <pre class="language-none"><code class="language-none">[LiarLee@localhost ~] rpmbuild --showrc   \\ 显示所有的相关宏定义
_build——表示目录; __rm——表示命令</code></pre></li>
<li>使用命令查看默认的配置文件： <pre class="language-none"><code class="language-none">[LiarLee@localhost ~] rpmbuild --showrc | grep macrofiles    \\ 显示配置文件的全局路径和文件名  
\\ 权限由小到大，后一个文件的参数覆盖前面所有的定义  
\\ 所以我们在家目录下创建隐藏文件.rpmmacros可以直接配置自定义的设置。</code></pre></li>
<li>使用命令查看默认的工作目录定义： <pre class="language-none"><code class="language-none">[LiarLee@localhost ~] rpmbuild --showrc | grep _topdir   \\ 显示默认的工作目录宏定义  
\\ 以相同的模式在.rpmmacros中直接覆盖配置，可以更改工作目录  </code></pre></li>
<li>更改topdir的宏，使用rpmbuilder的用户，创建.rpmmacros,添加内容配置宏:   <pre class="language-none"><code class="language-none">[LiarLee@localhost ~] vim .rpmmacros         \\ Create .rpmmacros file  
    %_topdir    &#x2F;home&#x2F;rpmbuilder&#x2F;rpmbild&#x2F;  
[LiarLee@localhost ~] mkdir -pv rpmbuild&#x2F;&#123;BUILD,RPMS,SOURCES,SPEC,SRPMS&#125;  
[LiarLee@localhost ~] rpmbuild --showrc | grep _topdir      \\ Review the Result  </code></pre></li>
</ol>
<h4 id="3-创建一个spec文件-Create-A-Spec-File-that-Tells-the-Rpmbuild-Command-what-to-do-。"><a href="#3-创建一个spec文件-Create-A-Spec-File-that-Tells-the-Rpmbuild-Command-what-to-do-。" class="headerlink" title="3. 创建一个spec文件(Create A Spec File that Tells the Rpmbuild Command what to do)。"></a>3. 创建一个spec文件(Create A Spec File that Tells the Rpmbuild Command what to do)。</h4><ol>
<li>spec文件使用软件的名字版本作为文件名；.spec作为扩展名。  </li>
<li>rpm -qi mysql &amp; rpm -qpi mysql,命令查看rpm信息，信息从spec文件中定义，软件包信息说明段落定义。</li>
<li>spec文件有如下几个段落：<ol>
<li>The introduction section<br>设置软件包的基本信息<pre class="language-none"><code class="language-none">Summary:  \\ 简单描述
Name:     \\ 软件名字
Version:  \\ 版本号
Release:  \\ 发行号
License:  \\ 协议
Group:    \\ GROUP范围在这个文件中描述 &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rpm-*&#x2F;GROUPS
URL:      \\ 从何处获取的站点链接，下载路径
Packager:  \\ 制作者&lt;制作者邮箱&gt;
Vendor：   \\ 制作者的公司或者本人名字      
Source:      \\ 源文件地址，一个链接地址
BuildRoot:   \\ 制作RPM包的时候的虚拟Root目录
BuildRequires:   \\ 制作过程依赖于哪些软件包的名字</code></pre>
<ol start="2">
<li>The prep section<br>解压源码包到BUILD目录的段，cd到需要的目录，设置环境变量。<pre class="language-none"><code class="language-none">%prep
%setup</code></pre></li>
<li>The build section<br>这是源码包安装的make过程.<pre class="language-none"><code class="language-none">%build
.&#x2F;configure  OR   %configure
.&#x2F;make       OR   %&#123;__make&#125;
make % &#123;?_smp_mflags&#125;    \\ 多对称处理器加速编译</code></pre></li>
<li>The install section<br>这里是安装make install过程。系统中有install命令,install方式类似于COPY模式.<pre class="language-none"><code class="language-none">%install
%&#123;__rm&#125;
%&#123;__make&#125; install DESTDIR&#x3D;&quot;%&#123;buildroot&#125;&quot;
%find_lang %&#123;name&#125;</code></pre></li>
</ol>
</li>
</ol>
</li>
</ol>
<pre><code>5. The script section
     这里是定义执行需要的脚本，用来配置环境。例如:添加Apache用户.    
        %pre        Note:安装前执行
        %post       Note:安装后执行
        %preun      Note:卸载前执行
        %postun     Note:卸载后执行
 
6. The clean section
    清理之前所用到的BuildRoot目录的。
    <pre class="language-none"><code class="language-none">%clean
%&#123;__rm&#125;</code></pre>
7. The files section
    对安装的软件的程序进行规划,哪些文件安装到那个文件夹,**BUILDROOT下的所有文件必须在这个段中存在**
    <pre class="language-none"><code class="language-none">%files
%config(noreplace)  \\ 不替换旧的配置</code></pre>
 
 8. The changelog section  
     记录版本迭代  
 
    <pre class="language-none"><code class="language-none">* Wed Apr 11 2012 Liarlee.site &lt;Liarlee@site.com&gt; - ReleaseNumber 更改时间

- Comments
- Comments</code></pre>
 
</code></pre>
<h4 id="4-开始编译-Build-The-Source-and-Binary-RPMs"><a href="#4-开始编译-Build-The-Source-and-Binary-RPMs" class="headerlink" title="4. 开始编译(Build The Source and Binary RPMs)"></a>4. 开始编译(Build The Source and Binary RPMs)</h4><ol>
<li>rpmbuild命令说明:    <pre class="language-none"><code class="language-none">rpmbuild -bp        \\ 执行到prep section
rpmbuild -bc        \\ 执行到build section
rpmbuild -bi        \\ 执行到install section

rpmbuild -bs        \\ 制作源码格式的制作
rpmbuild -bb        \\ 制作二进制格式的rpm包
rpmbuild -ba        \\ 执行全部格式,BOTH二进制和源码

rpmbuild -bl        \\ BUILDROOT存在但是没有在FILES段中为包含进去的文件的CHECK命令</code></pre></li>
<li>关于安装错误的说明:<br>在执行过程中如果有报错我们只需要去按照提示修正错误即可,在执行结束之后会在RPMS目录下生成需要的<em>RPM包</em>和<em>RPM-DEBUG包</em>.我们只需要RPM包即可,使用rpm -ivh进行安装测试.<pre class="language-none"><code class="language-none">[LiarLee@localhost ~] rpmbuild -ba SoftwareName.spec   \\开始制作的命令</code></pre></li>
</ol>
<h4 id="rpm2cpio命令的说明"><a href="#rpm2cpio命令的说明" class="headerlink" title="rpm2cpio命令的说明"></a>rpm2cpio命令的说明</h4><p>  src-rpm包只是将源码打包成RPM格式,当我们安装src.rpm格式的安装包的时候会把包含的文件,解压到用户默认的工作目录下,所以这种格式的RPM包我们不用安装,直接制作RPM包即可.进行rebuild OR recompile.<br>  <pre class="language-none"><code class="language-none">[LiarLee@localhost ~] rpm2cpio mysql.src.rpm &gt; mysql.cpio  
[LiarLee@localhost ~] rpm2cpio mysql.src.rpm | cpio -t  </code></pre><br>  <strong>两个网站的推荐(搜索SRC-RPM包的站点):</strong><br>    rpmfind.net<br>    rpm.pbone.net  </p>
<h2 id="二-从头开始写新的SPEC-Files"><a href="#二-从头开始写新的SPEC-Files" class="headerlink" title="二. 从头开始写新的SPEC Files"></a>二. 从头开始写新的SPEC Files</h2><p>制作RPM包的核心是写SPEC files，难以掌握的地方<br>介绍SPEC文件的基本语法和简单用法</p>
<h3 id="1-Spec-Files-Overview"><a href="#1-Spec-Files-Overview" class="headerlink" title="1. Spec Files Overview"></a>1. Spec Files Overview</h3><p>SPEC file里面都是指令，告诉RPMBuild命令如何一步一步解压，编译，做成不同的RPM包，依赖关系。  Macro是指的变量<br>大多数的字段由tag+value组成,tag是标签–Directives,不区分大小写;value是区分大小写的.    </p>
<h4 id="1-1-宏的自定义"><a href="#1-1-宏的自定义" class="headerlink" title="1.1 宏的自定义"></a>1.1 宏的自定义</h4><p><strong>用户自定义宏</strong> : %define macro_name value<br><strong>引用方式</strong> : %{macro_name} OR %macro_name  </p>
<h4 id="1-2-注释的方式"><a href="#1-2-注释的方式" class="headerlink" title="1.2 注释的方式"></a>1.2 注释的方式</h4><p>使用#来进行注释<br>%–不能在注释中使用,如果必须使用需要双写%%  </p>
<pre class="language-none"><code class="language-none">%prep  
\#this is a comment for %%prep  </code></pre>

<h3 id="2-Defining-Package-Infomation"><a href="#2-Defining-Package-Infomation" class="headerlink" title="2. Defining Package Infomation"></a>2. Defining Package Infomation</h3><p>如何定义SPEC文件内的字段  </p>
<h4 id="2-1-软件包的信息"><a href="#2-1-软件包的信息" class="headerlink" title="2.1 软件包的信息"></a>2.1 软件包的信息</h4><ul>
<li>Name - 软件包名称 - 不能有短横线  </li>
<li>Version - 版本号 - 不能有短横线  </li>
<li>Release - 发行版本号  </li>
<li>Group - &#x2F;usr&#x2F;src&#x2F;doc&#x2F;rpm-version&#x2F;GROUPS文件中有详细的描述说明有哪些组可以使用</li>
</ul>
<h4 id="2-2-制作方信息"><a href="#2-2-制作方信息" class="headerlink" title="2.2 制作方信息"></a>2.2 制作方信息</h4><ul>
<li>Vendor - 公司或者组织制作的RPM  </li>
<li>URL - 一个主页链接  </li>
<li>Packager - 名字&lt;邮箱地址&gt;  </li>
<li>License - 许可,GPLv2,….etc.</li>
</ul>
<h4 id="2-3-描述信息"><a href="#2-3-描述信息" class="headerlink" title="2.3 描述信息"></a>2.3 描述信息</h4><ul>
<li>Summary - 不能超过50个字符,短描述  </li>
<li>%description section - 全面描述,如果字符过多可以提前换行.</li>
</ul>
<h4 id="2-4-定义依赖关系"><a href="#2-4-定义依赖关系" class="headerlink" title="2.4 定义依赖关系"></a>2.4 定义依赖关系</h4><ul>
<li>Requires : Capability - 定义软件包的能力,如果未定义显示包名.  </li>
<li>Provides : Capability - 定义对外提供的能力  </li>
<li>BuildRequires : Capability - 可以出现多次,直接写出需要的软件包名</li>
</ul>
<h4 id="2-5-设定Build目录"><a href="#2-5-设定Build目录" class="headerlink" title="2.5 设定Build目录"></a>2.5 设定Build目录</h4><ul>
<li>build - 用于解压安装源码  </li>
<li>buildroot : ${_tmppath}&#x2F;%{name}-%{version}-root<br>使用$RPM_BUILD_ROOT 或者 %{buildroot}</li>
</ul>
<h4 id="2-6-命名Source文件"><a href="#2-6-命名Source文件" class="headerlink" title="2.6 命名Source文件"></a>2.6 命名Source文件</h4><p>使用Sources字段 和 patch字段,指定源文件和补丁  </p>
<ul>
<li>Source0: https:&#x2F;&#x2F; OR 相对路径, https不会下载, 自动本地寻址  </li>
<li>Source1: sourcefiles_name  </li>
<li>Source2: sourcefiles_name  </li>
<li>Patch1: patchfiles_name  </li>
<li>Patch2: patchfiles_name  </li>
<li>Patch3: patchfiles_name<br>补丁定义后可以直接使用patch命令进行补丁的安装,所以使用patch字段</li>
</ul>
<h3 id="3-Controlling-the-Build"><a href="#3-Controlling-the-Build" class="headerlink" title="3. Controlling the Build"></a>3. Controlling the Build</h3><p>如何控制编译</p>
<pre class="language-none"><code class="language-none">%prep                 \\ 把Source内的解压源码包到BUILD目录,cd到源码目录,配置环境  

%setup -q             \\ 控制解压的流程  
%setup -n name        \\ 目录名字  
%setup -q             \\ 静默模式  
%setup -a number      \\ AFTER,cd到目录之后解压缩     
%setup -b number      \\ BEFORE,先解压之后cd到目录里  
%setup -c             \\ 解压前创建目录  
%setup -T             \\ 不展开 直接复制  

%patch1               \\ 打补丁    
%patch2               \\ 打第二个补丁        

%build                \\ C类程序的configure &amp; make过程   
.&#x2F;configure --prefix&#x3D;&#x2F;usr \  
  --sysconfdir&#x3D;&#x2F;etc&#x2F;nginx  
make %&#123;?_smp_mflags&#125;    

%build                \\Perl的不同
perl Mailfile PL  
make  

%install                            \\ make install 过程  
rm -rf %&#123;buildroot&#125;                 \\ Clean Stuff  
make install DESTDIR&#x3D;%&#123;buildroot&#125;             \\ make install 命令编译安装  
%&#123;__install&#125; -p -D -m 0644 %&#123;SOURCE5&#125; \     
  %&#123;buildroot&#125;%&#123;_sysconfdir&#125;&#x2F;sysconfig&#x2F;%&#123;name&#125;            \\ install命令直接安装文件到目录  
%&#123;__install&#125; -p -d -m 0755 %&#123;buildroot&#125;&#x2F;var&#x2F;log&#x2F;nginx     \\ install命令直接安装文件到指定的文件路径  

%clean              \\ 清理BUILD目录,清空为下次做准备; rpmbuild --clean mysql.spec  
rm -rf %&#123;buildroot&#125;     \\清理BUILD目录  

%prep  
%post  
%prepun  
%postun  
使用IF可以对如下参数进行判断  
$1            \\ 第一次安装  
$2 OR $2+     \\ 升级  
$0            \\ 卸载  </code></pre>
<h3 id="4-Filling-the-List-of-Files"><a href="#4-Filling-the-List-of-Files" class="headerlink" title="4. Filling the List of Files"></a>4. Filling the List of Files</h3><p>填充文件列表</p>
<h3 id="5-Adding-Change-Log-Entries"><a href="#5-Adding-Change-Log-Entries" class="headerlink" title="5. Adding Change Log Entries"></a>5. Adding Change Log Entries</h3><p>添加更新日志</p>
<h2 id="三-CentOS7打包Nginx过程记录"><a href="#三-CentOS7打包Nginx过程记录" class="headerlink" title="三. CentOS7打包Nginx过程记录"></a>三. CentOS7打包Nginx过程记录</h2><ol>
<li>useradd rpmbuilder -p rpmbuilder</li>
<li>yum install -y rpmdevtools rpmbuild</li>
<li>cd &#x2F;home&#x2F;rpmbuilder&#x2F;</li>
<li>rpmdev-setuptree</li>
<li>cd .&#x2F;rpmbuilder</li>
<li>tree .&#x2F;</li>
<li>mv nginx-1.16.1.tar.gz .&#x2F;rpmbuild&#x2F;SOURCES&#x2F;</li>
<li>vim .&#x2F;rpmbuilder&#x2F;SPECS&#x2F;nginx.spec</li>
<li>vim nginx.service</li>
<li>mv nginx.service &#x2F;rpmbuild&#x2F;SOURCES&#x2F;nginx.service  <pre class="language-none"><code class="language-none">%define nginx_user nginx
%define nginx_group nginx

Name:		nginx	
Version:	1.16.1
Release:	1%&#123;?dist&#125;
Summary:	make rpm for nginx, version 1.16.1

Group:		System Environment&#x2F;Daemons
License:	GPLv2	
URL:		http:&#x2F;&#x2F;liarlee.site
Source0:	%&#123;name&#125;-%&#123;version&#125;.tar.gz
Source1:	nginx.service	
BuildRoot: 	$_topdir&#x2F;BUILDROOT

BuildRequires:	gcc
BuildRequires:	gcc-c++
BuildRequires:	openssl
BuildRequires:  openssl-devel
BuildRequires:	pcre
BuildRequires:	pcre-devel
BuildRequires:	systemd
Requires:	openssl
Requires:	openssl-devel
Requires:	pcre
Requires:	pcre-devel
Requires:	systemd

%description
For online Ean portal, make by Hayden Lee, and take some personal option.

%prep
%setup -q


%build
.&#x2F;configure \
  --prefix&#x3D;&#x2F;data&#x2F;web-server&#x2F;nginx \
  --user&#x3D;%&#123;nginx_user&#125; \
  --group&#x3D;%&#123;nginx_group&#125; \
  --with-threads \
  --with-http_ssl_module \
  --with-http_stub_status_module \
  --with-http_realip_module \
  --with-http_gzip_static_module
make %&#123;?_smp_mflags&#125;


%install
%&#123;__rm&#125; -rf %&#123;buildroot&#125;
make install DESTDIR&#x3D;%&#123;buildroot&#125;
# install systemd-specific files
%&#123;__mkdir&#125; -p $RPM_BUILD_ROOT%&#123;_unitdir&#125;
%&#123;__install&#125; -m644 %SOURCE1 \
    $RPM_BUILD_ROOT%&#123;_unitdir&#125;&#x2F;nginx.service

%files
%defattr(-,root,root)
&#x2F;data&#x2F;web-server&#x2F;nginx&#x2F;
%config(noreplace) &#x2F;data&#x2F;web-server&#x2F;nginx&#x2F;conf&#x2F;nginx.conf
%config(noreplace) &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service
%attr(0644,root,root) &#x2F;data&#x2F;web-server&#x2F;nginx&#x2F;conf&#x2F;nginx.conf
%pre
    getent group %&#123;nginx_group&#125; &gt;&#x2F;dev&#x2F;null || groupadd -r %&#123;nginx_group&#125;
    getent passwd %&#123;nginx_user&#125; &gt;&#x2F;dev&#x2F;null || \
        useradd -r -g %&#123;nginx_group&#125; -s &#x2F;sbin&#x2F;nologin \
        -d %&#123;nginx_home&#125; -c &quot;nginx user&quot;  %&#123;nginx_user&#125;
    exit 0
%post
    &#x2F;usr&#x2F;bin&#x2F;systemctl preset nginx.service &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 ||:
    &#x2F;usr&#x2F;bin&#x2F;systemctl preset nginx-debug.service &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 ||:
    # print site info
    cat &lt;&lt;BANNER
    ----------------------------------------------------------------------

    Thanks for using nginx!

    Please find the official documentation for nginx here:
    * http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;
    
    Commercial subscriptions for nginx are available on:
    * http:&#x2F;&#x2F;nginx.com&#x2F;products&#x2F;
    
    ----------------------------------------------------------------------
    BANNER
%preun
    &#x2F;usr&#x2F;bin&#x2F;systemctl --no-reload disable nginx.service &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 ||:
    &#x2F;usr&#x2F;bin&#x2F;systemctl stop nginx.service &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 ||:

%postun
    &#x2F;usr&#x2F;bin&#x2F;systemctl daemon-reload &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 ||:
    %&#123;__rm&#125; -rf &#x2F;data&#x2F;web-server&#x2F;nginx
</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, RPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Cacti的安装教程</title>
    <url>/2018/04/01/Linux/Linux_Cacti-installation/</url>
    <content><![CDATA[<p>当时记录Cacti的安装记录。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>OS : CentOS 7 Server Everything – Minimal Version<br>Required Packages : LAMP, RRDTool</p>
<h2 id="部署基础组件"><a href="#部署基础组件" class="headerlink" title="部署基础组件"></a>部署基础组件</h2><ol>
<li><p>安装Apache<br>命令如下：</p>
<pre class="language-none"><code class="language-none">yum install -y httpd httpd-devel  
dnf install -y httpd httpd-devel  </code></pre>
<p>安装完毕。  </p>
</li>
<li><p>安装MySQL<br>命令如下：</p>
<pre class="language-none"><code class="language-none">yum install -y mysql mysql-server   
dnf install -y mysql mysql-server  </code></pre>
<p>OR</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">yum install -y Mariadb-server  
dnf install -y Mariadb-server</code></pre>
<p>安装完毕。  </p>
<ol start="3">
<li><p>安装PHP<br>命令如下：  </p>
<pre class="language-none"><code class="language-none">yum install -y php-mysql php-pear php-common php-gd php-devel php php-mbstring php-cli  
dnf install -y php-mysql php-pear php-common php-gd php-devel php php-mbstring php-cli  </code></pre>
<p>安装完毕。  </p>
</li>
<li><p>安装PHP-SNMP<br>命令如下：</p>
<pre class="language-none"><code class="language-none">yum install -y php-snmp  
dnf install -y php-snmp  </code></pre>
<p>安装完毕。  </p>
</li>
<li><p>安装NET-SNMP<br>命令如下：</p>
<pre class="language-none"><code class="language-none">yum install -y net-snmp-utils net-snmp-libs net-snmp   
dnf install -y net-snmp-utils net-snmp-libs net-snmp  </code></pre>
<p>如果需要安装Spine，需要安装net-snmp-devel  </p>
<pre class="language-none"><code class="language-none">yum install -y net-snmp-devel
dnf install -y net-snmp-devel</code></pre>
<p>安装完毕。</p>
</li>
<li><p>安装RRDTool<br>命令如下：</p>
<pre class="language-none"><code class="language-none">yum install -y rrdtool  
dnf install -y rrdtool  </code></pre>
<p>安装完毕。  </p>
</li>
<li><p>开始所有的服务：<br>命令如下：</p>
<pre class="language-none"><code class="language-none">service httpd start  
service mysqld start OR service mariadb start
service snmpd start</code></pre>
<p>OR</p>
<pre class="language-none"><code class="language-none">systemctl start httpd.service
systemctl start mariadb.service
systemctl start snmpd.service</code></pre>
<p>安装完毕。  </p>
</li>
<li><p>调整服务开机启动：</p>
<pre class="language-none"><code class="language-none">chkconfig httpd on  
chkconfig mysqld on
chkconfig snmpd on</code></pre>
<p>OR</p>
<pre class="language-none"><code class="language-none">systemctl enable httpd.service
systemctl enable mariadb.service
systemctl enable snmpd.service</code></pre>
<p>安装完毕。</p>
</li>
<li><p>开启EPEL REPO &amp; 安装Cacti</p>
<pre class="language-none"><code class="language-none">wget http:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm  
rpm -ivh epel-release-latest-7.noarch.rpm
yum makecache</code></pre>
<p>安装完毕。<br><strong>所有的安装内容已经部署完毕。</strong></p>
</li>
</ol>
<h2 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h2><ol>
<li><p>配置MySQL的root密码  </p>
<pre class="language-none"><code class="language-none">mysqladmin -u root password YOURSELF_PASSWORD</code></pre>
</li>
<li><p>创建Cacti的数据库  </p>
<pre class="language-none"><code class="language-none">mysql -u root -p
mysql&gt; create database cacti;
mysql&gt; GRANT ALL ON cacti.* TO cacti@localhost IDENTITFIED BY &#39;YOURSELF_PASSWORD&#39;;
mysql&gt; FLUSH PRIVILEGES;
mysql&gt; quit;</code></pre>
<p>安装完毕。</p>
</li>
<li><p>MySQL-数据库初始化  </p>
<pre class="language-none"><code class="language-none">rpm -ql cacti | grep cacti.sql
mysql -u cacti -p cacti &lt; &#x2F;usr&#x2F;share&#x2F;doc&#x2F;cacti&#x2F;cacti.sql</code></pre>
<p>命令发起后需要进行密码的输入</p>
</li>
<li><p>Cacti-读取数据库配置</p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;cacti&#x2F;db.php</code></pre>
<p>需要编辑的内容如下：</p>
<pre class="language-none"><code class="language-none">$database_type &#x3D; &quot;mysql&quot;;
$database_default &#x3D; &quot;cacti&quot;;
$database_hostname &#x3D; &quot;localhost&quot;;
$database_username &#x3D; &quot;cacti&quot;;
$database_password &#x3D; &quot;YOURSELF_PASSWORD&quot;;
$database_port &#x3D; &quot;3306&quot;;
$database_ssl &#x3D; false;</code></pre>
</li>
<li><p>Firewall-配置放行防火墙</p>
<pre class="language-none"><code class="language-none">iptables -A INPUT -p udp -m state --state NEW --dport 80 -j ACCEPT
iptables -A INPUT -p tcp -m state --state NEW --dport 80 -j ACCEPT
iptables save</code></pre>
<p>OR  </p>
<pre class="language-none"><code class="language-none">firewall-cmd --permanent --zone&#x3D;public --add-service&#x3D;http
firewall-cmd --reload</code></pre>
</li>
<li><p>Apache- 配置Cacti根目录</p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;cacti.conf</code></pre>
<p>配置文件内的内容修改如下：  </p>
<pre class="language-none"><code class="language-none">&lt;Directory &#x2F;usr&#x2F;share&#x2F;cacti&#x2F;&gt;
Order Deny,Allow
Deny from all
Allow from all
&lt;&#x2F;Directory&gt;</code></pre>
<p>重启服务：</p>
<pre class="language-none"><code class="language-none">service httpd restart</code></pre>
<p>OR</p>
<pre class="language-none"><code class="language-none">systemctl restart httpd.service</code></pre>
</li>
<li><p>Crond-配置Poller的计划任务  </p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;cron.d&#x2F;cacti
*&#x2F;5 * * * *    cacti   &#x2F;usr&#x2F;bin&#x2F;php &#x2F;usr&#x2F;share&#x2F;cacti&#x2F;poller.php &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1      \\ 去掉注释</code></pre>
</li>
<li><p>启动Broswer，进入Cacti安装界面，<a href="http://ipaddress/Cacti">http://IPADDRESS/Cacti</a>, 之后按照说明继续即可。</p>
</li>
</ol>
<p>Default Username : <strong>admin</strong><br>Default Password : <strong>admin</strong></p>
<h2 id="补充安装SPINE过程"><a href="#补充安装SPINE过程" class="headerlink" title="补充安装SPINE过程"></a>补充安装SPINE过程</h2><ol>
<li>下载源文件，安装程序。   </li>
<li>安装CentOS,Development Tool，yum group install。   </li>
<li>在Spine的目录下，执行.&#x2F;configure &amp;&amp; make &amp;&amp; make install。<br><strong>NOTE：</strong> 这里出现了的问题，提示找不到net-snmp header file—&gt;没有安装net-snmp-devel</li>
<li>进入控制台进行Spine是否安装成功。</li>
</ol>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Application, Cacti</tag>
      </tags>
  </entry>
  <entry>
    <title>由 CPU Steal Time 指标解释</title>
    <url>/2022/04/19/Linux/Linux_CalcStealtime/</url>
    <content><![CDATA[<p>观察vmstat命令输出的内容， 或者 top 命令 最上面输出的内容。可以看到Stealtime增加，大部分时候都是因为虚拟机的超卖， 总结来说st指示了vCPU的繁忙程度。</p>
<h2 id="进程相关参数的说明"><a href="#进程相关参数的说明" class="headerlink" title="进程相关参数的说明"></a>进程相关参数的说明</h2><p><a href="https://www.kernel.org/doc/html/latest/scheduler/sched-stats.html">https://www.kernel.org/doc/html/latest/scheduler/sched-stats.html</a></p>
<blockquote>
<p>schedstats also adds a new &#x2F;proc&#x2F;<pid>&#x2F;schedstat file to include some of the same information on a per-process level. There are three fields in this file correlating for that process to:<br>1 time spent on the cpu<br>2 time spent waiting on a runqueue<br>3 # of timeslices run on this cpu  </p>
</blockquote>
<h2 id="执行命令的输出结果"><a href="#执行命令的输出结果" class="headerlink" title="执行命令的输出结果"></a>执行命令的输出结果</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hayden@VM-16-6-ubuntu /p/372047<span class="token operator"><span class="token file-descriptor important">5</span>></span> <span class="token function">cat</span> schedstat
<span class="token number">2236062</span> <span class="token number">223986</span> <span class="token number">22</span></code></pre>

<p>命令中的三个数值说明:  </p>
<ul>
<li>2236062 进程在CPU的时间</li>
<li>223986 进程在CPU调度上面等待的时间</li>
<li>22 在这个CPU运行的时间片数量<br>NOTE: 有一个博客写这个是 上下文交换的次数 ， 和sched 文件中的 nr_switches 数量相同， 不能确定是否正确。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, CPU, EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>less命令占用内存过高</title>
    <url>/2020/04/06/Linux/Linux_Cat-and-less/</url>
    <content><![CDATA[<p>在华为的月度报告中， 发现了奇怪的问题，有一台机器在每天都会内存使用率飙到100%，偶尔的几次还会出现OOM的记录。在追踪问题的过程中，发现机器上每天的2，4，6，8点会自动运行处理日志的脚本，并统计关键字的数量。</p>
<p>这个脚本的过滤日志思路是， 使用 less 命令打开昨天的所有日志文件，并且读取内容，过滤其中的关键字，命令类似如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> yesterday*.log.gz <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">"xxxxx"</span> <span class="token parameter variable">-e</span> <span class="token string">"xxxxx"</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span></code></pre>
<h2 id="关于Less-More-Cat-Zcat"><a href="#关于Less-More-Cat-Zcat" class="headerlink" title="关于Less, More, Cat, Zcat"></a>关于Less, More, Cat, Zcat</h2><p>这个四个命令可以分成两组:</p>
<ul>
<li>less &#x2F; more 的命令是为了个人类查看文件的内容设计的程序；</li>
<li>cat &#x2F; zcat 是一次性输出内容到屏幕的；</li>
</ul>
<p>两组命令的唯一区别是是否提供前后反复查看的功能。但是就是这个功能，导致了命令执行的逻辑其实是完全不同的。</p>
<p>less命令的执行方式将查看到的数据放入内存中（USED），所以 如果是一个10G的日志，就会占用10G的内存， 如果不够，系统就会进行交换和将旧数据换出的操作。<br>cat的执行模式是将数据直接输出到&#x2F;dev&#x2F;stdout，同时操作系统会将数据存储到Cache中，不会触发内存的告警， 由于日志中的数据其实只是进行一次过滤， 所以不需要长期的保留， 这也提高了bash处理日志文本的速度。 </p>
<p>补充一下， Vim也是一样的， Vim会尽可能的将文件载入到内存里， 所以<strong>日志类的文件</strong>是不需要， 也<strong>不能使用Vim的</strong>.</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>由于两个命令的处理方式不同,因此直接将命令中输出gz日志的命令换成了zcat，即可保证内存的使用不会变多, 这里同时提高的处理文本命令的效率，这个机器专门用来做这一件事情， 所以不需要考虑其他进程会影响日志处理， 造成数据的不一致。<br>所以在脚本中一定一定使用正确的命令和方式处理数据，才能保障性能和效率的兼顾。</p>
<p>最后，优化过的命令为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">zcat yesterday*.log.gz <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">"xxxx"</span> <span class="token parameter variable">-e</span> <span class="token string">"xxxx"</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span></code></pre>
<p>最后的执行时间，从原来的半个小时起步，变成了10分钟即完成。</p>
<h2 id="后续的处理"><a href="#后续的处理" class="headerlink" title="后续的处理"></a>后续的处理</h2><p>已知我们的问题是不需要系统自动cache住我们过滤的日志数据，我们可以手动释放一下已经无用的cache内容： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">3</span> <span class="token operator">></span> /proc/sys/vm/drop_caches</code></pre>
<p>后面还添加了并行执行的处理命令， 但是这个并行执行的脚本确实写的非常的垃圾。 另外添加了使用python 自动填写过滤的结果到 Excel 表格。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机制作模板的步骤及设置</title>
    <url>/2019/09/18/Linux/Linux_CentOS7-VM-Template/</url>
    <content><![CDATA[<p>换了工作之后接管了这边旧的ESXi和上面的虚拟机，之前的模板不是特别的合适，自己开始动手做模板。最终期望的目标是：</p>
<ol>
<li>修改IP地址</li>
<li>yum install 收工</li>
</ol>
<h2 id="CentOS虚拟机模板制作流程"><a href="#CentOS虚拟机模板制作流程" class="headerlink" title="CentOS虚拟机模板制作流程"></a>CentOS虚拟机模板制作流程</h2><h3 id="系统的硬件配置"><a href="#系统的硬件配置" class="headerlink" title="系统的硬件配置"></a>系统的硬件配置</h3><p>系统的硬件规格</p>
<ul>
<li>4cpu </li>
<li>8G-RAM</li>
</ul>
<h3 id="OS的版本"><a href="#OS的版本" class="headerlink" title="OS的版本"></a>OS的版本</h3><p>系统的版本</p>
<ul>
<li>CentOS 7.6 1810 x64</li>
</ul>
<h3 id="安装VMwareTools"><a href="#安装VMwareTools" class="headerlink" title="安装VMwareTools"></a>安装VMwareTools</h3><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel <span class="token function">vim</span> <span class="token function">wget</span> <span class="token function">curl</span> net-tools open-vm-tools <span class="token function">htop</span> iotop iftop tree atop sysstat</code></pre>
<h3 id="安装Zabbix-agent"><a href="#安装Zabbix-agent" class="headerlink" title="安装Zabbix-agent"></a>安装Zabbix-agent</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> zabbix-agent-<span class="token variable">$version</span>.rpm </code></pre>
<h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@SELINUX=enforcing@SELINUX=disabled@g'</span> /etc/selinux/config</code></pre>
<h3 id="更改hostname"><a href="#更改hostname" class="headerlink" title="更改hostname"></a>更改hostname</h3><p>hostname有一些有趣的问题，CentOS6.8 中的hostname可以定义在<code>/etc/sysconfig/network</code>文件中，系统启动的时候先读取<code>/etc/sysconfig/network</code>文件中的定义，如果没有的话读取<code>/etc/hosts</code>文件中的定义.和我自己的之前的记忆不一样。<br>我之前一直都是之间编辑<code>/etc/hostname</code>，直接将主机名echo到这个文件中就可以了，不过想来这些区别都不大，先这样吧。</p>
<h3 id="清除硬件及网卡的信息"><a href="#清除硬件及网卡的信息" class="headerlink" title="清除硬件及网卡的信息"></a>清除硬件及网卡的信息</h3><p>将网卡配置文件中的UUID和 HWADDR直接删除或者是注释掉，IPADDR留空。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/etc/sysconfig/network-scripts/ifcfg-eth0</code></pre>
<h3 id="删除udev"><a href="#删除udev" class="headerlink" title="删除udev"></a>删除udev</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/udev/rules.d/70-*
``<span class="token variable"><span class="token variable">`</span>  
NOTE：命令的效果貌似和 sys-unconfig 的效果是一样的。
<span class="token comment">### 关闭防火墙</span>
<span class="token variable">`</span></span>``bash
systemctl disable firewalld
iptables <span class="token parameter variable">-F</span>
iptables <span class="token parameter variable">-X</span>
iptables <span class="token parameter variable">-Z</span></code></pre>
<h3 id="更改Grub的等待时间"><a href="#更改Grub的等待时间" class="headerlink" title="更改Grub的等待时间"></a>更改Grub的等待时间</h3><p>虚拟机中的模板大部分是不需要等待grub给出的操作选单时间的，等待操作的时间是5秒，我们给出1秒就够了。</p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;default&#x2F;grub
GRUB_TIMEOUT&#x3D;1</code></pre>
<h3 id="清理工作"><a href="#清理工作" class="headerlink" title="清理工作"></a>清理工作</h3><pre class="language-none"><code class="language-none">rm -rf &#x2F;etc&#x2F;ssh&#x2F;*key*.
rm -rf &#x2F;root&#x2F;.ssh&#x2F;
systemctl stop rsyslog
systemctl stop auditd
&#x2F;usr&#x2F;bin&#x2F;yum clean all
logrotate -f &#x2F;etc&#x2F;logrotate.conf 
rm -f &#x2F;var&#x2F;log&#x2F;dmesg.old 
rm -rf &#x2F;var&#x2F;log&#x2F;anaconda*
cat &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;audit&#x2F;audit.log 
cat &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;wtmp 
cat &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;lastlog 
cat &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;grubby </code></pre>
<h3 id="清除系统的唯一ID"><a href="#清除系统的唯一ID" class="headerlink" title="清除系统的唯一ID"></a>清除系统的唯一ID</h3><pre class="language-none"><code class="language-none">&gt; &#x2F;etc&#x2F;machine-id</code></pre>
<h3 id="清除系统命令历史记录"><a href="#清除系统命令历史记录" class="headerlink" title="清除系统命令历史记录"></a>清除系统命令历史记录</h3><pre class="language-none"><code class="language-none">unset HISTFILE
history -c &amp;&amp; rm -rf &#x2F;root&#x2F;.bash_histroy</code></pre>
<h3 id="Sys-unconfig关机"><a href="#Sys-unconfig关机" class="headerlink" title="Sys-unconfig关机"></a>Sys-unconfig关机</h3><p>执行<code>sys-unconfig</code>等待关机，然后转换为模板。</p>
]]></content>
      <categories>
        <category>ESXi</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph Cluster 01 - Installation</title>
    <url>/2021/08/21/Linux/Linux_Ceph01/</url>
    <content><![CDATA[<p>Ceph 的学习笔记和记录。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="部署信息"><a href="#部署信息" class="headerlink" title="部署信息"></a>部署信息</h2><p>OS Version: Fedora 34 Server<br>CEPH Version: v15.2.0 (Octopus) +<br>DOCKER Version: 20.10.8</p>
<h2 id="配置实例的-Hostname-和网络"><a href="#配置实例的-Hostname-和网络" class="headerlink" title="配置实例的 Hostname 和网络"></a>配置实例的 Hostname 和网络</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts
  <span class="token number">192.168</span>.122.121 ceph01 ceph01.liarlee.site
  <span class="token number">192.168</span>.122.122 ceph02 ceph02.liarlee.site
  <span class="token number">192.168</span>.122.123 ceph03 ceph03.liarlee.site
  <span class="token number">192.168</span>.122.124 ceph04 ceph04.liarlee.site

<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> <span class="token number">192.168</span>.122.121 <span class="token builtin class-name">echo</span> <span class="token string">"ceph01.liarlee.site"</span> <span class="token operator">></span> /etc/hostname
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> <span class="token number">192.168</span>.122.122 <span class="token builtin class-name">echo</span> <span class="token string">"ceph02.liarlee.site"</span> <span class="token operator">></span> /etc/hostname
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> <span class="token number">192.168</span>.122.123 <span class="token builtin class-name">echo</span> <span class="token string">"ceph03.liarlee.site"</span> <span class="token operator">></span> /etc/hostname
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> <span class="token number">192.168</span>.122.124 <span class="token builtin class-name">echo</span> <span class="token string">"ceph04.liarlee.site"</span> <span class="token operator">></span> /etc/hostname

<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.address <span class="token number">192.168</span>.122.121/24
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.address <span class="token number">192.168</span>.122.122/24
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.address <span class="token number">192.168</span>.122.123/24
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.address <span class="token number">192.168</span>.122.124/24

<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.gateway <span class="token number">192.168</span>.122.1
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.dns <span class="token number">192.168</span>.122.1
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn mod enp1s0 ipv4.method manual
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ nmcli conn up enp1s0

<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl stop firewalld <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl disable firewalld
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">vim</span> /etc/config/selinux <span class="token comment"># change it to disabled</span></code></pre>

<h3 id="CONFIG-Dnf-Repo"><a href="#CONFIG-Dnf-Repo" class="headerlink" title="CONFIG Dnf Repo"></a>CONFIG Dnf Repo</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># config docker</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/fedora/docker-ce.repo
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo
<span class="token comment"># Add GPG Key.</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">--import</span> <span class="token string">'https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc'</span>
<span class="token comment"># update cache and install cephadm.</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ dnf makecache <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> dnf <span class="token function">install</span> <span class="token function">curl</span> <span class="token function">wget</span> <span class="token function">htop</span> <span class="token parameter variable">-y</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ dnf <span class="token function">install</span> cephadm <span class="token parameter variable">-y</span></code></pre>

<h3 id="INSTALL-Docker"><a href="#INSTALL-Docker" class="headerlink" title="INSTALL Docker"></a>INSTALL Docker</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> dnf remove <span class="token function">docker</span> <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-selinux <span class="token punctuation">\</span>
                  docker-engine-selinux <span class="token punctuation">\</span>
                  docker-engine
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> dnf <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token parameter variable">-y</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl start <span class="token function">docker</span> containerd
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> containerd

<span class="token comment"># Config proxy for docker daemon.</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> /etc/systemd/system/docker.service.d/
<span class="token punctuation">[</span>root@ceph01 docker.service.d<span class="token punctuation">]</span>$ <span class="token function">cat</span> http-proxy.conf
  <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
  <span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"HTTP_PROXY=http://192.168.31.199:7890/"</span>
  <span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"HTTPS_PROXY=http://192.168.31.199:7890/"</span></code></pre>

<h2 id="INSTALL-CEPH"><a href="#INSTALL-CEPH" class="headerlink" title="INSTALL CEPH"></a>INSTALL CEPH</h2><p>Cephadm tools were default in Fedora Repo, No need to change the repo to tsinghua or aliyun. Just install. WOW ~ Fedora YYDS.</p>
<h3 id="启动一个ceph集群"><a href="#启动一个ceph集群" class="headerlink" title="启动一个ceph集群"></a>启动一个ceph集群</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ cephadm bootstrap --mon-ip <span class="token number">192.168</span>.122.121 --allow-fqdn-hostname</code></pre>
<p>Please notice the output, context include username and password and dashboard address.</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Ceph Dashboard is now available at</span><span class="token punctuation">:</span>

       <span class="token key atrule">URL</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//localhost.localdomain<span class="token punctuation">:</span>8443/
      <span class="token key atrule">User</span><span class="token punctuation">:</span> admin
  <span class="token key atrule">Password</span><span class="token punctuation">:</span> 20jrekw4ko

Enabling client.admin keyring and conf on hosts with "admin" label
<span class="token key atrule">You can access the Ceph CLI with</span><span class="token punctuation">:</span>

  sudo /usr/sbin/cephadm shell <span class="token punctuation">-</span><span class="token punctuation">-</span>fsid e8997974<span class="token punctuation">-</span>029f<span class="token punctuation">-</span>11ec<span class="token punctuation">-</span>a59a<span class="token punctuation">-</span>525400c06f36 <span class="token punctuation">-</span>c /etc/ceph/ceph.conf <span class="token punctuation">-</span>k /etc/ceph/ceph.client.admin.keyring</code></pre>

<h3 id="使用-Ceph-Shell-命令来管理集群节点"><a href="#使用-Ceph-Shell-命令来管理集群节点" class="headerlink" title="使用 Ceph Shell 命令来管理集群节点"></a>使用 Ceph Shell 命令来管理集群节点</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># temprary use</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ cephadm shell -- ceph <span class="token parameter variable">-s</span>

<span class="token comment"># start a interactive shell</span>
<span class="token punctuation">[</span>root@ceph01 ~<span class="token punctuation">]</span>$ cephadm shell

<span class="token comment"># check the ceph status </span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-s</span>

<span class="token comment"># list ceph hosts</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ceph orch <span class="token function">host</span> <span class="token function">ls</span> <span class="token parameter variable">--format</span> yaml

<span class="token comment"># general a new ssh key for cephadm</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ cephadm get-pub-key <span class="token operator">></span> /etc/ceph/ceph.pub

<span class="token comment"># copy new key to hosts</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@192.168.122.122
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@192.168.122.123
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@192.168.122.124</code></pre>

<h2 id="维护集群"><a href="#维护集群" class="headerlink" title="维护集群"></a>维护集群</h2><h3 id="ADD-Hosts"><a href="#ADD-Hosts" class="headerlink" title="ADD Hosts"></a>ADD Hosts</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ceph orch <span class="token function">host</span> <span class="token function">add</span> ceph02.liarlee.site <span class="token number">192.168</span>.122.122
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ceph orch <span class="token function">host</span> <span class="token function">add</span> ceph03.liarlee.site <span class="token number">192.168</span>.122.123
<span class="token punctuation">[</span>ceph: root@ceph01 ceph<span class="token punctuation">]</span>$ ceph orch <span class="token function">host</span> <span class="token function">add</span> ceph04.liarlee.site <span class="token number">192.168</span>.122.124

<span class="token comment"># set mon sub-network </span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph config <span class="token builtin class-name">set</span> mon public_network <span class="token number">192.168</span>.122.0/24</code></pre>

<h3 id="ADD-Osd"><a href="#ADD-Osd" class="headerlink" title="ADD Osd"></a>ADD Osd</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># auto-detect available devices (need time to sync the status 1 by 1)</span>
<span class="token comment"># NOTE: Strangely enough, the command automatically recognizes all devices, including the ZRAM!  QAQ.....</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch apply osd --all-available-devices

<span class="token comment"># list devices</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch device <span class="token function">ls</span>
Hostname             Path        Type  Serial  Size   Health   Ident  Fault  Available
ceph01.liarlee.site  /dev/vdb    hdd           <span class="token number">21</span>.4G  Unknown  N/A    N/A    Yes
ceph01.liarlee.site  /dev/vdc    hdd           <span class="token number">21</span>.4G  Unknown  N/A    N/A    Yes
ceph01.liarlee.site  /dev/vdd    hdd           <span class="token number">21</span>.4G  Unknown  N/A    N/A    Yes
ceph01.liarlee.site  /dev/zram0  ssd           2071M  Unknown  N/A    N/A    No

<span class="token comment"># MANUAL ADD OSD</span>
<span class="token comment"># It is not necessary. </span>
<span class="token comment"># INIT DISK in MON node</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch daemon <span class="token function">add</span> osd ceph01.liarlee.site:/dev/vdb
Created osd<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token number">0</span> on <span class="token function">host</span> <span class="token string">'ceph01.liarlee.site'</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch daemon <span class="token function">add</span> osd ceph01.liarlee.site:/dev/vdc
Created osd<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token number">1</span> on <span class="token function">host</span> <span class="token string">'ceph01.liarlee.site'</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch daemon <span class="token function">add</span> osd ceph01.liarlee.site:/dev/vdd
Created osd<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token number">2</span> on <span class="token function">host</span> <span class="token string">'ceph01.liarlee.site'</span>

<span class="token comment"># MANUAL DELETE OSD</span>
<span class="token comment"># It is not necessary. </span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch osd <span class="token function">rm</span> <span class="token number">0</span>
Scheduled OSD<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> removal
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch osd <span class="token function">rm</span> <span class="token number">1</span>
Scheduled OSD<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> removal
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch osd <span class="token function">rm</span> <span class="token number">2</span>
Scheduled OSD<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> removal

<span class="token comment"># Enable the device scan enhencement, show the infomation about Health, Ident, Fault. </span>
ceph config <span class="token builtin class-name">set</span> mgr mgr/cephadm/device_enhanced_scan <span class="token boolean">true</span>

<span class="token comment"># OSD memory auto tune, for performance maybe.</span>
ceph config <span class="token builtin class-name">set</span> osd osd_memory_target_autotune <span class="token boolean">true</span>

<span class="token comment"># mark the auto manage to true.</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch apply osd --all-available-devices <span class="token parameter variable">--unmanaged</span><span class="token operator">=</span>true
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch device <span class="token function">ls</span> <span class="token parameter variable">--wide</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph osd status

<span class="token comment"># Check Deleting Status</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch osd <span class="token function">rm</span> status
OSD_ID  HOST                 STATE                    PG_COUNT  REPLACE  FORCE  DRAIN_STARTED_AT
<span class="token number">0</span>       ceph01.liarlee.site  done, waiting <span class="token keyword">for</span> purge  <span class="token number">0</span>         False    False  None
<span class="token number">1</span>       ceph01.liarlee.site  started                  <span class="token number">0</span>         False    False  None
<span class="token number">2</span>       ceph01.liarlee.site  started                  <span class="token number">0</span>         False    False  None

<span class="token comment"># remove the devices and reuse in cluster.</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch apply osd --all-available-devices <span class="token parameter variable">--unmanaged</span><span class="token operator">=</span>true
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch device zap ceph01.liarlee.site /dev/vdb <span class="token parameter variable">--force</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch device zap ceph01.liarlee.site /dev/vdc <span class="token parameter variable">--force</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch device zap ceph01.liarlee.site /dev/vdd <span class="token parameter variable">--force</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch apply osd --all-available-devices <span class="token parameter variable">--unmanaged</span><span class="token operator">=</span>false</code></pre>

<h3 id="MANAGE-服务"><a href="#MANAGE-服务" class="headerlink" title="MANAGE 服务"></a>MANAGE 服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># reduce mon instance to 3</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch <span class="token function">ls</span> mon
NAME                       PORTS        RUNNING  REFRESHED  AGE  PLACEMENT
mon                                         <span class="token number">4</span>/5  2m ago     10h  count:5

<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch apply mon <span class="token number">3</span>
Scheduled mon update<span class="token punctuation">..</span>.

<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch <span class="token function">ls</span> mon
mon                                         <span class="token number">4</span>/3  4m ago     39s  count:3

<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch redeploy mon
Scheduled to redeploy mon.ceph01.liarlee.site on <span class="token function">host</span> <span class="token string">'ceph01.liarlee.site'</span>
Scheduled to redeploy mon.ceph02 on <span class="token function">host</span> <span class="token string">'ceph02.liarlee.site'</span>
Scheduled to redeploy mon.ceph03 on <span class="token function">host</span> <span class="token string">'ceph03.liarlee.site'</span></code></pre>

<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph orch <span class="token function">ls</span>
NAME                       PORTS        RUNNING  REFRESHED  AGE  PLACEMENT
alertmanager               ?:9093,9094      <span class="token number">1</span>/1  0s ago     10h  count:1
crash                                       <span class="token number">4</span>/4  9m ago     10h  *
grafana                    ?:3000           <span class="token number">1</span>/1  0s ago     10h  count:1
mgr                                         <span class="token number">2</span>/2  9m ago     10h  count:2
mon                                         <span class="token number">3</span>/3  9m ago     5m   count:3
node-exporter              ?:9100           <span class="token number">4</span>/4  9m ago     10h  *
osd.all-available-devices                 <span class="token number">12</span>/16  9m ago     20m  *
prometheus                 ?:9095           <span class="token number">1</span>/1  0s ago     10h  count:1

<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph pg <span class="token function">stat</span>
<span class="token number">1</span> pgs: <span class="token number">1</span> active+clean<span class="token punctuation">;</span> <span class="token number">0</span> B data, <span class="token number">82</span> MiB used, <span class="token number">240</span> GiB / <span class="token number">240</span> GiB avail

<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span>$ ceph osd status
ID  HOST                  USED  AVAIL  WR OPS  WR DATA  RD OPS  RD DATA  STATE
 <span class="token number">0</span>  ceph01.liarlee.site  7364k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">1</span>  ceph01.liarlee.site  7364k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">2</span>  ceph01.liarlee.site  7300k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">3</span>  ceph02.liarlee.site  7364k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">4</span>  ceph03.liarlee.site  6980k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">5</span>  ceph04.liarlee.site  6532k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">6</span>  ceph02.liarlee.site  7236k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">7</span>  ceph03.liarlee.site  6596k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">8</span>  ceph04.liarlee.site  6404k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
 <span class="token number">9</span>  ceph02.liarlee.site  7108k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
<span class="token number">10</span>  ceph04.liarlee.site  6596k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up
<span class="token number">11</span>  ceph03.liarlee.site  7172k  <span class="token number">19</span>.9G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up</code></pre>

<h2 id="成果截图"><a href="#成果截图" class="headerlink" title="成果截图"></a>成果截图</h2><p><img src="https://i.loli.net/2021/08/22/qViGPvDdZ8wco6U.png" alt="2021-08-22_12-05_2.png"><br><img src="https://i.loli.net/2021/08/22/d5RtTisZ9X86uKF.png" alt="2021-08-22_12-05_1.png"><br><img src="https://i.loli.net/2021/08/22/EhgBwruF394AWRd.png" alt="2021-08-22_12-03.png"><br><img src="https://i.loli.net/2021/08/22/OCrDxyGzqc1n43K.png" alt="2021-08-22_12-05.png"><br><img src="https://i.loli.net/2021/08/22/2DLJcrTbnNxVSaw.png" alt="2021-08-22_12-04.png"><br><img src="https://i.loli.net/2021/08/22/PU1EL8bZASpq3XH.png" alt="2021-08-22_12-02_1.png"><br><img src="https://i.loli.net/2021/08/22/Hmkdnbtx3Ijw1Ah.png" alt="2021-08-22_12-02.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ceph, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph Cluster 02 - OSD/RBD</title>
    <url>/2021/08/23/Linux/Linux_Ceph02/</url>
    <content><![CDATA[<p>Ceph的使用笔记。</p>
<p>创建存储池</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个PG为64 ，PGP为64的存储池。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph osd pool create test-64 64 64</span>
pool <span class="token string">'test-64'</span> created

<span class="token comment"># 创建一个自动识别的大小的存储池。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph osd pool create test</span>
pool <span class="token string">'test'</span> created

<span class="token comment"># 查看已经存在的存储池。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph osd pool ls</span>
device_health_metrics
<span class="token builtin class-name">test</span>
test-64

<span class="token comment"># 查看存储池的PG 和 PGP 的信息和关系。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph pg ls-by-pool test</span>

<span class="token comment"># 查看OSD的状态。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph osd tree</span>
ID  CLASS  WEIGHT   TYPE NAME        STATUS  REWEIGHT  PRI-AFF
<span class="token parameter variable">-1</span>         <span class="token number">0.58557</span>  root default
<span class="token parameter variable">-5</span>         <span class="token number">0.14639</span>      <span class="token function">host</span> ceph01
 <span class="token number">2</span>    hdd  <span class="token number">0.04880</span>          osd.2        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">7</span>    hdd  <span class="token number">0.04880</span>          osd.7        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
<span class="token number">11</span>    hdd  <span class="token number">0.04880</span>          osd.11       up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
<span class="token parameter variable">-7</span>         <span class="token number">0.14639</span>      <span class="token function">host</span> ceph02
 <span class="token number">3</span>    hdd  <span class="token number">0.04880</span>          osd.3        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">6</span>    hdd  <span class="token number">0.04880</span>          osd.6        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
<span class="token number">10</span>    hdd  <span class="token number">0.04880</span>          osd.10       up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
<span class="token parameter variable">-9</span>         <span class="token number">0.14639</span>      <span class="token function">host</span> ceph03
 <span class="token number">1</span>    hdd  <span class="token number">0.04880</span>          osd.1        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">5</span>    hdd  <span class="token number">0.04880</span>          osd.5        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">9</span>    hdd  <span class="token number">0.04880</span>          osd.9        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
<span class="token parameter variable">-3</span>         <span class="token number">0.14639</span>      <span class="token function">host</span> ceph04
 <span class="token number">0</span>    hdd  <span class="token number">0.04880</span>          osd.0        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">4</span>    hdd  <span class="token number">0.04880</span>          osd.4        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>
 <span class="token number">8</span>    hdd  <span class="token number">0.04880</span>          osd.8        up   <span class="token number">1.00000</span>  <span class="token number">1.00000</span>

<span class="token comment"># 测试上传一个文件并且查看文件的状态和信息。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/var/lib/rpm
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># ls -lh ./Packages</span>
-rw-r--r-- <span class="token number">1</span> root root 20M Jul  <span class="token number">8</span> <span class="token number">17</span>:56 ./Packages

<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados put msg1 ./Packages --pool=test</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados put msg1 ./Packages --pool=test-64</span>

<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados ls --pool=test</span>
msg1

<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># ceph osd map test msg1</span>
osdmap e68 pool <span class="token string">'test'</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> object <span class="token string">'msg1'</span> -<span class="token operator">></span> pg <span class="token number">2</span>.c833d430 <span class="token punctuation">(</span><span class="token number">2.10</span><span class="token punctuation">)</span> -<span class="token operator">></span> up <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9,3</span>,0<span class="token punctuation">]</span>, p9<span class="token punctuation">)</span> acting <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9,3</span>,0<span class="token punctuation">]</span>, p9<span class="token punctuation">)</span>

<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># ceph osd map test-64 msg1</span>
osdmap e68 pool <span class="token string">'test-64'</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> object <span class="token string">'msg1'</span> -<span class="token operator">></span> pg <span class="token number">3</span>.c833d430 <span class="token punctuation">(</span><span class="token number">3.30</span><span class="token punctuation">)</span> -<span class="token operator">></span> up <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2,0</span>,3<span class="token punctuation">]</span>, p2<span class="token punctuation">)</span> acting <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2,0</span>,3<span class="token punctuation">]</span>, p2<span class="token punctuation">)</span>

<span class="token comment"># 删除上传的文件</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados rm msg1 --pool=test</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados rm msg1 --pool=test-64</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados ls --pool=test</span>
<span class="token punctuation">[</span>ceph: root@ceph01 rpm<span class="token punctuation">]</span><span class="token comment"># rados ls --pool=test-64</span>

<span class="token comment"># 删除刚刚添加的存储池。(临时的解决方案是使用如下的命令， 永久生效的配置写入 /etc/ceph/ceph.conf)</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># ceph tell mon.* injectargs '--mon-allow-pool-delete=true'</span>
mon.ceph01: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
mon.ceph01: mon_allow_pool_delete <span class="token operator">=</span> <span class="token string">'true'</span>
mon.ceph02: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
mon.ceph02: mon_allow_pool_delete <span class="token operator">=</span> <span class="token string">'true'</span>
mon.ceph03: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
mon.ceph03: mon_allow_pool_delete <span class="token operator">=</span> <span class="token string">'true'</span>

<span class="token comment"># 执行删除命令就不会报错了。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># ceph osd pool rm test test --yes-i-really-really-mean-it</span>
pool <span class="token string">'test'</span> removed
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># ceph osd pool rm test-64 test-64 --yes-i-really-really-mean-it</span>
pool <span class="token string">'test-64'</span> removed

<span class="token comment"># 创建一个KVM的块设备池。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># ceph osd pool create kvm 256 256</span>
pool <span class="token string">'kvm'</span> created

<span class="token comment"># 设置Application enable flag</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># ceph osd pool application enable kvm rbd</span>
enabled application <span class="token string">'rbd'</span> on pool <span class="token string">'kvm'</span>
<span class="token comment"># 初始化池。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># rbd pool init -p kvm</span>
<span class="token comment"># 创建一个可挂载的镜像。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># rbd create disk01 --size 5G --pool kvm</span>
<span class="token comment"># 查看镜像的相关信息</span>
<span class="token punctuation">[</span>ceph: root@ceph01 ~<span class="token punctuation">]</span><span class="token comment"># rbd ls --pool kvm</span>
disk01
  size <span class="token number">5</span> GiB <span class="token keyword">in</span> <span class="token number">1280</span> objects
  order <span class="token number">22</span> <span class="token punctuation">(</span><span class="token number">4</span> MiB objects<span class="token punctuation">)</span>
  snapshot_count: <span class="token number">0</span>
  id: 1703d21a8f2ba
  block_name_prefix: rbd_data.1703d21a8f2ba
  format: <span class="token number">2</span>
  features: layering, exclusive-lock, object-map, fast-diff, deep-flatten
  op_features:
  flags:
  create_timestamp: Mon Aug <span class="token number">23</span> 09:13:58 <span class="token number">2021</span>
  access_timestamp: Mon Aug <span class="token number">23</span> 09:13:58 <span class="token number">2021</span>
  modify_timestamp: Mon Aug <span class="token number">23</span> 09:13:58 <span class="token number">2021</span>

<span class="token comment"># 安装Ceph的客户端以及rbd命令。</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop hayden<span class="token punctuation">]</span><span class="token comment"># sudo pacman -S ceph</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop hayden<span class="token punctuation">]</span><span class="token comment"># rbd -p kvm map disk01</span>
/dev/rbd0
<span class="token punctuation">[</span>root@HaydenArchDesktop hayden<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
rbd0        <span class="token number">254</span>:0    <span class="token number">0</span>     5G  <span class="token number">0</span> disk

<span class="token comment"># 格式化文件系统。 </span>
<span class="token punctuation">[</span>root@HaydenArchDesktop test<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs /dev/rbd0</span>
<span class="token comment"># 挂载。</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop test<span class="token punctuation">]</span><span class="token comment"># mount /dev/rbd0 /opt/test/</span>
<span class="token comment"># 移除挂载</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop test<span class="token punctuation">]</span><span class="token comment"># umount /opt/test</span>
<span class="token comment"># 取消这个映射关系。</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop test<span class="token punctuation">]</span><span class="token comment"># rbd unmap /dev/rbd0</span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ceph, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph Cluster 03 - CephFS</title>
    <url>/2021/08/24/Linux/Linux_Ceph03/</url>
    <content><![CDATA[<p>ceph笔记03</p>
<h1 id="Cephfs的使用"><a href="#Cephfs的使用" class="headerlink" title="Cephfs的使用"></a>Cephfs的使用</h1><h2 id="Cephfs的使用条件"><a href="#Cephfs的使用条件" class="headerlink" title="Cephfs的使用条件"></a>Cephfs的使用条件</h2><ol>
<li>当我们需要多个服务来挂载和实时的同步的时候， 使用到CEPHFS，可以实现文件系统的共享。内核里面现在这个时间已经内置cephfs的挂载模块， 可以直接挂载不需要安装。</li>
<li>cephfs运行需要MDS服务，用来存储缓存的文件信息。总体需要创建两个存储池，单独创建一个存储MDS信息的存储池， 同时需要创建一个数据池来提供存储空间。</li>
<li>启用mds的服务 <pre class="language-bash" data-language="bash"><code class="language-bash">ceph orch mds <span class="token number">2</span></code></pre></li>
<li>创建ceph的存储池<pre class="language-bash" data-language="bash"><code class="language-bash">ceph mds <span class="token function">stat</span>
<span class="token comment"># 创建一个cephfs的metadata池</span>
ceph osd pool create metadata <span class="token number">32</span> <span class="token number">32</span> 
<span class="token comment"># 创建一个cephfs的data池</span>
ceph osd pool create cephfsdata <span class="token number">64</span> <span class="token number">64</span> 
<span class="token comment"># 创建ceph的状态</span>
ceph osd pool <span class="token function">ls</span> 
ceph <span class="token parameter variable">-s</span> 
<span class="token comment"># 创建cephfs的文件系统</span>
ceph fs new defaultfs metadata cephfsdata

<span class="token comment"># 新的版本里面已经不需要手动创建mds和两个对应的存储池了， 只是需要一条命令就可以自动创建。</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph fs volume create test</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph fs volume ls</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph mds stat</span>
<span class="token comment"># 需要提前获取挂载的Token： </span>
<span class="token punctuation">[</span>root@HaydenArchDesktop ceph<span class="token punctuation">]</span><span class="token comment"># sudo scp root@ceph01:/etc/ceph/ceph.client.admin.keyring /etc/ceph/</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop ceph<span class="token punctuation">]</span><span class="token comment"># mount -t ceph :/ /mnt -o name=admin</span>
<span class="token punctuation">[</span>root@HaydenArchDesktop mnt<span class="token punctuation">]</span><span class="token comment"># mount | grep ceph</span>
<span class="token number">192.168</span>.31.11:6789,192.168.31.12:6789,192.168.31.13:6789:/ on /mnt <span class="token builtin class-name">type</span> ceph <span class="token punctuation">(</span>rw,relatime,name<span class="token operator">=</span>admin,secret<span class="token operator">=</span><span class="token operator">&lt;</span>hidden<span class="token operator">></span>,acl<span class="token punctuation">)</span>

<span class="token comment">#</span>
<span class="token comment"># journalctl -f > /mnt/journal.log   </span>
<span class="token comment"># 查看cephfs的写入文件的动作过程。 </span>
<span class="token comment"># 同时使用 tail -f 在另一个窗口中查看文件的内容。 测试写入和查看内容的差距。 </span>
</code></pre></li>
</ol>
<h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><p>MDS可以启动多个实例，多个实例会自动来负载不同资源的文件元数据的缓存。<br>客户端通过MON节点进行授权 和 获取MDS的的位置。<br>MDS现在最新的版本默认已经是一主一备， 自动会生成高可用的模式。（之前的手动部署多个MDS服务器， 然后指定MDS的角色）</p>
<h3 id="创建一个普通用户来进行身份的验证"><a href="#创建一个普通用户来进行身份的验证" class="headerlink" title="创建一个普通用户来进行身份的验证"></a>创建一个普通用户来进行身份的验证</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个测试的用户</span>
ceph auth <span class="token function">add</span> client.testuser mon <span class="token string">'allow r'</span> mds <span class="token string">'allow rw'</span> osd <span class="token string">'allow rwx pool=cephfsdata'</span>
<span class="token comment"># 测试所建立的用户的权限，获取认证的keyring</span>
ceph auth get client.testuser
<span class="token comment"># 导出用户的Keyring， 用来做集群的校验</span>
ceph auth get client.testuser <span class="token parameter variable">-o</span> ceph.client.testuser.keyring
<span class="token comment"># 导出用户的key ， Kubernetes的挂载会使用到</span>
ceph auth print-key client.testuser <span class="token operator">></span> testuser.key
<span class="token comment"># 验证用户是否可以获取到集群的状态</span>
ceph <span class="token parameter variable">--user</span> testuser <span class="token parameter variable">-s</span> 

<span class="token comment"># 将挂载点添加到fstab自动开机挂载</span>
MON01:6789,MON02:6789,<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.:/ /mnt ceph defaults,name<span class="token operator">=</span>testuser,secretfile<span class="token operator">=</span>/etc/ceph/testuser.key,_netdev <span class="token number">0</span> <span class="token number">0</span></code></pre>
<h3 id="Dashboard权限"><a href="#Dashboard权限" class="headerlink" title="Dashboard权限"></a>Dashboard权限</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启用或者禁用账户</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph dashboard ac-user-enable admin</span>

<span class="token comment"># 重置Dashboard用户的密码</span>
<span class="token comment"># Old Version</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph dashboard set-login-credentials admin -i /etc/ceph/dashboard_password</span>

<span class="token comment"># New version command.</span>
<span class="token punctuation">[</span>ceph: root@ceph01 /<span class="token punctuation">]</span><span class="token comment"># ceph dashboard -h | grep ac-user</span>
dashboard ac-user-add-roles <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>roles<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>         Add roles to user
dashboard ac-user-create <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>rolename<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">]</span>   Create a user. Password <span class="token builtin class-name">read</span> from <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>
dashboard ac-user-del-roles <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>roles<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>         Delete roles from user
dashboard ac-user-delete <span class="token punctuation">[</span><span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">]</span>                       Delete user
dashboard ac-user-disable <span class="token punctuation">[</span><span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">]</span>                      Disable a user
dashboard ac-user-enable <span class="token punctuation">[</span><span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">]</span>                       Enable a user
dashboard ac-user-set-info <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>email<span class="token operator">></span><span class="token punctuation">]</span>      Set user info
dashboard ac-user-set-password <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span>--force-         Set user password from <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>
dashboard ac-user-set-password-hash <span class="token operator">&lt;</span>username<span class="token operator">></span>              Set user password bcrypt <span class="token builtin class-name">hash</span> from <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>
dashboard ac-user-set-roles <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>roles<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>         Set user roles
dashboard ac-user-show <span class="token punctuation">[</span><span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">]</span>                         Show user info</code></pre>

<h3 id="MDS-高可用"><a href="#MDS-高可用" class="headerlink" title="MDS 高可用"></a>MDS 高可用</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提升默认的主节点的数量， 来提高MDS服务的吞吐量</span>
ceph fs <span class="token builtin class-name">set</span> defaultfs max_mds <span class="token number">2</span> 
ceph fs get defaultfs
<span class="token comment"># 变成两主两备， （设置Rank）</span>
<span class="token comment"># 参数： mds_standby_replay true </span>
         mds_standby_for_name: MDS_NAME
         mds_standby_for_rank: 备份指定级别的mds
         mds_standby_for_fscid: 指定文件系统ID，会联合rank配置生效，如果指定了rank就是指定文件系统的rank会进行主备，如果未指定就是指定文件系统的所有Rank。</code></pre>
<ol>
<li>如果是一对一的高可用 ， 需要对每个mds进行独立的配置。<br>配置样例： <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置的结果是mds1主， mds2 备； mds3 主， mds4 备.</span>
<span class="token punctuation">[</span>mds.ceph-mds1<span class="token punctuation">]</span>
mds_standby_replay <span class="token operator">=</span> <span class="token boolean">true</span> 
mds_standby_for_name <span class="token operator">=</span> ceph-mds2
mds_standby_for_fscid <span class="token operator">=</span> defaultfs 

<span class="token punctuation">[</span>mds.ceph-mds3<span class="token punctuation">]</span>
mds_standby_replay <span class="token operator">=</span> <span class="token boolean">true</span>
mds_standby_for_name <span class="token operator">=</span> ceph-mds4</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ceph, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph Cluster 04 - CRUSH算法</title>
    <url>/2021/09/01/Linux/Linux_Ceph04/</url>
    <content><![CDATA[<p>ceph笔记04</p>
<h1 id="修改CRUSH算法的分配方式"><a href="#修改CRUSH算法的分配方式" class="headerlink" title="修改CRUSH算法的分配方式"></a>修改CRUSH算法的分配方式</h1><h2 id="基础概念："><a href="#基础概念：" class="headerlink" title="基础概念："></a>基础概念：</h2><h3 id="五种运行图：-MON服务维护"><a href="#五种运行图：-MON服务维护" class="headerlink" title="五种运行图： MON服务维护"></a>五种运行图： MON服务维护</h3><ol>
<li>Monitor Map - 监控的运行图 MON的状态</li>
<li>OSD Map - OSD的状态， 每隔六秒钟汇报一次状态</li>
<li>PG Map - PG的运行图， PG的状态和映射关系</li>
<li>CRUSH Map - 一致性hash算法，和数据块和osd的分配关系， 动态更新，当客户端请求一个文件的时候，会通过CRUSH算法会根据osd的map创建PG组合的来对文件的存储进行负载和分配。假如有20个osd，创建32重组合分配对应的pg和osd的对应关系，选主从，选分布方式和节点的同步关系，叫做CRUSH Map。</li>
<li>MDS Map - Metadata Map ，元数据和数据文件的映射关系。</li>
</ol>
<h3 id="5种算法对节点的选择方式"><a href="#5种算法对节点的选择方式" class="headerlink" title="5种算法对节点的选择方式"></a>5种算法对节点的选择方式</h3><ol>
<li>Uniform</li>
<li>List </li>
<li>Tree</li>
<li>Straw - 早期的版本，分布不是特别的均衡，抽签算法</li>
<li>Straw2 - 目前已经发展中的版本， 抽签算法 （Default）</li>
</ol>
<h2 id="对PG的动态调整"><a href="#对PG的动态调整" class="headerlink" title="对PG的动态调整"></a>对PG的动态调整</h2><p>默认情况下是动态调整的，但是可以手动调整为给予权重，设置PG分配的倾向，例如1T权重是1，等等等等</p>
<h3 id="查看状态以及调整方式"><a href="#查看状态以及调整方式" class="headerlink" title="查看状态以及调整方式"></a>查看状态以及调整方式</h3><p>ceph osd df<br>需要关注的值有两个：</p>
<ul>
<li>weight - 根据磁盘的空间进行的调整，默认自动计算， 可调。</li>
<li>reweight - 磁盘的所有权重相加之后， 单个osd所占用的比例，由于默认的分配是相对概率的平衡，所以分配可能还是会有一些不均衡，通过这个可以进行再次的平衡。</li>
</ul>
<p>调整的效果就是希望立刻重新平衡PG的数量(需要注意在业务负载低的时候执行) 数据均衡分配。迫使算法动态的更新PG的位置。</p>
<ol>
<li><p>调整WEIGHT的值<br>ceph osd crush reweight osd.10 {WEIGHT} # 调整weight值， 越大权重越高，分配的PG数量越大。</p>
</li>
<li><p>调整REWEIGHT<br>ceph osd crush reweight {OSD_ID} {REWEIGHT} # 范围是 0 - 1， 也是越大权重越高。</p>
</li>
</ol>
<h3 id="对运行图进行操作"><a href="#对运行图进行操作" class="headerlink" title="对运行图进行操作"></a>对运行图进行操作</h3><ol>
<li>创建一个保存运行图的目录<br>mkdir &#x2F;cephmap&#x2F;ceph -p<br>ceph osd getcrushmap -o &#x2F;cephmap&#x2F;ceph&#x2F;crushmap  # 同时可以做备份使用，将运行图导出到文件中，当需要的时候可以通过这个文件还原。</li>
<li>转换map的二进制格式为文本，Ubuntu 需要安装 crushbase 包。<br>crushtool -d &#x2F;cephmap&#x2F;ceph &gt; &#x2F;cephmap&#x2F;ceph&#x2F;crushmap.txt</li>
<li>编辑这个文件<br>主要编辑type部分， 按照不同的调度需求，<br>按照不同的osd，不同主机调度，不同的机架，不同的机柜，不同的PDU，不同的房间，不同的数据中心， 不同的区域城市， 顶层。<br>下面是主机的配置部分。每个主机的算法，osd的分配情况，权重。<br>Rules 副本池的规则里面定义了<br>step take default  基于default配置端里面的规则来进行osd的分配。<br>step chooseleaf firstn 0(按照顺序选择，先选到的就是) type host（按照什么类别进行选择高可用的类型）<br>max_size 副本池配置文件之中可以定义副本数</li>
<li>转换成二进制文件<br>crushtool -c &#x2F;cephmap&#x2F;ceph&#x2F;crushmap.txt -o &#x2F;cephmap&#x2F;ceph&#x2F;crushmap_new </li>
<li>导入查看是否生效<br>ceph osd setcrushmap -i &#x2F;cephmap&#x2F;ceph&#x2F;crushmap_new</li>
<li>查看是否生效<br>ceph osd crush rule dump</li>
<li>创建一个存储池<br>ceph osd pool create magedu-ssdpool 32 32 magedu_ssd_rule<br>ceph pg ls-by-pool  magedu-ssdpool | awk ‘{print $1,$2,$15}’</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ceph, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>i3wm的简单配置</title>
    <url>/2019/10/22/Linux/Linux_ChangeGnometoi3wm/</url>
    <content><![CDATA[<p>将自己的桌面环境迁移到了i3。Gnome好用是好用的，但是体量还是有点儿大了，吃资源有点多。</p>
<p>这个现在已经更新到 DWM上面了， 对于这里面还有其他的工具是一直在用的 ， 比如 picom 等等。 </p>
<h1 id="安装i3-gaps"><a href="#安装i3-gaps" class="headerlink" title="安装i3-gaps"></a>安装i3-gaps</h1><p>安装的过程比较简单,pacman 就完事儿了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Syyu</span> 
pacman <span class="token parameter variable">-S</span> i3-gaps
  这里有两个可以选择，一个是i3-wm,  还有一个是i3-gaps, 我用了i3gaps， 好看一些。
pacman <span class="token parameter variable">-S</span> alacritty 
pacman <span class="token parameter variable">-S</span> polybar
pacman <span class="token parameter variable">-S</span> compton <span class="token punctuation">(</span>最新的软件改名了，叫picom,但是安装的方式不变的。<span class="token punctuation">)</span>
pacman <span class="token parameter variable">-S</span> picom
pacman <span class="token parameter variable">-S</span> dmenu
pacman <span class="token parameter variable">-S</span> rofi
pacman <span class="token parameter variable">-S</span> feh 
pacman <span class="token parameter variable">-S</span> variety
pacman <span class="token parameter variable">-S</span> unzip-natspec  
<span class="token comment">#unzip-natspec貌似是在archlinuxcn里面的，可以处理zip解压的时候乱码的问题，不用考虑手动指定解压的-O了。</span></code></pre>

<h1 id="配置i3"><a href="#配置i3" class="headerlink" title="配置i3"></a>配置i3</h1><p>在已经有Gnome环境的条件下，i3 的配置还是比较轻松的。</p>
<h2 id="I3的使用说明"><a href="#I3的使用说明" class="headerlink" title="I3的使用说明"></a>I3的使用说明</h2><p>i3默认的操作是<strong>使用Windows&#x2F;Super&#x2F;Mod</strong>这个按键(或者随便怎么叫吧，后面都说<strong>Super</strong>，和Gnome的口径一致)，简单列举一下频率较高的<strong>使用方式</strong></p>
<ol>
<li>先说<strong>重载配置文件</strong>，使用 Super + Shift + r </li>
<li><strong>退出到DM</strong>，使用Super + Shift + e， DM就是你的登录界面。</li>
<li>i3提供了10个虚拟桌面，<strong>切换虚拟桌面方式</strong>是可以通过Super + 1 - 10 快速切换</li>
<li>在默认的<strong>Tiling排列模式</strong>中<strong>切换排列位置</strong>Vertical和Horizontal. 通过Super V 或者 Super H</li>
<li><strong>调整容器布局</strong>：<ol>
<li><strong>使用Stacking</strong> – Super + s 所有的标签堆叠显示最上方提供标签进行切换</li>
<li><strong>使用Tabbed</strong> – Super + w 标签页方式显示所有窗口</li>
<li><strong>使用Toggle</strong> – Super + e 平铺窗口模式，可切换不同的布局方式</li>
</ol>
</li>
<li><strong>打开程序</strong>可以通过terminal开启，或者Super + d 使用dmenu开启（可将 dmenu 替换成 rofi）</li>
<li><strong>关闭程序</strong>可以通过Super + Shift + q关闭，或者鼠标点击x，不是所有的窗口都有x</li>
<li>在<strong>窗口间移动</strong>可使用 Super + {jkl;}四个按键；或者使用Super + {up,down,left,right}的arrowkey</li>
<li>可将<strong>窗口变更为Floating</strong>， 使用Super + Shift + Space</li>
<li><strong>Floating窗口调整位置</strong>可长按Super 使用鼠标拖动调整位置</li>
<li><strong>全屏程序</strong>使用 Super + f</li>
</ol>
<h2 id="i3的自定义配置"><a href="#i3的自定义配置" class="headerlink" title="i3的自定义配置"></a>i3的自定义配置</h2><h3 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h3><p>配置文件的路径： $HOME&#x2F;.config&#x2F;i3&#x2F;config,<strong>所有的配置在这个文件下修改</strong></p>
<h3 id="自定义界面的设置"><a href="#自定义界面的设置" class="headerlink" title="自定义界面的设置"></a>自定义界面的设置</h3><p>默认的i3启动的时候还是挺丑的，我有四个设置：</p>
<pre class="language-none"><code class="language-none">gaps inner 5  # 设置i3窗口间的空隙大小，单位是像素。
new_window 1pixel # 设置新的窗口的边界宽度，效果是不显示窗口的title。
new_float 1pixel	# 新的浮动窗口的边界宽度，同上。
smart_borders on 	# 在只有一个窗口的情况下自动最大化当前的窗口，不处理窗口的Gap。</code></pre>

<h3 id="默认terminal程序更改"><a href="#默认terminal程序更改" class="headerlink" title="默认terminal程序更改"></a>默认terminal程序更改</h3><p>设置默认使用 Super + Enter 打开alacritty</p>
<pre class="language-none"><code class="language-none">bindsym $mod+Return exec --no-startup-id alacritty</code></pre>

<p>alacritty 是一个使用GPU进行渲染的terminal模拟器，它有自己的配置文件，我的<strong>配置文件路径</strong>在:$HOME&#x2F;.config&#x2F;alacritty&#x2F;alacritty.conf</p>
<p>*NOTE： 关于Alacritty的问题目前已经解决的差不多了。 还有还有一个问题是关于ssh过去之后不能正确的识别终端类型的BUG，解决方案在后面。</p>
<h3 id="默认打开Firefox"><a href="#默认打开Firefox" class="headerlink" title="默认打开Firefox"></a>默认打开Firefox</h3><p>我的设置是Super + p</p>
<pre class="language-none"><code class="language-none">bindsym $mod+p exec --no-startup-id firefox</code></pre>

<h3 id="开机启动一些程序"><a href="#开机启动一些程序" class="headerlink" title="开机启动一些程序"></a>开机启动一些程序</h3><p>我的开机启动了 Compton, Variety, Remmina,Aria2c, Polybar, ibus-daemon，剩下的看自己喜欢什么就安装什么就OK了。</p>
<pre class="language-none"><code class="language-none">exec_always --no-startup-id compton --config &#x2F;home&#x2F;liarlee&#x2F;.config&#x2F;compton&#x2F;compton.conf -b
exec_always --no-startup-id variety 
exec_always --no-startup-id remmina
exec_always --no-startup-id aria2c --conf-path&#x3D;&#x2F;home&#x2F;liarlee&#x2F;.aria2&#x2F;aria2.conf
exec_always --no-startup-id sh &#x2F;home&#x2F;liarlee&#x2F;.config&#x2F;polybar&#x2F;polybar_startup.sh
exec_always --no-startup-id ibus-daemon -dr</code></pre>

<h3 id="截屏功能快捷键"><a href="#截屏功能快捷键" class="headerlink" title="截屏功能快捷键"></a>截屏功能快捷键</h3><p>默认的i3不能用PrintScreen我觉得有点儿难受，所以自己添加了快捷键和保存位置</p>
<pre class="language-none"><code class="language-none">bindsym --release Print exec &quot;scrot -b -m &#x2F;home&#x2F;liarlee&#x2F;Pictures&#x2F;Scort_ScreenShot&#x2F;screenshot.png&quot;</code></pre>

<hr>
<p><strong>更新</strong>：</p>
<p>之前的这个方式可以作为截图的快捷方式，但是当你需要连续的截图的时候就会特别的难受，因为新截图会自动覆盖掉旧的截图。更新一下新的方式，写一个脚本，当我们按下PrintSc的时候触发这个脚本，就可以对文件重命名了。</p>
<ol>
<li>也许脚本名称可以叫 - screenshot.sh</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">snapdate</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%Y%m%d_%H%M%S"</span><span class="token variable">`</span></span>
gnome-screenshot <span class="token parameter variable">-f</span> /home/hayden/screenshot/Screenshot-<span class="token variable">$snapdate</span>.png</code></pre>

<ol start="2">
<li>更新i3的配置文件，添加快捷键的管理。</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash">bindsym <span class="token parameter variable">--release</span> Print <span class="token builtin class-name">exec</span> <span class="token string">"/home/liarlee/Scripts/System/screenshot.sh"</span></code></pre>

<ol start="3">
<li>这样再截图就会保存到指定的位置，并且用时间命名区分开不同的截图，不会覆盖了。</li>
</ol>
<h3 id="调节音量快捷键"><a href="#调节音量快捷键" class="headerlink" title="调节音量快捷键"></a>调节音量快捷键</h3><p>由于已经有了PulseAudio， 所以i3自动增加了笔记本Func-key的调整，但是如果没有功能键的话，还是要按照如下自定义的。我<strong>调整音量</strong>用的Super + F2&#x2F;F3, 也可以改其他的</p>
<pre class="language-none"><code class="language-none"># Use pactl to adjust volume in PulseAudio.
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; $refresh_i3status
bindsym $mod+F3 exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; $refresh_i3status
bindsym $mod+F2 exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; $refresh_i3status</code></pre>

<h3 id="拼音输入法"><a href="#拼音输入法" class="headerlink" title="拼音输入法"></a>拼音输入法</h3><p>我在Gnome下使用的是Ibus-rime框架的小鹤双拼，Gnome下开箱即用，但是i3需要做一些简单的配置，更改一些环境变量。</p>
<ol>
<li><p>在自己的家目录 : <code>touch .xprofile</code></p>
</li>
<li><p>添加内容如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>ibus
<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>ibus
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span>@im<span class="token operator">=</span>ibus</code></pre>
</li>
<li><p>使用source读取配置文件中的环境变量，使环境变量生效。尝试输出<code>echo $XMODIFIER</code>查看是否已经生效，输出空值的话ibus还是无法使用。</p>
</li>
<li><p>结合上面的i3配置文件，使用ibus-daemon -dr启动，<strong>不要XIM</strong>。如果你使用了-x启动，在浮动的输入法工具栏中会显示一个禁止的标志，说明拼音未正常工作。</p>
</li>
</ol>
<h3 id="配置Polybar"><a href="#配置Polybar" class="headerlink" title="配置Polybar"></a>配置Polybar</h3><p>我基本上使用的是默认的Bar配置文件，还比较方便。</p>
<ol>
<li><p>复制一个配置文件的模板到家目录的文件夹下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-p</span> /usr/share/doc/ploybar/config .config/polybar/config</code></pre>
</li>
<li><p>编辑一个启动脚本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> polybar_startup.sh</code></pre>
</li>
<li><p>写入如下内容</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">## kill all old process of ploybar</span>
<span class="token function">killall</span> <span class="token parameter variable">-q</span> polybar
<span class="token keyword">while</span> pgrep <span class="token parameter variable">-u</span> <span class="token environment constant">$UID</span> <span class="token parameter variable">-x</span> polybar <span class="token operator">></span> /dev/null<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">done</span>

<span class="token builtin class-name">echo</span> <span class="token string">"---"</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /tmp/polybar.log
polybar example <span class="token operator">&amp;</span> /tmp/polybar.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Polybar launched"</span></code></pre>

<p>结合上面的<strong>i3配置进行开机自动运行</strong>即可。我觉得默认的这个还行，可以日常使用了，不调整了，太费劲了。</p>
</li>
</ol>
<h1 id="目前还未解决的问题"><a href="#目前还未解决的问题" class="headerlink" title="目前还未解决的问题"></a>目前还未解决的问题</h1><h2 id="无法在terminal中输入中文"><a href="#无法在terminal中输入中文" class="headerlink" title="无法在terminal中输入中文"></a>无法在terminal中输入中文</h2><p>目前中文的输入法还是有些问题，<strong>无法在alacritty中输入中文</strong>，可能和ibus的关系比较大，我尝试使用fctix完全没有任何问题，所有的地方都可以输入中文，所以选择什么方式输入中文，各有所好吧。但是，Gnome环境和i3的环境是会冲突的，所以同时安装ibus和fcitx要考虑一下。</p>
<hr>
<p>Alacritty中无法输入中文的问题已经解决了！</p>
<blockquote>
<p>那么解决的方法如下：</p>
<p>​	在&#x2F;etc&#x2F;profile文件中（或者.zshrc中），添加如下的环境变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>ibus
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span>@im<span class="token operator">=</span>ibus
<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULES</span><span class="token operator">=</span>ibus</code></pre>

<p>之后 ，</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile
<span class="token builtin class-name">source</span> ~/.zshrc </code></pre>

<p>重新启动alacritty就可以使用了。</p>
<p>我想root cause是：我的alacritty启动的时候使用的是zshrc的变量，而没有读取系统的变量，不知道是不是这个原因，但是现在已经可以使用了，完美。</p>
</blockquote>
<hr>
<h2 id="SSH之后不能正确的识别Alacritty的终端类型"><a href="#SSH之后不能正确的识别Alacritty的终端类型" class="headerlink" title="SSH之后不能正确的识别Alacritty的终端类型"></a>SSH之后不能正确的识别Alacritty的终端类型</h2><p>ssh登录其他机器的时候会报错： <strong>Error opening terminal: alacritty.</strong></p>
<blockquote>
<p>这个问题其实是因为Alacritty毕竟是小众的Terminal Emulator， 所以 大部分的机器里面并没有这个类型的终端的信息， SSH在登录之后会试图把登录用户的Terminal设置为Alacritty，这个问题其实配置文件中已经有了解决方法，直接注释配置文件的如下部分，就可以恢复SSH正常使用了。</p>
<pre class="language-YAML" data-language="YAML"><code class="language-YAML">env:
    TERM: xterm-256color</code></pre>

<p>解决~</p>
</blockquote>
<h1 id="放几张最后的结果图"><a href="#放几张最后的结果图" class="headerlink" title="放几张最后的结果图"></a>放几张最后的结果图</h1><p>大约就是这个样子啦～　　收工！</p>
<hr>
<p><img src="https://i.loli.net/2019/10/22/rl7UziNqj1dwuLf.png" alt="screenshot_002.png"><br><img src="https://i.loli.net/2019/10/22/HzgEw4v81hlqxSp.png" alt="screenshot_001.png"><br><img src="https://i.loli.net/2019/10/22/xR4gi9FpCoN2qhl.png" alt="screenshot.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_Cobbler搭建本地YUM源同步k8s阿里云</title>
    <url>/2019/09/30/Linux/Linux_Cobbler-k8s-reposync/</url>
    <content><![CDATA[<p>昨天晚上尝试使用阿里云的时候出现问题 ，阿里云的k8s源安装的时候报错，无法正常通过yum安装。内网正好放了一台Cobbler，所以直接从Cobbler同步阿里的repo过来放到内网，防止这个事情再次发生。</p>
<h1 id="Cobbler是什么"><a href="#Cobbler是什么" class="headerlink" title="Cobbler是什么"></a>Cobbler是什么</h1><blockquote>
<p>Cobbler是一个免费开源系统安装部署软件，用于自动化网络安装操作系统。 Cobbler 集成了 DNS, DHCP,[1][2]软件包更新， 带外管理以及配置管理， 方便操作系统安装自动化。Cobbler 可以支持PXE启动, 操作系统重新安装, 以及虚拟化客户机创建，包括Xen, KVM or VMware. Cobbler透过koan程序以支持虚拟化客户机安装。Cobbler 可以支持管理复杂网路环境，如创建在链路聚合以太网的桥接环境。 <a href="https://en.wikipedia.org/wiki/Cobbler_(software)">FROM Wikipedia</a></p>
</blockquote>
<h1 id="Cobbler-Repo的建立"><a href="#Cobbler-Repo的建立" class="headerlink" title="Cobbler Repo的建立"></a>Cobbler Repo的建立</h1><p>k8s的源，Cobbler直接建立的同步不可以是因为k8s的目录结构和一般软件源的结构不同。（开始以为阿里云会一直保持带有Pool文件夹的那个结构， 今天早上看到结构已经和普通的yumrepo一样了，记录一下出现这种问题怎么办好了。）其实解决的方案就是手动同步，使用Cobbler进行源的发布。其实也就是httpd发布出去。</p>
<hr>
<h2 id="建立阿里云的源"><a href="#建立阿里云的源" class="headerlink" title="建立阿里云的源"></a>建立阿里云的源</h2><pre class="language-none"><code class="language-none">[root@cobbler &#x2F;]# cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo
[kubernetes]
name&#x3D;Kubernetes
baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;
enabled&#x3D;1
gpgcheck&#x3D;1
repo_gpgcheck&#x3D;1
gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg
EOF
[root@cobbler &#x2F;]# mv kubernetes.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo
[root@cobbler &#x2F;]# yum clean all
[root@cobbler &#x2F;]# yum makecache
[root@cobbler &#x2F;]# yum repolist
# 在repolist中记录repoid</code></pre>
<h2 id="手动同步源"><a href="#手动同步源" class="headerlink" title="手动同步源"></a>手动同步源</h2><pre class="language-none"><code class="language-none">[root@cobbler &#x2F;]# reposync -n --repoid&#x3D;kubernetes -p &#x2F;var&#x2F;www&#x2F;cobbler&#x2F;repo_mirror&#x2F; --allow-path-traversal</code></pre>
<h2 id="手动将已经同步好的目录创建为repo"><a href="#手动将已经同步好的目录创建为repo" class="headerlink" title="手动将已经同步好的目录创建为repo"></a>手动将已经同步好的目录创建为repo</h2><pre class="language-none"><code class="language-none">[root@cobbler &#x2F;]# createrepo &#x2F;var&#x2F;www&#x2F;cobbler&#x2F;repo_mirror&#x2F;kubernetes&#x2F;</code></pre>
<p>最后编辑一下自己的kubernetes.repo源文件，只指向本地的源就可以了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Repo, Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础知识二周目</title>
    <url>/2021/09/04/Linux/Linux_Docker-again/</url>
    <content><![CDATA[<p>Docker Container 基础 。 again ….. </p>
<h2 id="Docker使用的六个名称空间"><a href="#Docker使用的六个名称空间" class="headerlink" title="Docker使用的六个名称空间"></a>Docker使用的六个名称空间</h2><ol>
<li>MNT Namespace - 提供文件的挂载和文件系统的隔离</li>
<li>IPC Namespace - 提供进程间通信</li>
<li>UTS Namespace - 提供主机名隔离</li>
<li>PID Namespace - 提供进程以及进程号隔离</li>
<li>Net Namespace - 提供网络隔离</li>
<li>User Namespace - 提供用户以及用户id的隔离</li>
</ol>
<h2 id="容器的进程ID关系"><a href="#容器的进程ID关系" class="headerlink" title="容器的进程ID关系"></a>容器的进程ID关系</h2><pre class="language-bash" data-language="bash"><code class="language-bash">Host -------------------------------- <span class="token operator">|</span> container ------------------------<span class="token operator">|</span>
systemd -- containerd -- container-shim -- <span class="token operator">|</span> nginx-master -- nginx-worker
               <span class="token variable"><span class="token variable">`</span>      -- container-shim -- <span class="token operator">|</span> nginx-master -- nginx-worker
               <span class="token variable">`</span></span>      -- container-shim -- <span class="token operator">|</span> mysql-master -- mysql-worker
           dockerd -- docker-proxy -- <span class="token operator">|</span> docker-proxy
               <span class="token variable"><span class="token variable">`</span>   -- docker-proxy -- <span class="token operator">|</span> docker-proxy
               <span class="token variable">`</span></span>   -- docker-proxy -- <span class="token operator">|</span> docker-proxy</code></pre>

<p>containerd负责控制容器的进程，主机，用户，挂载的隔离。<br>dockerd 启动的docker-proxy用来管理iptables进行网络的隔离。<br>docker.service 里面指定了调用Containerd的socket<br>生成容器的过程钟，API调用过程使用的是grpc。<br>无论dockerd还是containerd最终使用的都是runc（container runtime） ，一个基于Go语言的容器创建工具， 根据OCI标准来创建容器。</p>
<p>docker-daemon 限制可以限制生成日志的大小</p>
<ul>
<li>限制日志的大小使用的是 docker的daemon config， 针对的日志的范围，是docker Container 里面的标准输入输出的日志， 这部分日志的存储是在机器的硬盘上， 位置是（&#x2F;opt&#x2F;docker-storage&#x2F;containers ， 也就是&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;[CONTAINER_ID]&#x2F;*.json），</li>
</ul>
<p> cpu 大约可以分配 1:4  ， mem不建议超过物理内存的分配</p>
<p>压测镜像： lorel&#x2F;docker-stress-ng </p>
<h2 id="Docker的网络结构"><a href="#Docker的网络结构" class="headerlink" title="Docker的网络结构"></a>Docker的网络结构</h2><p>使用的是宿主机的docker0桥，同时在Host上面生成虚拟网卡veth多个接口 ， 在容器中生成eth0的虚拟网卡对， 虚拟机中的两个容器之间使用的是物理地址进行寻址访问，所以这个部分可以通过arp命令来进行验证。</p>
<h2 id="Docker容器的资源限制-Cgroup"><a href="#Docker容器的资源限制-Cgroup" class="headerlink" title="Docker容器的资源限制 - Cgroup"></a>Docker容器的资源限制 - Cgroup</h2><p>可以限制 CPU，MEM，DISKIO，NETIO, PRI，PAUSE&#x2F;RESUME。 对于Kubernetes可以对集群的Namespace来进行限制资源的规划。</p>
<p>查看内核可以支持的cgroup Flag. </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">┌─<span class="token punctuation">[</span>hayden@HaydenArchDesktop<span class="token punctuation">]</span> - <span class="token punctuation">[</span>~<span class="token punctuation">]</span> - <span class="token punctuation">[</span>Sun Sep 05, 00:14<span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;></span> zcat /proc/config.gz <span class="token operator">|</span> <span class="token function">grep</span> CGROUP
<span class="token assign-left variable">CONFIG_CGROUPS</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_BLK_CGROUP</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_WRITEBACK</span><span class="token operator">=</span>y 
<span class="token assign-left variable">CONFIG_CGROUP_SCHED</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_PIDS</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_RDMA</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_FREEZER</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_HUGETLB</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_DEVICE</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_CPUACCT</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_PERF</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_BPF</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_MISC</span><span class="token operator">=</span>y
<span class="token comment"># CONFIG_CGROUP_DEBUG is not set</span>
<span class="token assign-left variable">CONFIG_SOCK_CGROUP_DATA</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_BLK_CGROUP_RWSTAT</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_BLK_CGROUP_IOLATENCY</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_BLK_CGROUP_IOCOST</span><span class="token operator">=</span>y
<span class="token comment"># CONFIG_BFQ_CGROUP_DEBUG is not set</span>
<span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_CGROUP</span><span class="token operator">=</span>m
<span class="token assign-left variable">CONFIG_NET_CLS_CGROUP</span><span class="token operator">=</span>m
<span class="token assign-left variable">CONFIG_CGROUP_NET_PRIO</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_CGROUP_NET_CLASSID</span><span class="token operator">=</span>y

┌─<span class="token punctuation">[</span>hayden@HaydenArchDesktop<span class="token punctuation">]</span> - <span class="token punctuation">[</span>~<span class="token punctuation">]</span> - <span class="token punctuation">[</span>Sun Sep 05, 00:14<span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;></span> zcat /proc/config.gz <span class="token operator">|</span> <span class="token function">grep</span> MEM <span class="token operator">|</span> <span class="token function">grep</span> CG
<span class="token assign-left variable">CONFIG_MEMCG</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_MEMCG_SWAP</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_MEMCG_KMEM</span><span class="token operator">=</span>y</code></pre>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>Kubernetes 限制是1&#x2F;1000Core ，Docker是1&#x2F;10Core, 只需要通过 –cpus 选项指定容器可以使用的 CPU 个数就可以了，并且还可以指定如 1.5 之类的小数。</p>
<p>CPU OverCommit 1:8</p>
<h3 id="MEM"><a href="#MEM" class="headerlink" title="MEM"></a>MEM</h3><p>MEM的限制单位是M； 同时可以限制Swap的使用，但是限制Swap的使用需要内核的支持，大部分时候还是会关闭掉SWAP， 虽然避免了OOM，但是会影响服务的质量。</p>
<p>MEM 不建议OverCommit</p>
<blockquote>
<p>一般情况下 ： 分配0.5&#x2F;1个CPU，mem 2G&#x2F;4G； 根据业务的不同， 一般会是高可用的部署，两个一起对外提供服务；所以会启动两个容器，不需要提供太高的硬件，符合要求即可。</p>
</blockquote>
<p>关于OOM的问题和可以调整的参数(&#x2F;proc&#x2F;[PID]&#x2F;)：</p>
<ol>
<li>oom_adj 取值范围 -17 to +15 ， 为了兼容旧程序保留的方式</li>
<li>oom_score 一般是自动计算出来的结果，<strong>综合计算的结果, 参考 ： CPU时间，存活时间，oom_adj计算之后的结果。</strong></li>
<li>oom_score_adj OOM分数的偏移量，-1000 to +1000, 可以设置-1000表示永远不会被Kill</li>
</ol>
<h3 id="DISKIO"><a href="#DISKIO" class="headerlink" title="DISKIO"></a>DISKIO</h3><p>Disk OverCommit : 1:1.2</p>
<h3 id="PAUSE-RESUME"><a href="#PAUSE-RESUME" class="headerlink" title="PAUSE\RESUME"></a>PAUSE\RESUME</h3>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基本命令说明</title>
    <url>/2018/05/28/Linux/Linux_DockerCommands/</url>
    <content><![CDATA[<p>docker基础命令的说明。</p>
<span id="more"></span>

<h2 id="Docker常用命令的说明"><a href="#Docker常用命令的说明" class="headerlink" title="Docker常用命令的说明"></a>Docker常用命令的说明</h2><h3 id="Docker-Pull"><a href="#Docker-Pull" class="headerlink" title="Docker Pull"></a>Docker Pull</h3><p>\ 下载一个Image  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker pull nginx:lastest  
Using default tag: latest  
Trying to pull repository docker.io&#x2F;library&#x2F;nginx ...   
sha256:0fb320e2a1b1620b4905facb3447e3d84ad36da0b2c8aa8fe3a5a81d1187b884: Pulling from docker.io&#x2F;library&#x2F;nginx
Digest: sha256:0fb320e2a1b1620b4905facb3447e3d84ad36da0b2c8aa8fe3a5a81d1187b884
Status: Image is up to date for docker.io&#x2F;nginx:latest</code></pre>

<h3 id="Docker-Push"><a href="#Docker-Push" class="headerlink" title="Docker Push"></a>Docker Push</h3><p>\ 上传一个Image  </p>
<h3 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h3><p>\ 启动一个Container  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker run nginx</code></pre>

<h3 id="Docker-Kill"><a href="#Docker-Kill" class="headerlink" title="Docker Kill"></a>Docker Kill</h3><p>\ 结束一个Container  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker kill flamboyant_thompson  </code></pre>

<h3 id="Docker-System-Prune"><a href="#Docker-System-Prune" class="headerlink" title="Docker System Prune"></a>Docker System Prune</h3><p>\ 清理Docker的无用文件,包括未使用的容器和不具有Dangling的镜像(不具有启动能力的Image)  </p>
<h3 id="Docker-Images"><a href="#Docker-Images" class="headerlink" title="Docker Images"></a>Docker Images</h3><p>\ 列出所有的docker images</p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker images
ONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                    NAMES
1cca834eb80c        nginx                      &quot;nginx -g &#39;daemon ...&quot;   57 seconds ago      Up 56 seconds       80&#x2F;tcp                   flamboyant_thompson
769aefe85e29        achabill&#x2F;lh-toolkit        &quot;dockerize -wait t...&quot;   3 hours ago         Up 3 hours          0.0.0.0:8080-&gt;8080&#x2F;tcp   sad_payne
93431e5f2f66        achabill&#x2F;lh-mysql:latest   &quot;docker-entrypoint...&quot;   3 hours ago         Up 3 hours          0.0.0.0:3308-&gt;3306&#x2F;tcp   brave_mcclintock</code></pre>

<h3 id="Docker-search"><a href="#Docker-search" class="headerlink" title="Docker search"></a>Docker search</h3><p>\ 搜索特定名称的image  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker search nginx
INDEX        NAME                                                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
docker.io    docker.io&#x2F;nginx                                                  Official build of Nginx.                        8564      [OK]       
docker.io    docker.io&#x2F;nginx                                                  Official build of Nginx.                        8564      [OK]       
docker.io    docker.io&#x2F;jwilder&#x2F;nginx-proxy                                    Automated Nginx reverse proxy for docker c...   1334                 [OK]
docker.io    docker.io&#x2F;jwilder&#x2F;nginx-proxy                                    Automated Nginx reverse proxy for docker c...   1334                 [OK]
docker.io    docker.io&#x2F;richarvey&#x2F;nginx-php-fpm                                Container running Nginx + PHP-FPM capable ...   547                  [OK]
docker.io    docker.io&#x2F;richarvey&#x2F;nginx-php-fpm                                Container running Nginx + PHP-FPM capable ...   547                  [OK]
docker.io    docker.io&#x2F;jrcs&#x2F;letsencrypt-nginx-proxy-companion                 LetsEncrypt container to use with nginx as...   367                  [OK]
docker.io    docker.io&#x2F;jrcs&#x2F;letsencrypt-nginx-proxy-companion                 LetsEncrypt container to use with nginx as...   367                  [OK]
docker.io    docker.io&#x2F;kong                                                   Open-source Microservice &amp; API Management ...   187       [OK]       
docker.io    docker.io&#x2F;kong                                                   Open-source Microservice &amp; API Management ...   187       [OK]       
docker.io    docker.io&#x2F;webdevops&#x2F;php-nginx                                    Nginx with PHP-FPM                              103                  [OK]
docker.io    docker.io&#x2F;webdevops&#x2F;php-nginx                                    Nginx with PHP-FPM                              103                  [OK]
docker.io    docker.io&#x2F;kitematic&#x2F;hello-world-nginx                            A light-weight nginx container that demons...   98                   
docker.io    docker.io&#x2F;kitematic&#x2F;hello-world-nginx                            A light-weight nginx container that demons...   98                   
docker.io    docker.io&#x2F;bitnami&#x2F;nginx                                          Bitnami nginx Docker Image                      50                   [OK]
docker.io    docker.io&#x2F;bitnami&#x2F;nginx                                          Bitnami nginx Docker Image                      50                   [OK]
docker.io    docker.io&#x2F;zabbix&#x2F;zabbix-web-nginx-mysql                          Zabbix frontend based on Nginx web-server ...   50                   [OK]
docker.io    docker.io&#x2F;zabbix&#x2F;zabbix-web-nginx-mysql                          Zabbix frontend based on Nginx web-server ...   50                   [OK]
docker.io    docker.io&#x2F;1and1internet&#x2F;ubuntu-16-nginx-php-phpmyadmin-mysql-5   ubuntu-16-nginx-php-phpmyadmin-mysql-5          35                   [OK]
docker.io    docker.io&#x2F;1and1internet&#x2F;ubuntu-16-nginx-php-phpmyadmin-mysql-5   ubuntu-16-nginx-php-phpmyadmin-mysql-5          35                   [OK]
docker.io    docker.io&#x2F;linuxserver&#x2F;nginx                                      An Nginx container, brought to you by Linu...   35                   
docker.io    docker.io&#x2F;linuxserver&#x2F;nginx                                      An Nginx container, brought to you by Linu...   35                   
docker.io    docker.io&#x2F;tobi312&#x2F;rpi-nginx                                      NGINX on Raspberry Pi &#x2F; armhf                   19                   [OK]
docker.io    docker.io&#x2F;tobi312&#x2F;rpi-nginx                                      NGINX on Raspberry Pi &#x2F; armhf                   19                   [OK]
docker.io    docker.io&#x2F;nginxdemos&#x2F;nginx-ingress                               NGINX Ingress Controller for Kubernetes . ...   11                   
docker.io    docker.io&#x2F;nginxdemos&#x2F;nginx-ingress                               NGINX Ingress Controller for Kubernetes . ...   11                   
docker.io    docker.io&#x2F;blacklabelops&#x2F;nginx                                    Dockerized Nginx Reverse Proxy Server.          9                    [OK]
docker.io    docker.io&#x2F;blacklabelops&#x2F;nginx                                    Dockerized Nginx Reverse Proxy Server.          9                    [OK]
docker.io    docker.io&#x2F;wodby&#x2F;drupal-nginx                                     Nginx for Drupal container image                9                    [OK]
docker.io    docker.io&#x2F;wodby&#x2F;drupal-nginx                                     Nginx for Drupal container image                9                    [OK]
docker.io    docker.io&#x2F;webdevops&#x2F;nginx                                        Nginx container                                 8                    [OK]
docker.io    docker.io&#x2F;webdevops&#x2F;nginx                                        Nginx container                                 8                    [OK]
docker.io    docker.io&#x2F;centos&#x2F;nginx-18-centos7                                Platform for running nginx 1.8 or building...   6                    
docker.io    docker.io&#x2F;centos&#x2F;nginx-18-centos7                                Platform for running nginx 1.8 or building...   6                    
docker.io    docker.io&#x2F;nginxdemos&#x2F;hello                                       NGINX webserver that serves a simple page ...   6                    [OK]
docker.io    docker.io&#x2F;nginxdemos&#x2F;hello                                       NGINX webserver that serves a simple page ...   6                    [OK]
docker.io    docker.io&#x2F;1science&#x2F;nginx                                         Nginx Docker images that include Consul Te...   4                    [OK]
docker.io    docker.io&#x2F;1science&#x2F;nginx                                         Nginx Docker images that include Consul Te...   4                    [OK]
docker.io    docker.io&#x2F;centos&#x2F;nginx-112-centos7                               Platform for running nginx 1.12 or buildin...   3                    
docker.io    docker.io&#x2F;behance&#x2F;docker-nginx                                   Provides base OS, patches and stable nginx...   2                    [OK]
docker.io    docker.io&#x2F;behance&#x2F;docker-nginx                                   Provides base OS, patches and stable nginx...   2                    [OK]
docker.io    docker.io&#x2F;pebbletech&#x2F;nginx-proxy                                 nginx-proxy sets up a container running ng...   2                    [OK]
docker.io    docker.io&#x2F;pebbletech&#x2F;nginx-proxy                                 nginx-proxy sets up a container running ng...   2                    [OK]
docker.io    docker.io&#x2F;toccoag&#x2F;openshift-nginx                                Nginx reverse proxy for Nice running on sa...   1                    [OK]
docker.io    docker.io&#x2F;toccoag&#x2F;openshift-nginx                                Nginx reverse proxy for Nice running on sa...   1                    [OK]
docker.io    docker.io&#x2F;travix&#x2F;nginx                                           NGinx reverse proxy                             1                    [OK]
docker.io    docker.io&#x2F;travix&#x2F;nginx                                           NGinx reverse proxy                             1                    [OK]
docker.io    docker.io&#x2F;ansibleplaybookbundle&#x2F;nginx-apb                        An APB to deploy NGINX                          0                    [OK]
docker.io    docker.io&#x2F;mailu&#x2F;nginx                                            Mailu nginx frontend                            0                    [OK]
docker.io    docker.io&#x2F;mailu&#x2F;nginx                                            Mailu nginx frontend                            0                    [OK]
redhat.com   registry.access.redhat.com&#x2F;3scale-amp20-beta&#x2F;apicast-gateway     3scale&#39;s API gateway (APIcast) is an OpenR...   0                    
redhat.com   registry.access.redhat.com&#x2F;3scale-amp20&#x2F;apicast-gateway          3scale&#39;s API gateway (APIcast) is an OpenR...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhamp10&#x2F;apicast-gateway               3scale&#39;s API gateway (APIcast) is an OpenR...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhmap43&#x2F;wildcard-proxy                RHMAP Docker image that provides mapping a...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhmap44&#x2F;wildcard-proxy                RHMAP Docker image that provides mapping a...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhmap45&#x2F;wildcard-proxy                RHMAP image that provides mapping and prox...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhmap46&#x2F;wildcard-proxy                RHMAP image that provides mapping and prox...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhscl&#x2F;nginx-110-rhel7                 Nginx container image that delivers an ngi...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhscl&#x2F;nginx-112-rhel7                 Nginx is a web server and a reverse proxy ...   0                    
redhat.com   registry.access.redhat.com&#x2F;rhscl&#x2F;nginx-16-rhel7                  Nginx 1.6 server and a reverse proxy server     0                    
redhat.com   registry.access.redhat.com&#x2F;rhscl&#x2F;nginx-18-rhel7                  Nginx 1.8 server and a reverse proxy server     0                    </code></pre>

<h3 id="Docker-Ps"><a href="#Docker-Ps" class="headerlink" title="Docker Ps"></a>Docker Ps</h3><p>\ 列出docker正在运行的Container  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker ps 
CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                    NAMES
1cca834eb80c        nginx                      &quot;nginx -g &#39;daemon ...&quot;   57 seconds ago      Up 56 seconds       80&#x2F;tcp                   flamboyant_thompson
769aefe85e29        achabill&#x2F;lh-toolkit        &quot;dockerize -wait t...&quot;   3 hours ago         Up 3 hours          0.0.0.0:8080-&gt;8080&#x2F;tcp   sad_payne
93431e5f2f66        achabill&#x2F;lh-mysql:latest   &quot;docker-entrypoint...&quot;   3 hours ago         Up 3 hours          0.0.0.0:3308-&gt;3306&#x2F;tcp   brave_mcclintock</code></pre>

<h3 id="Docker-Container-Ls"><a href="#Docker-Container-Ls" class="headerlink" title="Docker Container Ls"></a>Docker Container Ls</h3><p>\ 列出所有存在的Container,包括为运行的和未使用的  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker container ls
CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                    NAMES
1cca834eb80c        nginx                      &quot;nginx -g &#39;daemon ...&quot;   57 seconds ago      Up 56 seconds       80&#x2F;tcp                   flamboyant_thompson
769aefe85e29        achabill&#x2F;lh-toolkit        &quot;dockerize -wait t...&quot;   3 hours ago         Up 3 hours          0.0.0.0:8080-&gt;8080&#x2F;tcp   sad_payne
93431e5f2f66        achabill&#x2F;lh-mysql:latest   &quot;docker-entrypoint...&quot;   3 hours ago         Up 3 hours          0.0.0.0:3308-&gt;3306&#x2F;tcp   brave_mcclintock</code></pre>

<h3 id="Docker-Run-dt"><a href="#Docker-Run-dt" class="headerlink" title="Docker Run -dt"></a>Docker Run -dt</h3><p>\ 运行一个image,给予一个Terminal,放入后台,返回一个ContainerID  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker run -dt -p 80:80 nginx
1cca834eb80cd8467dec6d103bf9072adfb55d8cfb2fdc257af548dc25917868</code></pre>

<h3 id="Docker-Run-it"><a href="#Docker-Run-it" class="headerlink" title="Docker Run -it"></a>Docker Run -it</h3><p>\ 运行一个image,给予一个Terminal,直接进入Container  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker run -it -p 80:80 nginx</code></pre>

<h3 id="Docker-Run-1"><a href="#Docker-Run-1" class="headerlink" title="Docker Run"></a>Docker Run</h3><p>\ 运行一个image,如果本地没有自动到docker仓库检索  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker run nginx</code></pre>

<h3 id="Docker-Run-p"><a href="#Docker-Run-p" class="headerlink" title="Docker Run -p"></a>Docker Run -p</h3><p>\ 运行一个image,指定port的映射关系  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker run -p 80:80 nginx </code></pre>

<h3 id="Docker-Attach"><a href="#Docker-Attach" class="headerlink" title="Docker Attach"></a>Docker Attach</h3><p>\ 进入到某一个Container内部,如果没有shell,无法操作, 输出一片空白  </p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# docker attach flamboyant_thompson
[root@d4a75f165ce6 &#x2F;]#</code></pre>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFile笔记</title>
    <url>/2019/04/24/Linux/Linux_DockerFile-Note/</url>
    <content><![CDATA[<p>Dockerfile的书写规则及Dockerfile的指令说明。</p>
<p>Docker的镜像存储到Overlay2  </p>
<pre class="language-none"><code class="language-none">Docker images ls
    # 查看所有的Docker Images  
Docker exec -it Container_Name &#x2F;bin&#x2F;sh  
    # 将容器启动并执行shell命令行  </code></pre>

<h1 id="Docker-Images"><a href="#Docker-Images" class="headerlink" title="Docker Images"></a>Docker Images</h1><ol>
<li>Docker Images中有启动容器所需要的文件系统及内容，用于启动并创建Docker容器,采用分层机制，最底层为bootfs，之上是rootfs  <ul>
<li>rootfs:Docker的根文件系统，由Kernel挂载为“ReadOnly”模式，而后通过联合挂载技术额外挂在一个可写层 </li>
<li>bootfs:用于系统引导的文件系统，包括bootloader及kernel，容器启动之后自动卸载</li>
</ul>
</li>
<li>Docker Images Layer下层的镜像称为父镜像，最底层的叫做Base Images  </li>
<li>Aufs - Advanced multi-layered unification filesystem  </li>
<li>Overlayfs - 3.18版本被合并到Linux内核   </li>
<li>Docker的分层镜像，除了Aufs，还支持btrfs，devicemapper和vfs  </li>
<li>Docker Registry - Docker daemon自动视图从DockerHub拉取镜像文件  </li>
<li>Docker Registry的分类 <ul>
<li>Sponsor Registry：第三方，提供给客户或Docker社区  </li>
<li>Mirror Registry：第三方，只给客户使用 </li>
<li>Vendor Registry：由发布Docker镜像的供应商提供  </li>
<li>Private Regisry：通过设有防火墙及额外的安全层的私有实体提供</li>
</ul>
</li>
<li>云原生 - 面向云环境的运行了云系统本身的调用的程序。通过环境变量进行配置  </li>
<li>Webhooks - 自动创建镜像  </li>
<li>Quay.io 除了DockerHub其他的镜像仓库  <ul>
<li>docker pull quay.io&#x2F;coreos&#x2F;flannel:latest</li>
</ul>
</li>
</ol>
<h2 id="Docker镜像的保存与恢复"><a href="#Docker镜像的保存与恢复" class="headerlink" title="Docker镜像的保存与恢复"></a>Docker镜像的保存与恢复</h2><pre class="language-none"><code class="language-none">docker save -o myimages.gz IMAGE_NAME1 IMAGE_NAME2 
    # 将多个镜像保存到本地压缩文件  
scp myimages.gz 
    # 传输镜像到其他节点  
docker load -i myimages.gz  
    # 在新的节点加载镜像  </code></pre>
<h1 id="Docker-File"><a href="#Docker-File" class="headerlink" title="Docker File"></a>Docker File</h1><h2 id="DockerFile存在的意义"><a href="#DockerFile存在的意义" class="headerlink" title="DockerFile存在的意义"></a>DockerFile存在的意义</h2><p>docker exec CONTAINER –&gt; vi –&gt; RELOAD<br>Docker的容器不利于我们对需要反复调试的服务进行更改，通过Dockerfile的修改可快速调整容器的配置。</p>
<h2 id="自定义镜像的方法"><a href="#自定义镜像的方法" class="headerlink" title="自定义镜像的方法"></a>自定义镜像的方法</h2><h3 id="基于Docker容器制作镜像"><a href="#基于Docker容器制作镜像" class="headerlink" title="基于Docker容器制作镜像"></a>基于Docker容器制作镜像</h3><ol>
<li>创建你需要的容器，Docker commit命令进行镜像的制作 </li>
<li>docker run –name b1 -it busybox  </li>
<li>mkdir -p &#x2F;data&#x2F;html  </li>
<li>vi &#x2F;data&#x2F;html&#x2F;index.html  </li>
<li>docker commit -p b1 </li>
<li>docker tag IMAGE_ID REPOSITORY:TAG  </li>
<li>docker image ls  </li>
<li>docker image rm IMAGE_TAG</li>
<li>docker imspect – cmd字段自动标志启动自动运行的命令  </li>
<li>更改docker的默认运行命令  </li>
<li>docker commit -p -a ‘Liarlee’ -c ‘CMD [“&#x2F;bin&#x2F;httpd”,”-f”,”-h”,”&#x2F;data&#x2F;html”]’ b1 hayden&#x2F;httpd:v0.2 </li>
<li>docker login -u USERNAME 登录到服务器  </li>
<li>docker push Liarlee&#x2F;httpd</li>
</ol>
<h3 id="基于DockerFile制作DockerImage"><a href="#基于DockerFile制作DockerImage" class="headerlink" title="基于DockerFile制作DockerImage"></a>基于DockerFile制作DockerImage</h3><p>Dockerfile Format  </p>
<ol>
<li># 开头的为注释文字   </li>
<li>INSTRUCTION arguments，采用指令+参数的格式   </li>
<li>Dockerfile执行的时候是从上至下执行的  </li>
<li>第一个非注释行必须是FROM指令</li>
</ol>
<p>.dockerignore文件路径记录，可以通配，打包时忽略list中的文件<br>可以使用环境变量替换<br>BASH SHELL:<br>echo ${NAME:-tom} 给一个变量设置一个默认值<br>echo ${NAME:+tom} 如果变量有数值，强行改为默认值   </p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="- FROM"></a>- FROM</h3><p>FROM指定的镜像将自动拉取作为底层的镜像进行制作;  </p>
<pre class="language-none"><code class="language-none">FROM &lt;repository&gt;[:tag]  
FROM &lt;repository&gt;@&lt;HASH number&gt;  

EXAMPLE:   
FROM centos:latest
    # 使用Centos的最新发行镜像作为底层镜像</code></pre>

<h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="- MAINTAINER"></a>- MAINTAINER</h3><p>提供制作人的信息，废弃不用了，现在使用LABEL  </p>
<pre class="language-none"><code class="language-none">MAINTAINER &quot;LiarLee&lt;Test@LiarLee.com&gt;&quot;</code></pre>

<h3 id="LABEL"><a href="#LABEL" class="headerlink" title="- LABEL"></a>- LABEL</h3><p>LABEL是给镜像指定元数据的命令  </p>
<pre class="language-none"><code class="language-none">LABEL maintainer&#x3D;&quot;LiarLee&lt;Test@LiarLee.com&gt;&quot;</code></pre>

<h3 id="COPY"><a href="#COPY" class="headerlink" title="- COPY"></a>- COPY</h3><p>复制本地文件或目录到镜像文件系统中。  </p>
<pre class="language-none"><code class="language-none">COPY \&lt;src&gt; ... \&lt;dest&gt;  
COPY [&quot;\&lt;src&gt;&quot; ... &quot;\&lt;dest&gt;&quot;]  
\&lt;src&gt; -- 相对路径    
\&lt;dest&gt; -- 绝对路径   

- 指定的src目录，会将目录下的所有文件复制到目的地，但是不会将src复制。
- 如果使用了多个src，或者src使用了通配，目的必须是个目录  
- 如果dest不存在会被自动创建  

COPY &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;passwd
    # 与cp命令相似，复制本地目标文件到容器文件系统中
COPY &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx&#x2F;* &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx&#x2F;
    # 如果目标目录不存在需要先行创建</code></pre>

<h3 id="Docker-Build命令"><a href="#Docker-Build命令" class="headerlink" title="Docker Build命令"></a>Docker Build命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Hayden test<span class="token punctuation">]</span><span class="token comment"># docker build -h</span>
Flag shorthand <span class="token parameter variable">-h</span> has been deprecated, please use <span class="token parameter variable">--help</span>
Usage:	<span class="token function">docker</span> build <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token environment constant">PATH</span> <span class="token operator">|</span> URL <span class="token operator">|</span> -
Build an image from a Dockerfile
Options:
      --add-host list           Add a custom host-to-IP mapping <span class="token punctuation">(</span>host:ip<span class="token punctuation">)</span>
      --build-arg list          Set build-time variables
      --cache-from strings      Images to consider as cache sources
      --cgroup-parent string    Optional parent cgroup <span class="token keyword">for</span> the container
      <span class="token parameter variable">--compress</span>                Compress the build context using <span class="token function">gzip</span>
      --cpu-period int          Limit the CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> period
      --cpu-quota int           Limit the CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> <span class="token function">quota</span>
  -c, --cpu-shares int          CPU shares <span class="token punctuation">(</span>relative weight<span class="token punctuation">)</span>
      --cpuset-cpus string      CPUs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
      --cpuset-mems string      MEMs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
      --disable-content-trust   Skip image verification <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
  -f, <span class="token parameter variable">--file</span> string             Name of the Dockerfile <span class="token punctuation">(</span>Default is <span class="token string">'PATH/Dockerfile'</span><span class="token punctuation">)</span>
      --force-rm                Always remove intermediate containers
      <span class="token parameter variable">--iidfile</span> string          Write the image ID to the <span class="token function">file</span>
      <span class="token parameter variable">--isolation</span> string        Container isolation technology
      <span class="token parameter variable">--label</span> list              Set metadata <span class="token keyword">for</span> an image
  -m, <span class="token parameter variable">--memory</span> bytes            Memory limit
      --memory-swap bytes       Swap limit equal to memory plus swap: <span class="token string">'-1'</span> to <span class="token builtin class-name">enable</span>
                                unlimited swap
      <span class="token parameter variable">--network</span> string          Set the networking mode <span class="token keyword">for</span> the RUN instructions
                                during build <span class="token punctuation">(</span>default <span class="token string">"default"</span><span class="token punctuation">)</span>
      --no-cache                Do not use cache when building the image
      <span class="token parameter variable">--pull</span>                    Always attempt to pull a newer version of the image
  -q, <span class="token parameter variable">--quiet</span>                   Suppress the build output and print image ID on success
      <span class="token parameter variable">--rm</span>                      Remove intermediate containers after a successful
                                build <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
      --security-opt strings    Security options
      --shm-size bytes          Size of /dev/shm
  -t, <span class="token parameter variable">--tag</span> list                Name and optionally a tag <span class="token keyword">in</span> the <span class="token string">'name:tag'</span> <span class="token function">format</span>
      <span class="token parameter variable">--target</span> string           Set the target build stage to build.
      <span class="token parameter variable">--ulimit</span> <span class="token builtin class-name">ulimit</span>           Ulimit options <span class="token punctuation">(</span>default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>制作一个容器，COPY本地的HTML文件到容器文件系统中  </p>
<pre class="language-none"><code class="language-none">[root@Hayden test]# docker build -t busybox-httpd:v0.1-1 .&#x2F;  
Sending build context to Docker daemon  3.072kB  
Step 1&#x2F;3 : FROM busybox:latest  
 ---&gt; d8233ab899d4  
Step 2&#x2F;3 : MAINTAINER &quot;HAYDEN&lt;HAYDEN@lee.com&gt;&quot;  
 ---&gt; Running in d581bd9c9aba  
Removing intermediate container d581bd9c9aba  
 ---&gt; 8137f8096ce4  
Step 3&#x2F;3 : COPY index.html &#x2F;data&#x2F;web&#x2F;html&#x2F;  
 ---&gt; bced33a9e4a4
Successfully built bced33a9e4a4
Successfully tagged busybox-httpd:v0.1-1</code></pre>
<p>查看已经制作完成的镜像</p>
<pre class="language-none"><code class="language-none">[root@Hayden test]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
busybox-httpd       v0.1-1              bced33a9e4a4        17 seconds ago      1.2MB
nginx               latest              881bd08c0b08        3 weeks ago         109MB
busybox             latest              d8233ab899d4        6 weeks ago         1.2MB</code></pre>
<p>运行容器查看结果</p>
<pre class="language-none"><code class="language-none">[root@Hayden test]# docker run --name t1 --rm busybox-httpd:v0.1-1 cat &#x2F;data&#x2F;web&#x2F;html&#x2F;index.html
&lt;h1&gt;Busybox httpd server.&lt;&#x2F;h1&gt;</code></pre>

<h3 id="ADD"><a href="#ADD" class="headerlink" title="- ADD"></a>- ADD</h3><p>用于添加URL链接或本地文件到镜像中，支持tar包的自动解压。  </p>
<pre class="language-none"><code class="language-none">ADD &lt;src&gt; ... &lt;dest&gt;  
ADD [&quot;&lt;src&gt;&quot; ... &quot;&lt;dest&gt;&quot;]  
ADD命令可以支持URL，在打包镜像的时候下载并打包进去
ADD命令支持对本地的tar文件打包进镜像的时候进行解压  

EXAMPLE:  
ADD nginx.org&#x2F;download&#x2F;nginx-1.15.12.tar.gz  
    # 指令自动打包进入镜像，并同时解压tar包</code></pre>

<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="- WORKDIR"></a>- WORKDIR</h3><pre class="language-none"><code class="language-none">WORKDIR &lt;dirpath&gt;  
指定当前的工作目录

EXAMPLE:
WORKDIR &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx
    # 制定后续操作的工作目录，以调整指令中的相对路径</code></pre>

<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="- VOLUME"></a>- VOLUME</h3><pre class="language-none"><code class="language-none">VOLUME \&lt;mountpoint&gt;  
VOLUME [&quot;\&lt;mountpoint&gt;&quot;]  
VOLUME指定挂载的卷  
只能设置容器中的卷目录，不能制定宿主机的目录，只能使用Docker自动管理的卷 </code></pre>

<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="- EXPOSE"></a>- EXPOSE</h3><pre class="language-none"><code class="language-none">EXPOSE &lt;port&gt;[&#x2F;&lt;protocol&gt;]   
指定的协议为tcp or udp , defaults option is TCP  
可以一次指定多个端口  </code></pre>

<h3 id="ENV"><a href="#ENV" class="headerlink" title="- ENV"></a>- ENV</h3><pre class="language-none"><code class="language-none">ENV &lt;key&gt; &lt;value1&gt; &lt;value2&gt; &lt;value3&gt; &lt;value4&gt;   
ENV &lt;key&gt;&#x3D;&lt;value&gt; &lt;key&gt;&#x3D;&lt;value&gt;...  
在Dockerfile中指定环境变量，可将指定的变量在Docker run的时候进行手动的指定，
影响运行容器时候的命令执行结果，但是不影响docker build的运行结果  </code></pre>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>EC2 路由表以及多网卡相关问题</title>
    <url>/2023/07/25/Linux/Linux_EC2MultiNetworkCase/</url>
    <content><![CDATA[<p>在EC2实例中， 可以使用多个不同的网卡， 但是虚拟网卡其实是共享实例整体带宽的。 假如EC2实例本身有10Gbps的带宽， 那么无论多少个网卡都应该只能有10Gbps的带宽， 其实添加了多个也不会扩展网络上限。 </p>
<p>但是某些大规格的实例会有这种情况， 需要添加多个网卡，并且底层其实提供了多个NetworkCard。 这种情况少见， 但是确实有。 </p>
<p>如果是物理的机器， 那么最好的办法就是链路聚合， 将多个网卡合并使用来扩充这个物理服务器的网络能力。 </p>
<p>这样的实例添加网卡之后其实会有一定的难度，描述一下这个场景： </p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>一台ec2 ， 三张网卡， OS是 Ubuntu 18.04 ， 三张网卡分别是 ens5 ens6 ens7 , 实例中命令展示网卡如下 ： </p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:~# ip ad
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1&#x2F;8 scope host lo
       valid_lft forever preferred_lft forever
2: ens5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP group default qlen 1000
    link&#x2F;ether 02:4d:73:35:16:8a brd ff:ff:ff:ff:ff:ff
    inet 172.31.43.121&#x2F;20 brd 172.31.47.255 scope global dynamic ens5
       valid_lft 1957sec preferred_lft 1957sec
3: ens6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP group default qlen 1000
    link&#x2F;ether 02:5d:02:b4:37:fa brd ff:ff:ff:ff:ff:ff
    inet 172.31.37.95&#x2F;20 brd 172.31.47.255 scope global dynamic ens6
       valid_lft 1955sec preferred_lft 1955sec
4: ens7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP group default qlen 1000
    link&#x2F;ether 02:cf:10:d8:12:80 brd ff:ff:ff:ff:ff:ff
    inet 172.31.40.130&#x2F;20 brd 172.31.47.255 scope global dynamic ens7
       valid_lft 1956sec preferred_lft 1956sec</code></pre>

<p>三张网卡中， ens5上面有一个公网ip地址的绑定， elastic ip , 操作系统看不到， 但是ens5 能找到公网IP地址， 其他网卡都不能。</p>
<h2 id="多网卡路由策略配置"><a href="#多网卡路由策略配置" class="headerlink" title="多网卡路由策略配置"></a>多网卡路由策略配置</h2><p>多网卡的情况下，<strong>手动配置了所有网卡的路由策略之后</strong>，公网访问没了， 看看 ip route show： </p>
<h3 id="看路由表"><a href="#看路由表" class="headerlink" title="看路由表"></a>看路由表</h3><pre class="language-none"><code class="language-none">root@ip-172-31-43-121:~# ip r s
default via 172.31.32.1 dev ens7 proto dhcp src 172.31.40.130 metric 100
default via 172.31.32.1 dev ens6 proto dhcp src 172.31.37.95 metric 100
default via 172.31.32.1 dev ens5 proto dhcp src 172.31.43.121 metric 100
172.31.32.0&#x2F;20 dev ens7 proto kernel scope link src 172.31.40.130
172.31.32.0&#x2F;20 dev ens6 proto kernel scope link src 172.31.37.95
172.31.32.0&#x2F;20 dev ens5 proto kernel scope link src 172.31.43.121
172.31.32.1 dev ens7 proto dhcp scope link src 172.31.40.130 metric 100
172.31.32.1 dev ens6 proto dhcp scope link src 172.31.37.95 metric 100
172.31.32.1 dev ens5 proto dhcp scope link src 172.31.43.121 metric 100

ip route show 命令显示的是系统路由表，也就是记录了目的网络和下一跳地址的信息的路由表。它的每个字段的含义是：

default 表示这个路由项是一个默认路由，也就是当没有匹配目的地址的路由项时，就使用这个路由项来发送数据包。
via 表示这个路由项的下一跳地址，也就是数据包要经过的网关地址。
dev 表示这个路由项对应的网卡设备名称，例如 lo, eth0, ens5 等。
proto 表示这个路由项的协议来源，例如 kernel, static, dhcp 等。
src 表示这个路由项的源地址，也就是本机发送数据包时使用的IP地址。
metric 表示这个路由项的度量值，也就是到达目的网络所需的跳数或开销。</code></pre>

<p>这里面显示 我有三个默认路由， 他们的权重是一样的， 那么按照通常的逻辑， 哪个条目在靠前就会把数据包交给谁， 这时候问题出现了。 </p>
<blockquote>
<p>如果我的主网卡上面有公网IP地址， 这时候我去访问公网例如baidu， 会发现这个数据是出不去的， 因为默认匹配了第一个条目之后， 从 ens7 这个没有公网ip地址绑定的网卡走了。</p>
</blockquote>
<h3 id="看抓包"><a href="#看抓包" class="headerlink" title="看抓包"></a>看抓包</h3><p>测试一下， 直接开一个Ping命令在后台， <code>ping www.baidu.com </code> ， 另一个窗口开 <code>tcpdump -i any icmp</code>看结果。</p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:~# tcpdump -i any icmp -nn
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes
14:49:31.480896 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 12, length 64
14:49:32.504867 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 13, length 64
14:49:33.528873 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 14, length 64
14:49:34.552872 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 15, length 64
14:49:35.576877 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 16, length 64
14:49:36.600873 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 17, length 64
14:49:37.624863 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 18, length 64
14:49:38.648871 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 19, length 64
14:49:39.672865 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 20, length 64
14:49:40.696876 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 21, length 64
14:49:41.720872 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 22, length 64
14:49:42.744873 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 23, length 64
14:49:43.768868 IP 172.31.40.130 &gt; 39.156.66.14: ICMP echo request, id 15074, seq 24, length 64
</code></pre>

<p>能直接看到这个数据包是从 ens7 的网卡出去的， 确实匹配到了默认的路由条目， 第一条直接发走， 这本来是正确的逻辑， 但是一旦我需要访问公网且该实例的ens5才是公网ip的指定网卡， 那么这个数据包就只有出去， 没有回来的了。</p>
<p>这确实避免了VPC内部访问的网络限制问题， 但是公网的访问也没有了。 这是一个路由条目的优先级问题， 基于这个问题应该如何修复呢？ </p>
<h3 id="调整路由条目的优先级"><a href="#调整路由条目的优先级" class="headerlink" title="调整路由条目的优先级"></a>调整路由条目的优先级</h3><p>调整默认路由的优先级， 让数据匹配默认路由的时候优先匹配ens5的条目。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">150</span>  <span class="token function">ip</span> route del default via <span class="token number">172.31</span>.32.1 dev ens5 proto dhcp src <span class="token number">172.31</span>.43.121 metric <span class="token number">100</span>
<span class="token number">151</span>  <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">172.31</span>.32.1 dev ens5 proto dhcp src <span class="token number">172.31</span>.43.121 metric <span class="token number">10</span></code></pre>

<p>上面的命令可以将ens5 的默认路由metric 设置成 10 ，整体的路由表会变成这样： </p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:&#x2F;etc&#x2F;netplan# ip r s
default via 172.31.32.1 dev ens5 proto dhcp src 172.31.43.121 metric 10
default via 172.31.32.1 dev ens7 proto dhcp src 172.31.40.130 metric 100
default via 172.31.32.1 dev ens6 proto dhcp src 172.31.37.95 metric 100
172.31.32.0&#x2F;20 dev ens7 proto kernel scope link src 172.31.40.130
172.31.32.0&#x2F;20 dev ens6 proto kernel scope link src 172.31.37.95
172.31.32.0&#x2F;20 dev ens5 proto kernel scope link src 172.31.43.121
172.31.32.1 dev ens7 proto dhcp scope link src 172.31.40.130 metric 100
172.31.32.1 dev ens6 proto dhcp scope link src 172.31.37.95 metric 100
172.31.32.1 dev ens5 proto dhcp scope link src 172.31.43.121 metric 100
</code></pre>

<p>这时候再ping <a href="http://www.baidu.com/">www.baidu.com</a> 的结果就正常了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-43-121:/etc/netplan<span class="token comment"># ping www.baidu.com</span>
PING www.a.shifen.com <span class="token punctuation">(</span><span class="token number">39.156</span>.66.18<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">39.156</span>.66.18 <span class="token punctuation">(</span><span class="token number">39.156</span>.66.18<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">5.59</span> ms
<span class="token number">64</span> bytes from <span class="token number">39.156</span>.66.18 <span class="token punctuation">(</span><span class="token number">39.156</span>.66.18<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">5.59</span> ms
<span class="token number">64</span> bytes from <span class="token number">39.156</span>.66.18 <span class="token punctuation">(</span><span class="token number">39.156</span>.66.18<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">5.59</span> ms
<span class="token number">64</span> bytes from <span class="token number">39.156</span>.66.18 <span class="token punctuation">(</span><span class="token number">39.156</span>.66.18<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">5.60</span> ms
^C
--- www.a.shifen.com <span class="token function">ping</span> statistics ---
<span class="token number">4</span> packets transmitted, <span class="token number">4</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 3004ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">5.590</span>/5.596/5.608/0.091 ms</code></pre>

<p>这时候如果重启网络服务就会发现， 这三个默认条目路由的 metric 又恢复了 100 ， 并不能持久生效。</p>
<h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><p>更改这个网卡的配置文件<code>/etc/netplan/50-cloud-init.yaml</code></p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">root@ip<span class="token punctuation">-</span>172<span class="token punctuation">-</span>31<span class="token punctuation">-</span>43<span class="token punctuation">-</span>121<span class="token punctuation">:</span>/etc/netplan<span class="token comment"># cat /etc/netplan/50-cloud-init.yaml</span>
<span class="token comment"># This file is generated from information provided by the datasource.  Changes</span>
<span class="token comment"># to it will not persist across an instance reboot.  To disable cloud-init's</span>
<span class="token comment"># network configuration capabilities, write a file</span>
<span class="token comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span>
<span class="token comment"># network: &#123;config: disabled&#125;</span>
<span class="token key atrule">network</span><span class="token punctuation">:</span>
    <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">ethernets</span><span class="token punctuation">:</span>
        <span class="token key atrule">ens5</span><span class="token punctuation">:</span>
            <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
            <span class="token key atrule">match</span><span class="token punctuation">:</span>
                <span class="token key atrule">macaddress</span><span class="token punctuation">:</span> 02<span class="token punctuation">:</span>4d<span class="token punctuation">:</span>73<span class="token punctuation">:</span>35<span class="token punctuation">:</span>16<span class="token punctuation">:</span>8a
            <span class="token key atrule">set-name</span><span class="token punctuation">:</span> ens5
            <span class="token key atrule">routes</span><span class="token punctuation">:</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 0.0.0.0/0 <span class="token comment"># 主路由表默认路由条目权重</span>
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 172.31.32.1
               <span class="token key atrule">metric</span><span class="token punctuation">:</span> <span class="token number">10</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 0.0.0.0/0  <span class="token comment"># 策略路由</span>
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 172.31.32.1
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 172.31.43.121 <span class="token comment"># 策略路由</span>
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 0.0.0.0
               <span class="token key atrule">scope</span><span class="token punctuation">:</span> link
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span>
            <span class="token key atrule">routing-policy</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> 172.31.43.121
                <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span></code></pre>

<p>执行 <code>netplan try</code>测试</p>
<p>执行 <code>netplan apply</code> 确认生效</p>
<hr>
<p>这个时候再看路由表， 输出结果： </p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:&#x2F;etc&#x2F;netplan# ip r s
default via 172.31.32.1 dev ens5 proto static metric 10
default via 172.31.32.1 dev ens7 proto dhcp src 172.31.40.130 metric 100
default via 172.31.32.1 dev ens6 proto dhcp src 172.31.37.95 metric 100
default via 172.31.32.1 dev ens5 proto dhcp src 172.31.43.121 metric 100
172.31.32.0&#x2F;20 dev ens7 proto kernel scope link src 172.31.40.130
172.31.32.0&#x2F;20 dev ens6 proto kernel scope link src 172.31.37.95
172.31.32.0&#x2F;20 dev ens5 proto kernel scope link src 172.31.43.121
172.31.32.1 dev ens7 proto dhcp scope link src 172.31.40.130 metric 100
172.31.32.1 dev ens6 proto dhcp scope link src 172.31.37.95 metric 100
172.31.32.1 dev ens5 proto dhcp scope link src 172.31.43.121 metric 100
</code></pre>

<p>这时候这个实例的内外网络都是通的了。</p>
<h3 id="最优配置"><a href="#最优配置" class="headerlink" title="最优配置"></a>最优配置</h3><p>对于Ubuntu最佳的配置是： </p>
<p>ens5 设置为 dhcp。</p>
<p>ens6， ens7 设置为 static ip ， 不从DHCP学习路由条目。这样默认的路由条目只有一条， 就是指向ens5的条目， 所有去往公网的流量会匹配到这个default条目， 然后走 ens5. </p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ens6</span><span class="token punctuation">:</span>
    <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">dhcp4-overrides</span><span class="token punctuation">:</span> <span class="token comment"># 这个参数没尝试， 感觉是需要的，调整一下学习来的路由的优先级</span>
        <span class="token key atrule">route-metric</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token comment"># 不指定metric也可以指定         use-routes: false 来关闭学习默认路由。</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 172.31.59.199/20
    <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">match</span><span class="token punctuation">:</span>
        <span class="token key atrule">macaddress</span><span class="token punctuation">:</span> 02<span class="token punctuation">:</span>64<span class="token punctuation">:</span>69<span class="token punctuation">:</span>51<span class="token punctuation">:</span>00<span class="token punctuation">:</span>f2
    <span class="token key atrule">set-name</span><span class="token punctuation">:</span> ens6
    <span class="token key atrule">routes</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 0.0.0.0/0
       <span class="token key atrule">via</span><span class="token punctuation">:</span> 172.31.48.1
       <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
     <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 172.31.59.199
       <span class="token key atrule">via</span><span class="token punctuation">:</span> 0.0.0.0
       <span class="token key atrule">scope</span><span class="token punctuation">:</span> link
       <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
    <span class="token key atrule">routing-policy</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> 172.31.59.199
        <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
<span class="token key atrule">ens7</span><span class="token punctuation">:</span>   <span class="token comment"># 同上</span>
</code></pre>

<p>但是就像之前的描述， 这已经可以达成最终的目标了， 这还是感觉不是最好的方法， 最好的方法是bonding， 直接将多个网卡链路聚合， 才能更好的利用好底层多个物理网卡的特性。</p>
<h2 id="配置Bonding"><a href="#配置Bonding" class="headerlink" title="配置Bonding"></a>配置Bonding</h2><p>待补充。</p>
<h2 id="如何排查路由表条目"><a href="#如何排查路由表条目" class="headerlink" title="如何排查路由表条目"></a>如何排查路由表条目</h2><ol>
<li><p>首先应该查看的是 ip rule list , 这里面定义的是 所有路由表的优先级。 </p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:&#x2F;etc&#x2F;iproute2# ip rule list
0:	from all lookup local
0:	from 172.31.40.130 lookup 1002
0:	from 172.31.37.95 lookup 1001
0:	from 172.31.43.121 lookup 1000
32766:	from all lookup main
32767:	from all lookup default
</code></pre>

<p>查看tcp数据包中的<strong>目的地址</strong>， 按照优先级顺序匹配条目，依次查。</p>
<p>local table 是内核维护本地网络， 无法更改， 并且所有的条目都先匹配local。</p>
</li>
<li><p>查看 local table 中的条目。</p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:~# ip route show table local
broadcast 127.0.0.0 dev lo proto kernel scope link src 127.0.0.1
local 127.0.0.0&#x2F;8 dev lo proto kernel scope host src 127.0.0.1
local 127.0.0.1 dev lo proto kernel scope host src 127.0.0.1
broadcast 127.255.255.255 dev lo proto kernel scope link src 127.0.0.1
broadcast 172.31.32.0 dev ens7 proto kernel scope link src 172.31.40.130
broadcast 172.31.32.0 dev ens6 proto kernel scope link src 172.31.37.95
broadcast 172.31.32.0 dev ens5 proto kernel scope link src 172.31.43.121
local 172.31.37.95 dev ens6 proto kernel scope host src 172.31.37.95
local 172.31.40.130 dev ens7 proto kernel scope host src 172.31.40.130
local 172.31.43.121 dev ens5 proto kernel scope host src 172.31.43.121
broadcast 172.31.47.255 dev ens7 proto kernel scope link src 172.31.40.130
broadcast 172.31.47.255 dev ens6 proto kernel scope link src 172.31.37.95
broadcast 172.31.47.255 dev ens5 proto kernel scope link src 172.31.43.121

ip route show table local 命令显示的是本地路由表，也就是保存本地接口地址，广播地址，NAT地址等信息的路由表。它的每一个字段的含义是：
 
broadcast 表示这个路由项是一个广播地址，也就是可以向同一网段内的所有主机发送数据包的地址。
local 表示这个路由项是一个本地地址，也就是本机自身的IP地址。
 
dev 表示这个路由项对应的网卡设备名称，例如 lo, eth0, ens5 等。
 
proto 表示这个路由项的协议来源，例如 kernel, static, dhcp 等。
 
scope 表示这个路由项的作用范围，例如 host, link, global 等。

src 表示这个路由项的源地址，也就是本机发送数据包时使用的IP地址。
</code></pre>

<p>这个表格中， 例如 </p>
<blockquote>
<p>local 172.31.37.95 dev ens6 proto kernel scope host src 172.31.37.95 </p>
</blockquote>
<p>如果匹配到了目的地址是  172.31.37.95  那么就由 dev ens6 来处理这个数据， 是通过kernel记录的， 是一个操作系统范围内的链路， 这个条目表示， 匹配到这个路由条目的数据报文会被交给dev dns6 来进行处理。 </p>
<p>如果想知道具体这个地址会匹配到哪个路由条目， 可以使用命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-43-121:/etc/iproute2<span class="token comment"># ip route get 39.156.66.14</span>
<span class="token number">39.156</span>.66.14 via <span class="token number">172.31</span>.32.1 dev ens5 src <span class="token number">172.31</span>.43.121 uid <span class="token number">0</span>
    cache
root@ip-172-31-43-121:/etc/iproute2<span class="token comment"># ip route get 172.31.40.130</span>
<span class="token builtin class-name">local</span> <span class="token number">172.31</span>.40.130 dev lo table <span class="token builtin class-name">local</span> src <span class="token number">172.31</span>.40.130 uid <span class="token number">0</span>
    cache <span class="token operator">&lt;</span>local<span class="token operator">></span>
</code></pre>
</li>
<li><p>如果local没有匹配到， 例如 访问百度的地址， 会跳转到 策略路由表， 当然我配置的策略路由表其实也没有匹配到这些条目， 因此开始查 main</p>
<pre class="language-none"><code class="language-none">root@ip-172-31-43-121:&#x2F;etc&#x2F;iproute2# ip r s t main
default via 172.31.32.1 dev ens5 proto static metric 10
default via 172.31.32.1 dev ens7 proto dhcp src 172.31.40.130 metric 100
default via 172.31.32.1 dev ens6 proto dhcp src 172.31.37.95 metric 100
default via 172.31.32.1 dev ens5 proto dhcp src 172.31.43.121 metric 100
172.31.32.0&#x2F;20 dev ens7 proto kernel scope link src 172.31.40.130
172.31.32.0&#x2F;20 dev ens6 proto kernel scope link src 172.31.37.95
172.31.32.0&#x2F;20 dev ens5 proto kernel scope link src 172.31.43.121
172.31.32.1 dev ens7 proto dhcp scope link src 172.31.40.130 metric 100
172.31.32.1 dev ens6 proto dhcp scope link src 172.31.37.95 metric 100
172.31.32.1 dev ens5 proto dhcp scope link src 172.31.43.121 metric 100
</code></pre>

<p>由上面的查询结果可以看出， 匹配到了main表的第一条。直接给了ens5 ， 数据出去了。</p>
</li>
</ol>
<h2 id="额外的问题"><a href="#额外的问题" class="headerlink" title="额外的问题"></a>额外的问题</h2><ol>
<li><p>具体匹配的规则是怎么实现的， src 地址到底是匹配规则还是 匹配后报文的源地址。</p>
<blockquote>
<p>src 后面的地址是发出报文的src ip， 表示匹配这个路由条目的报文都是这个地址发出去的。</p>
</blockquote>
</li>
<li><p>三个条目的权重相同的时候， 也不是全部的报文都匹配了默认的第一个规则， 而是周期的匹配到ens6并且尝试访问几次百度， 然后失败， 不知道为啥。</p>
<p>如图： </p>
<p>待</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Network, EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 安装记录</title>
    <url>/2019/09/11/Linux/Linux_ElasticSearch-01/</url>
    <content><![CDATA[<p>ElasticSearch的安装过程。</p>
<h1 id="准备源码包"><a href="#准备源码包" class="headerlink" title="准备源码包"></a>准备源码包</h1><ol>
<li>需要下载的包有三个：<a href="https://www.elastic.co/cn/downloads/">网站地址</a><ul>
<li>ElasticSearch- 分布式、RESTful 风格的搜索和分析。&#x2F;usr&#x2F;local&#x2F;src&#x2F;elasticsearch</li>
<li>Logstash - 采集、转换、充实，然后输出。&#x2F;usr&#x2F;local&#x2F;src&#x2F;logstash</li>
<li>Kibana - 实现数据可视化。在 Elastic Stack 中进行导航。&#x2F;usr&#x2F;local&#x2F;src&#x2F;kibana</li>
</ul>
</li>
</ol>
<h1 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h1><ol>
<li>解压下载的安装包<ol>
<li>tar zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz</li>
<li>tar zxvf kibana-7.3.1-linux-x86_64.tar.gz</li>
<li>tar zxvf logstash-7.3.1.tar.gz</li>
</ol>
</li>
<li>修改系统参数<ul>
<li>vim &#x2F;etc&#x2F;sysctl.conf</li>
<li>fs.file-max&#x3D;65535</li>
<li>vm.max_map_count&#x3D;262144</li>
</ul>
</li>
<li>sysctl -p : 重新读取配置文件中的参数，更新的条目会显示在命令执行结果中。</li>
<li>vim &#x2F;etc&#x2F;security&#x2F;limits.conf <pre class="language-none"><code class="language-none">* soft nofile 65536
* hard nofile 131072
* soft noproc 4096
* hard noproc 4096	</code></pre></li>
<li>保存退出。</li>
<li>建立elk用户 <pre class="language-none"><code class="language-none">useradd elk -p &quot;YOUR-PASSWD&quot;</code></pre></li>
<li>将&#x2F;usr&#x2F;local&#x2F;src&#x2F;elasticsearch目录的权限给elk用户。 <pre class="language-none"><code class="language-none">chown -R elk:elk &#x2F;usr&#x2F;local&#x2F;src&#x2F;elasticsearch&#x2F;</code></pre></li>
<li>在&#x2F;usr&#x2F;local&#x2F;src&#x2F;elasticsearch&#x2F;elasticsearch&#x2F;config&#x2F;目录下修改配置文件elasticsearch.yml。 <pre class="language-none"><code class="language-none">cluster.name: CLUSTER_NAME
node.name: HOSTNAME &amp; ROLES
node.master: true
node.data: true
network.host: YOUR_HOSTNAME
discovery.zen.ping.unicast.hosts: [&quot;YOUR_OTHER_NODE_HOSTNAME &quot;]
</code></pre></li>
<li>切换到elk用户，尝试启动elk<br> su elk<br> cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;elasticsearch&#x2F;elasticsearch&#x2F;bin&#x2F;<br> .&#x2F;elasticsearch<br> 如果没有错误就可以使用 -d 选项将服务启动到后台。</li>
</ol>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>Application, ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 安装记录</title>
    <url>/2020/06/27/Linux/Linux_Elasticsearch-02/</url>
    <content><![CDATA[<p>记录一下自己的集群安装过程和常见的命令。</p>
<h2 id="Elastic-Search三节点的安装"><a href="#Elastic-Search三节点的安装" class="headerlink" title="Elastic Search三节点的安装"></a>Elastic Search三节点的安装</h2><ol>
<li><p>节点的名称和相关参数：</p>
<table>
<thead>
<tr>
<th>Host-name</th>
<th>IP</th>
<th>Cluster Name</th>
<th>Role</th>
</tr>
</thead>
<tbody><tr>
<td>elk01</td>
<td>192.168.122.101</td>
<td>liarlee-elk</td>
<td>Elasticsearch</td>
</tr>
<tr>
<td>elk02</td>
<td>192.168.122.102</td>
<td>liarlee-elk</td>
<td>Kibana</td>
</tr>
<tr>
<td>elk03</td>
<td>192.168.122.103</td>
<td>liarlee-elk</td>
<td>Filebeat</td>
</tr>
</tbody></table>
</li>
<li><p>使用清华的repo</p>
 <pre class="language-none"><code class="language-none">[elasticsearch]
name&#x3D;Elasticsearch repository for 7.x packages
#baseurl&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;packages&#x2F;7.x&#x2F;yum
baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;elasticstack&#x2F;7.x&#x2F;yum&#x2F;
gpgcheck&#x3D;0
gpgkey&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;GPG-KEY-elasticsearch
enabled&#x3D;1
autorefresh&#x3D;1
type&#x3D;rpm-md</code></pre>
</li>
<li><p>三个服务器都需要安装Elasticsearch并设置开机启动。</p>
 <pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 安装</span>
yum makecache fast <span class="token important">&amp;&amp;</span> yum install <span class="token punctuation">-</span>y elasticsearch 
<span class="token comment"># 编辑配置文件</span>
vim /etc/elasticsearch/elasticsearch.yml
  <span class="token key atrule">node.master</span><span class="token punctuation">:</span> true<span class="token punctuation">[</span>只有其中的两台是主节点即可，剩下的03可以设置为False<span class="token punctuation">]</span>
  <span class="token key atrule">node.name</span><span class="token punctuation">:</span> elk01 <span class="token punctuation">[</span>节点的名称，可以自定义，但是一个集群的内部节点名称不能相同<span class="token punctuation">]</span>
  <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 192.168.122.101<span class="token punctuation">[</span>每个机器的外部IP<span class="token punctuation">]</span>
  <span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
  <span class="token key atrule">node.data</span><span class="token punctuation">:</span> true <span class="token punctuation">[</span>三个节点都可以存储数据<span class="token punctuation">]</span>
  <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> liarlee<span class="token punctuation">-</span>elk <span class="token punctuation">[</span>集群的名称三个机器必须一致<span class="token punctuation">]</span>
  <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"elk1.hayden.cluster"</span><span class="token punctuation">]</span>
  <span class="token key atrule">discovery.zen.ping.unicast.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"elk01"</span><span class="token punctuation">,</span> <span class="token string">"elk02"</span><span class="token punctuation">,</span> <span class="token string">"elk03"</span><span class="token punctuation">]</span>
  <span class="token key atrule">discovery.zen.minimum_master_nodes</span><span class="token punctuation">:</span> 1 <span class="token punctuation">[</span>最少的master节点需要有一个<span class="token punctuation">]</span>
<span class="token comment"># 复制到02</span>
scp /etc/elasticsearch/elasticsearch.yml root@elk02<span class="token punctuation">:</span>/etc/elasticsearch/elasticsearch.yml
<span class="token comment"># 复制到03</span>
scp /etc/elasticsearch/elasticsearch.yml root@elk03<span class="token punctuation">:</span>/etc/elasticsearch/elasticsearch.yml
<span class="token comment"># 去对应的机器上修改机器名和相关字段，结束， 尝试启动。 </span></code></pre>
</li>
<li><p>确认三个节点的服务是否正常启动。</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用curl命令访问节点的restfulAPI</span>
<span class="token function">curl</span> http://elk01:9200/_cluster/health?v
<span class="token function">curl</span> http://elk01:9200/_cluster/health?pretty
<span class="token function">curl</span> http://elk02:9200
<span class="token function">curl</span> http://elk03:9200</code></pre>
</li>
<li><p>在02上安装kibana，并且开机启动。</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用yum安装</span>
yum makecache fast <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kibana 
systemctl <span class="token builtin class-name">enable</span> kibana <span class="token operator">&amp;&amp;</span> systemctl start kibana</code></pre>
</li>
<li><p>访问Kibana的WebUI，可以正常的使用。</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过API检查</span>
<span class="token function">curl</span> http://elk02:5601
<span class="token comment"># 通过WebUI检查</span>
firefox http://elk02:5601/</code></pre>
</li>
<li><p>配置filebeat 无脑收集&#x2F;var&#x2F;log&#x2F;messages, 并查看上报的状态。</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装filebeat， 开机启动</span>
Download from ELK offical website <span class="token builtin class-name">:</span> filebeat-7.7.1-linux-x86_64.tar.gz
<span class="token builtin class-name">cd</span> /opt/filebeat/filebeat-7.7.1-linux-x86_64
<span class="token function">vim</span> ./filebeat.yml
  filebeat.inputs:
  - type: log
    enabled: <span class="token boolean">true</span>
    paths:
          - /var/log/messages
  output.elasticsearch:
  		hosts: <span class="token punctuation">[</span><span class="token string">"192.168.122.101:9200"</span><span class="token punctuation">]</span>
  setup.kibana:
  		host: <span class="token string">"192.168.122.102:5601"</span>
<span class="token comment"># 运行</span>
<span class="token builtin class-name">cd</span> /opt/filebeat/filebeat-7.7.1-linux-x86_64
<span class="token function">sudo</span> <span class="token function">nohup</span> ./filebeat <span class="token parameter variable">-e</span> <span class="token parameter variable">-c</span> filebeat.yml <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></code></pre>
</li>
<li><p>观察集群的日志的收集状况，我在这个时候已经没有其他的问题了…. Over.</p>
</li>
</ol>
<h2 id="有些问题"><a href="#有些问题" class="headerlink" title="有些问题"></a>有些问题</h2><ol>
<li>我自己的虚拟机我是经常性的暴力关机的，所以遇到了节点的状态同步不正确，这导致我的ES集群启动的时候总是只有一个节点在线 ，其他的节点无法加入， 可以在ES的日志中观察到，节点试图添加，但是无法成功加入， 这个时候只需要删除无法加入节点的Node数据即可。</li>
</ol>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>Application, ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Epoll vs select vs poll vs io_uring</title>
    <url>/2022/04/19/Linux/Linux_Epoll/</url>
    <content><![CDATA[<p>select方式：使用fd_set结构体告诉内核同时监控那些文件句柄，使用逐个排查方式去检查是否有文件句柄就绪或者超时。该方式有以下缺点：文件句柄数量是有上限的，逐个检查吞吐量低，每次调用都要重复初始化fd_set。</p>
<p>poll方式：该方式主要解决了select方式的2个缺点，文件句柄上限问题(链表方式存储)以及重复初始化问题(不同字段标注关注事件和发生事件)，但是逐个去检查文件句柄是否就绪的问题仍然没有解决。</p>
<p>epoll方式：该方式可以说是C10K问题的killer，他不去轮询监听所有文件句柄是否已经就绪。epoll只对发生变化的文件句柄感兴趣。其工作机制是，使用”事件”的就绪通知方式，通过epoll_ctl注册文件描述符fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd, epoll_wait便可以收到通知, 并通知应用程序。而且epoll使用一个文件描述符管理多个描述符,将用户进程的文件描述符的事件存放到内核的一个事件表中, 这样数据只需要从内核缓存空间拷贝一次到用户进程地址空间。而且epoll是通过内核与用户空间共享内存方式来实现事件就绪消息传递的，其效率非常高。但是epoll是依赖系统的(Linux)。</p>
<p>异步I&#x2F;O以及Windows，该方式在windows上支持很好，这里就不具体介绍啦。</p>
<p>io_uring 其实是内核5.10之后引进的一种方式，目前还没有应用是使用这个模式的， 但是这个方式大大的减少了应用程序的系统调用次数。 性能有增长。<br>现在有了， 比如 amazon的一些agent类别的软件。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMwareTools共享文件夹方案</title>
    <url>/2019/01/08/Linux/Linux_Fedora-InstallVMwareTools/</url>
    <content><![CDATA[<p>升级了VMware Workstation 15, 迁移过来Fedora 27的虚拟机里面不能共享剪贴板，不能拖拽复制，共享文件夹设置之后不会挂载在&#x2F;mnt&#x2F;hgfs目录下，找到的解决方案如下：  </p>
<span id="more"></span>

<h2 id="解决共享剪贴板"><a href="#解决共享剪贴板" class="headerlink" title="解决共享剪贴板"></a>解决共享剪贴板</h2><ol>
<li>fedora 27下，直接安装  <pre class="language-none"><code class="language-none">dnf update -y   
dnf install -y open-vm-tools-desktop   
OR  
dnf install -y open-vm-*</code></pre></li>
<li>重启虚拟机即可</li>
</ol>
<h2 id="解决挂载VMware共享文件不显示"><a href="#解决挂载VMware共享文件不显示" class="headerlink" title="解决挂载VMware共享文件不显示"></a>解决挂载VMware共享文件不显示</h2><ol>
<li>这个问题我的解决办法是： 卸载这个机器上的open-vm-tools所有包，安装VMware提供的Tools，才可以正常使用  </li>
<li>那么步骤如下： <pre class="language-none"><code class="language-none">dnf remove -y opem-vm-*
reboot  
------------
在VMware中，选择安装VMwareTools，然后提示推荐使用Open-VM-Toools工具，输入YES，强制安装  
一路回车，直到出现Enjoy.
reboot</code></pre></li>
<li>重启之后可以在&#x2F;mnt&#x2F;hgfs目录下看见共享的目录了，完美  </li>
<li>如果需要可以添加一条指令在&#x2F;etc&#x2F;fstab条目，<pre><code>vim /etc/fstab
-   .host:/SHAREDFOLDERNAME     /mnt/hgfs   vmhgfs   defaults    0 0 
</code></pre>
</li>
<li>收工</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora开机启动速度的优化</title>
    <url>/2019/01/13/Linux/Linux_Fedora-bootspeedup/</url>
    <content><![CDATA[<p>一直认为我的虚拟机性能不够所以导致自己的机器开桌面环境，开机慢慢慢慢慢慢…….今天终于发现了原因…..</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>使用systemd-analyze 命令<br>使用systemd-analyze blame 命令罗列所有的启动的服务和耗时</p>
<p>我的机器耗时间最长的是 </p>
<ol>
<li>dnf-makecache.service 占用了 1min 8.124s；  </li>
<li>plymouth-quit-wait.service 占用了 1min 744ms</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>所以关闭它，阻止今后开机的时候启动</p>
<pre class="language-none"><code class="language-none">systemctl disable dnf-makecache.service
systemctl disable dnf-makecache.timer</code></pre>
<p>或者就直接把这个服务指向 &#x2F;dev&#x2F;null 也是可以的， 总体来说就是让他开机的时候不要继续启动。</p>
<pre class="language-none"><code class="language-none">systemctl mask dnf-makecache.service
systemctl mask dnf-makecache.timer
systemctl mask plymouth-quit-wait.service
systemctl mask firewalld.service</code></pre>
<p>尽量不使用DHCP使用固定的IP可以提高启动速度，其他的不需要服务可以自行关闭即可  </p>
<h2 id="优化后的结果"><a href="#优化后的结果" class="headerlink" title="优化后的结果"></a>优化后的结果</h2><pre class="language-none"><code class="language-none">[root@localhost ~]# systemd-analyze 
Startup finished in 3.091s (kernel) + 1.669s (initrd) + 5.211s (userspace) &#x3D; 9.971s</code></pre>

<pre class="language-none"><code class="language-none">[root@localhost ~]# systemd-analyze blame
          2.868s vmware-tools.service
          1.317s lvm2-monitor.service
          1.115s dev-mapper-fedora\x2droot.device
          1.044s fwupd.service
           865ms NetworkManager-wait-online.service
           834ms systemd-udev-settle.service
           794ms dracut-initqueue.service
           715ms udisks2.service
           566ms sssd.service
           533ms initrd-switch-root.service
           443ms abrtd.service
           404ms systemd-udev-trigger.service
           326ms systemd-journal-flush.service
           280ms ModemManager.service
           259ms libvirtd.service
           251ms polkit.service
           209ms chronyd.service
           199ms NetworkManager.service
           192ms systemd-vconsole-setup.service
           164ms accounts-daemon.service
           149ms user@42.service
           146ms systemd-udevd.service
           143ms dracut-cmdline.service
           137ms dracut-pre-pivot.service
           137ms systemd-tmpfiles-setup-dev.service
           134ms systemd-sysctl.service
           131ms packagekit.service
           124ms gssproxy.service
           119ms fedora-readonly.service
           116ms lvm2-pvscan@8:2.service
           111ms user@0.service
           110ms avahi-daemon.service
           105ms auditd.service
           105ms dmraid-activation.service
           101ms gdm.service
            86ms systemd-user-sessions.service
            71ms fedora-import-state.service
            65ms initrd-parse-etc.service
            58ms upower.service
            51ms systemd-logind.service
            47ms var-lib-nfs-rpc_pipefs.mount
            47ms systemd-fsck@dev-disk-by\x2duuid-e37f7ce7\x2d367b\x2d4e28\x2d8c1e\x2d3b98d1e4d441.service
            46ms systemd-journald.service
            45ms systemd-tmpfiles-setup.service
            44ms boot.mount
            41ms home.mount
            41ms wpa_supplicant.service
            40ms dev-hugepages.mount
            37ms nfs-config.service
            35ms plymouth-read-write.service
            33ms rpc-statd-notify.service
            30ms systemd-remount-fs.service
            30ms systemd-fsck@dev-mapper-fedora\x2dhome.service
            27ms geoclue.service
            27ms cups.service
            26ms colord.service
            24ms livesys.service
            23ms rtkit-daemon.service
            22ms dracut-pre-udev.service
            21ms dev-mqueue.mount
            21ms dracut-shutdown.service
            20ms sysroot.mount
            20ms switcheroo-control.service
            20ms plymouth-start.service
            19ms plymouth-switch-root.service
            19ms kmod-static-nodes.service
            16ms dev-mapper-fedora\x2dswap.swap
            16ms initrd-cleanup.service
            15ms systemd-fsck-root.service
            13ms livesys-late.service
            10ms sys-kernel-debug.mount
             6ms systemd-update-utmp-runlevel.service
             6ms initrd-udevadm-cleanup-db.service
             6ms systemd-update-utmp.service
             6ms systemd-random-seed.service
             5ms tmp.mount
             2ms sys-kernel-config.mount</code></pre>
<p>可以通过命令查看systemd的一些信息： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token parameter variable">--failed</span> <span class="token comment"># 查看所有启动或者运行失败的服务</span>

systemctl status <span class="token comment"># 查看系统启动之后的所有Service 以及状态</span></code></pre>
<h3 id="Mark-Tips"><a href="#Mark-Tips" class="headerlink" title="Mark Tips"></a>Mark Tips</h3><ol>
<li>axel  dnf可用的多线程更新</li>
<li>yum-fastestmirror  自动挑选最快的服务器更新</li>
<li><strong>附加一个systemd的使用教程：<a href="https://itxx00.github.io/blog/2014/04/08/systemd-basic-usage/">- ClickThisLink</a></strong>    </li>
<li><strong>附加一个plymouth的教程：<a href="https://blog.csdn.net/qq_25773973/article/details/50786174">- ClickThisLink</a></strong></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统及文件管理</title>
    <url>/2019/07/24/Linux/Linux_FileManagement/</url>
    <content><![CDATA[<p>Linux文件管理笔记</p>
<p>文件系统默认的规定是遵守FHS规定的。</p>
<blockquote>
<p>FHS(Filesystem Hierarchy Standard) defines the directory structure and directory contents in Linux distributions.<br><a href="https://refpecs.linuxfoundation.org/fhs.shtml">FHS_Website</a></p>
</blockquote>
<p>标准的根文件系统，应该具有如下的结构，所有的文件目录均在根文件系统下。</p>
<ol>
<li>&#x2F;bin  – 单用户模式下可运行的二进制命令。所有用户都可以使用。</li>
<li>&#x2F;sbin  – 基本的系统二进制文件。</li>
<li>&#x2F;boot – 一般为BootLoaderFiles，例如内核，ramfs，grub等等。</li>
<li>&#x2F;etc  – 常用的应用程序的全局配置文件。Host-specific system-wide configruation。<ol>
<li>&#x2F;etc&#x2F;opt  – &#x2F;opt目录下的程序的配置文件。</li>
</ol>
</li>
<li>&#x2F;usr  – 包含了主要的多用户工具及应用。<ol>
<li>&#x2F;usr&#x2F;share – Architecture-independent(shared) data.独立架构的共享数据。</li>
<li>&#x2F;usr&#x2F;sbin – 非基础的系统库文件，例如网络管理的守护进程。</li>
<li>&#x2F;usr&#x2F;src – 放内核源码及头文件的目录。</li>
<li>&#x2F;usr&#x2F;bin – 非基础的命令二进制文件，不需要运行在单用户模式下的命令。</li>
<li>&#x2F;usr&#x2F;local – 特指存放本地的数据，例如源码包，二进制包等等。</li>
<li>&#x2F;usr&#x2F;lib – &#x2F;usr&#x2F;bin &amp; &#x2F;usr&#x2F;sbin下的命令所需要的库文件。</li>
</ol>
</li>
<li>&#x2F;opt – <strong>Opt</strong>ional application software packages.</li>
<li>&#x2F;mnt – 文件系统的临时挂载位置。</li>
<li>&#x2F;media – 默认的可移动设备挂载位置。</li>
<li>&#x2F;dev  – 所有的设备，字符设备，块设备。</li>
<li>&#x2F;lib – 为&#x2F;bin &amp; &#x2F;sbin目录下的文件及程序提供的库文件。</li>
<li>&#x2F;lib64 – 可替代格式的库文件，这个目录不是必须存在的，例如64位程序会需要这个目录。</li>
<li>&#x2F;tmp – 临时文件存放目录。定期清除。</li>
<li>&#x2F;sys  – 设备，驱动，一些内核功能的相关信息。</li>
<li>&#x2F;proc – 虚拟文件系统展示进程及内核信息文件。系统启动目录创建，系统关闭目录消失。</li>
<li>&#x2F;var – 变量文件。在系统运行的过程中反复变化的文件。比如日志，邮件，信息输出等。<ol>
<li>&#x2F;var&#x2F;log – 系统应用程序产生的日志文件默认存放路径。</li>
<li>&#x2F;var&#x2F;spool&#x2F;mail – 每个用户的邮件。</li>
</ol>
</li>
<li>&#x2F;home – 用户的家目录，saved files, personal settings,etc.</li>
</ol>
<p>Bash文件色彩显示的定义在： &#x2F;etc&#x2F;DIR_COLORS , 文件中定义了所有文件类型在Bash中的色彩。<br><strong>新技巧： 有一个$OLDPWD，可通过<code>cd -</code> 切换到上一次离开的目录</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, FileSystem</tag>
      </tags>
  </entry>
  <entry>
    <title>Firefox-Openh264的问题</title>
    <url>/2017/12/28/Linux/Linux_Firefox-Openh264/</url>
    <content><![CDATA[<p>fedora27中Firefox插件OpenH264不启用  </p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>OS：Fedora 27 Workstation<br>Software: Firefox 57  </p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Firefox的插件中提示OpenH264 未启用，不能正常使用，打开视频站点不能播放视频。<br>在插件中调整插件状态为 Always Activate，插件状态改变为将被安装，但是无论的等待多久这个插件的安装状态不会改变，依旧不能正常工作。  </p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>查找到<a href="http://fedoraproject.org/wiki/OpenH264">官方WIKI</a>，给出了如下的解决办法：  </p>
<ol>
<li>在Fedora默认给出的官方源中，有一个名称是：fedora-cisco-openh264.repo</li>
<li>这个源默认关闭，开启它<br><code>sudo dnf config-manager --set-enabled fedora-cisco-openh264</code>  </li>
<li>安装如下两个插件<br><code>sudo dnf install gstreamer1-plugin-openh264 mozilla-openh264</code>  </li>
<li>重启Firefox查看插件状态已经恢复正常，启动openh264插件即可。</li>
</ol>
<h1 id="Openh264测试页"><a href="#Openh264测试页" class="headerlink" title="Openh264测试页"></a>Openh264测试页</h1><p><a href="http://mozilla.github.io/webrtc-landing/pc_test_h264.html">Simple mozRTCPeerConnection Video Test</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Application, Firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见的命令</title>
    <url>/2023/07/12/Linux/Linux_Git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="远端创建，-Clone本地"><a href="#远端创建，-Clone本地" class="headerlink" title="远端创建， Clone本地"></a>远端创建， Clone本地</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Github上面创建一个新的仓库， 页面创建即可， 然后记录下URL。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">https://github.com/LiarLee/vps-init.git</code></pre>

<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>本地创建目录， 并初始化本地的仓库路径。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> vps-init
<span class="token builtin class-name">cd</span> ./vps-init
<span class="token function">git</span> clone https://github.com/LiarLee/vps-init.git</code></pre>

<h3 id="关联远端仓库"><a href="#关联远端仓库" class="headerlink" title="关联远端仓库"></a>关联远端仓库</h3><p>创建一个本地仓库。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> vps-init
<span class="token builtin class-name">cd</span> ./vps-init
<span class="token function">git</span> init <span class="token builtin class-name">.</span>
<span class="token function">touch</span> README
<span class="token builtin class-name">echo</span> <span class="token string">"For init server use DroneCI."</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"init"</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/LiarLee/vps-init.git
<span class="token function">git</span> <span class="token parameter variable">-u</span> origin master</code></pre>

<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置代理</span>
ec2-user@arch ~<span class="token operator">></span> gitc config <span class="token parameter variable">--global</span> http.proxy socks5://1.1.1.1:7890
ec2-user@arch ~<span class="token operator">></span> <span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy socks5://1.1.1.1:7890
<span class="token comment"># 取消代理</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy</code></pre>

<h3 id="取消git的特定文件追踪"><a href="#取消git的特定文件追踪" class="headerlink" title="取消git的特定文件追踪"></a>取消git的特定文件追踪</h3><p>最好的办法是直接使用gitignore忽略这个文件， 但是开始创建仓库的时候可能想不到， 所以已经追踪的文件需要取消。 </p>
<pre class="language-git" data-language="git"><code class="language-git">查看这个哪些文件会受到影响： 
git rm -r -n --cached ./plugin 

删除这些文件的追踪： 
git rm -r --cached ./plugin
</code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Gnome快捷键</title>
    <url>/2019/09/19/Linux/Linux_Gnome-Tricks/</url>
    <content><![CDATA[<p>Gnome桌面环境的快捷键。</p>
<h2 id="快速启动一个应用"><a href="#快速启动一个应用" class="headerlink" title="快速启动一个应用"></a>快速启动一个应用</h2><ul>
<li>Super </li>
<li>Hot Corner<br>这两个我都用，HotCorner不是一个按键，而是一个动作，是指屏幕的右上角，鼠标指针用力撞过去，撞开所有的应用窗口。在Gnome的环境中，Super是一个超方便的键，当我需要打开vscode的时候，可以在任意时候通过super+code+Enter直接打开vscode应用。当按下Super的时候会自动触发一个全局的搜索，可以通过Super快速查看自己的需要的文件或者应用，这个功能是我最喜欢Gnome的地方。</li>
</ul>
<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><ul>
<li>Alt+F2<br>最常用的就是重启Gnome环境，通过Alt+F2 调出的命令窗口，使用r命令重启Gnome。</li>
</ul>
<h2 id="应用的切换"><a href="#应用的切换" class="headerlink" title="应用的切换"></a>应用的切换</h2><ul>
<li>Super+TAB<br>使用Super+TAB可以在应用之间快速切换。如果Cover-alt-tab的插件，还有三维动画。</li>
<li>Super+&#96;<br>这个组合键是切换应用内窗口的，我自己用的不多。</li>
</ul>
<h2 id="快速显示主屏幕应用菜单"><a href="#快速显示主屏幕应用菜单" class="headerlink" title="快速显示主屏幕应用菜单"></a>快速显示主屏幕应用菜单</h2><ul>
<li>Super+a<br>快速显示主屏幕的所有应用程序页。</li>
</ul>
<h2 id="切换工作区"><a href="#切换工作区" class="headerlink" title="切换工作区"></a>切换工作区</h2><ul>
<li>Super+PageUP or PageDown</li>
<li>Ctrl+Alt+UP or DOWN<br>可以在多个工作区之间快速切换，但是我自己常用的是第二种。键位上舒服一些。</li>
</ul>
<h2 id="移动窗口到其他工作区"><a href="#移动窗口到其他工作区" class="headerlink" title="移动窗口到其他工作区"></a>移动窗口到其他工作区</h2><ul>
<li>Ctrl+Alt+Shift+UP or Down</li>
<li>Super+Shift+PageUP or PageDown<br>将当前的焦点窗口移动到前后的工作区，并保持当前窗口的焦点不变。这个也是特别好用的快捷键。</li>
</ul>
<h2 id="呼出通知中心和日历"><a href="#呼出通知中心和日历" class="headerlink" title="呼出通知中心和日历"></a>呼出通知中心和日历</h2><ul>
<li>Super+m<br>这个快捷键最早的Gnome上是通知栏，现在用的比较少了，毕竟Gnome已经不是下方的通知栏了，是上面的日历加上通知中心的方式了。我自己的用的时候大部分是看时间和日历。</li>
</ul>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul>
<li>PrintScreen<br>截取所有屏幕内容，保存到文件。</li>
<li>Alt+PrintScreen<br>截取当前窗口的内容，保存到文件。</li>
<li>Shift+PrintScreen<br>截取选择的区域，保存到文件。</li>
</ul>
<p><strong>NOTE： 最方便的就是，使用Ctrl+Shift PrintScreen和Ctrl+PrintScreen 可以直接选取的区域截图，将截图保存在剪贴板，截图完成直接粘贴即可。</strong></p>
<h2 id="最大化最小化和分屏"><a href="#最大化最小化和分屏" class="headerlink" title="最大化最小化和分屏"></a>最大化最小化和分屏</h2><ul>
<li>Super+UP<br>最大化到铺满屏幕</li>
<li>Super+LEFT<br>靠左占据一般屏幕</li>
<li>Super+RIGHT<br>靠右占据一般屏幕</li>
<li>Super+H<br>最小化，隐藏</li>
</ul>
<p>这些基本上就是我觉得常用而且好用的快捷键啦，但是还是可以自定义的，在设置里面，也可以随便设置，但是那样的话就不是拿来直接可以用的啦。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>grub2手动修复引导错误</title>
    <url>/2018/01/09/Linux/Linux_Grub2repair/</url>
    <content><![CDATA[<p>grub2引导错误的手动解决方法</p>
<h2 id="Grub是什么"><a href="#Grub是什么" class="headerlink" title="Grub是什么"></a>Grub是什么</h2><ul>
<li><p>引用百度百科    </p>
<blockquote>
<p>GNU GRUB（简称“GRUB”）是一个来自GNU项目的启动引导程序。GRUB是多启动规范的实现，它允许用户可以在计算机内同时拥有多个操作系统，并在计算机启动时选择希望运行的操作系统。GRUB可用于选择操作系统分区上的不同内核，也可用于向这些内核传递启动参数。<br>GNU GRUB的前身为Grand Unified Bootloader。它主要用于类Unix系统；同大多Linux发行版一样，GNU系统也采用GNU GRUB作为它的启动器。Solaris从10 1&#x2F;06版开始在x86系统上也采用GNU GRUB作为启动器。  </p>
</blockquote>
</li>
<li><p>引用fedora官方wiki  </p>
<blockquote>
<p>GRUB 2 is the latest version of GNU GRUB, the GRand Unified Bootloader. A bootloader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the operating system kernel, (Linux, in the case of Fedora). The kernel, in turn, initializes the rest of the operating system.<br>GRUB 2 has replaced what was formerly known as GRUB (i.e. version 0.9x), which has, in turn, become GRUB Legacy.<br>Starting with Fedora 16, GRUB 2 is the default bootloader on x86 BIOS systems. For upgrades of BIOS systems the default is also to install GRUB 2, but you can opt to skip bootloader configuration entirely.</p>
</blockquote>
</li>
</ul>
<h2 id="修复grub2引导程序开机失败"><a href="#修复grub2引导程序开机失败" class="headerlink" title="修复grub2引导程序开机失败"></a>修复grub2引导程序开机失败</h2><p>一般情况下系统的grub文件不会丢失，但是有的时候比如我们进行了系统设置的更改或者文件的误删除会导致系统无法正常启动，这个时候我们需要对grub进行手动的配置，才能是计算机正确的进入系统之中，进入系统之后只要重新生成grub引导文件，就可以让系统重启自动完成引导进入系统了。  </p>
<h3 id="指出-x2F-boot位置"><a href="#指出-x2F-boot位置" class="headerlink" title="指出&#x2F;boot位置"></a>指出&#x2F;boot位置</h3><ol>
<li>指定grub的硬盘引导分区，也就是&#x2F;boot所在的硬盘分区<br><code>grub&gt; root (hd0,0)</code></li>
</ol>
<h3 id="指出vmlinuz内核文件"><a href="#指出vmlinuz内核文件" class="headerlink" title="指出vmlinuz内核文件"></a>指出vmlinuz内核文件</h3><ol>
<li>指出kernel所在的分区，主要是vmlinuz内核文件所在的位置<br><code>grub&gt; kernel /vmlinuz</code></li>
<li>指出initrd所在的分区，指定初始化文件所在的位置<br><code>grub&gt; initrd /initrd</code></li>
</ol>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol>
<li>文件锁定成功之后，就可以启动系统<br><code>grub&gt; boot</code></li>
</ol>
<h2 id="在系统中重新安装和更改grub2"><a href="#在系统中重新安装和更改grub2" class="headerlink" title="在系统中重新安装和更改grub2"></a>在系统中重新安装和更改grub2</h2><h3 id="安装或者重新安装grub2（非必须-如果有需要的时候执行）"><a href="#安装或者重新安装grub2（非必须-如果有需要的时候执行）" class="headerlink" title="安装或者重新安装grub2（非必须-如果有需要的时候执行）"></a>安装或者重新安装grub2（非必须-如果有需要的时候执行）</h3><p>安装grub2到硬盘分区，一般为硬盘的第一个分区的开始位置  </p>
<ol>
<li>传统引导方式安装grub2<br><code>[root@localhost /]# grub2-install /dev/sda</code>  </li>
<li>EFI引导安装grub2<br><code>[root@localhost /]# dnf reinstall grub2-efi shim</code></li>
</ol>
<h3 id="重新生成grub配置文件"><a href="#重新生成grub配置文件" class="headerlink" title="重新生成grub配置文件"></a>重新生成grub配置文件</h3><p>使用grub2-mkconfig生成新的grub2配置文件，同时指定引导时读取该文件<br>不同的安装方式有不同的命令  </p>
<ol>
<li>标准的传统引导安装方式<br><code>[root@localhost /]# grub2-mkconfig -o /boot/grub2/grub.cfg</code></li>
<li>EFI引导方式<br><code>[root@localhost /]# grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg</code></li>
</ol>
<h2 id="Windows-amp-Linux双系统修复"><a href="#Windows-amp-Linux双系统修复" class="headerlink" title="Windows&amp;Linux双系统修复"></a>Windows&amp;Linux双系统修复</h2><p>windows和linux的双系统请注意安装顺序，可以减少很多麻烦  </p>
<ul>
<li>先安装windows - 然后安装linux</li>
</ul>
<p>如果先安装了linux，那么在安装windows之后，系统的MBR会被windows覆写，导致linux系统无法正常引导，这个时候需要使用livecd进行修复grub2，让grub2重新安装并且控制引导系统的分区  </p>
<hr>
<h2 id="删除系统更新之后多余的启动项"><a href="#删除系统更新之后多余的启动项" class="headerlink" title="删除系统更新之后多余的启动项"></a>删除系统更新之后多余的启动项</h2><p>系统更新之后总是会多很多的旧版本内核的启动项，每次启动的时候看起来都很乱，简单操作就可以去掉多余的启动项，如下：  </p>
<h3 id="暴力方式"><a href="#暴力方式" class="headerlink" title="暴力方式"></a>暴力方式</h3><ol>
<li><p>在boot目录下面强制删除内核文件，然后重新生成grub2.cfg即可  </p>
<pre class="language-none"><code class="language-none">[root@localhost boot]# rm -rf vmlinuz-4.13.9-300.fc27.x86_64   
[root@localhost boot]# rm -rf vmlinuz-4.14.5-300.fc27.x86_64  </code></pre>
</li>
<li><p>重新生成配置文件：  </p>
<pre class="language-none"><code class="language-none">[root@localhost boot]# grub2-mkconfig -o &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;fedora&#x2F;grub.cfg
Generating grub configuration file ...
Found linux image: &#x2F;boot&#x2F;vmlinuz-4.14.11-300.fc27.x86_64
Found initrd image: &#x2F;boot&#x2F;initramfs-4.14.11-300.fc27.x86_64.img
Found linux image: &#x2F;boot&#x2F;vmlinuz-0-rescue-2fbfdacc99ad4255953ae8b2ec521e9d
Found initrd image: &#x2F;boot&#x2F;initramfs-0-rescue-2fbfdacc99ad4255953ae8b2ec521e9d.img
done</code></pre></li>
</ol>
<h3 id="正确方式"><a href="#正确方式" class="headerlink" title="正确方式"></a>正确方式</h3><ul>
<li>使用dnf命令卸载旧内核：  <pre class="language-none"><code class="language-none">[root@localhost &#x2F;]# dnf remove kernel-4.13.9-300.fc27.x86_64  
[root@localhost &#x2F;]# dnf remove kernel-4.14.5-300.fc27.x86_64  </code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>GRUB2, Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor Http 安装部署</title>
    <url>/2021/09/27/Linux/Linux_HarborInstallation/</url>
    <content><![CDATA[<p> Harbor的部署记录。</p>
<h1 id="Harbor-Info"><a href="#Harbor-Info" class="headerlink" title="Harbor Info"></a>Harbor Info</h1><ul>
<li><a href="https://github.com/goharbor/harbor/releases/tag/v2.3.2">Harbor 项目地址</a></li>
</ul>
<h1 id="Harbor-HTTP部署"><a href="#Harbor-HTTP部署" class="headerlink" title="Harbor HTTP部署"></a>Harbor HTTP部署</h1><p>因为是临时使用， 所以直接给了HTTP的权限， 为的是不走公网部署 CEPH Cluster， CEPH在BootStrap之后会默认去公网的镜像仓库尝试Pull镜像并且校验镜像和服务，所以给一个私有的仓库， 直接去找私有仓库就免了公网访问卡集群的正常启动的步骤。</p>
<h2 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.3.2/harbor-offline-installer-v2.3.2.tgz
~<span class="token punctuation">]</span>$ <span class="token function">mv</span> harbor-offline-installer-v2.3.2.tgz /opt 
~<span class="token punctuation">]</span>$ <span class="token function">tar</span> zxvf /opt/harbor-offline-installer-v2.3.2.tgz</code></pre>

<h2 id="复制修改配置文件"><a href="#复制修改配置文件" class="headerlink" title="复制修改配置文件"></a>复制修改配置文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">cp</span> /opt/harbor/harbor.yml.tmpl /opt/harbor/harbor.yml</code></pre>

<h2 id="配置默认的存储位置"><a href="#配置默认的存储位置" class="headerlink" title="配置默认的存储位置"></a>配置默认的存储位置</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 注释掉https的部分，如果需要https的话签发一个证书写路径在配置文件中</span>
<span class="token comment"># 修改默认的存储位置</span>
<span class="token key atrule">data_volume</span><span class="token punctuation">:</span> /opt/harbor/image_store</code></pre>
<h2 id="指定Harbor对外提供服务的域名"><a href="#指定Harbor对外提供服务的域名" class="headerlink" title="指定Harbor对外提供服务的域名"></a>指定Harbor对外提供服务的域名</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 修改Harbor的域名或者主机名(需要对应的解析)，也可以直接使用IP地址</span>
<span class="token comment"># The IP address or hostname to access admin UI and registry service.</span>
<span class="token comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span>
<span class="token key atrule">hostname</span><span class="token punctuation">:</span> harbor.local</code></pre>
<h2 id="设置harbor-Admin的密码"><a href="#设置harbor-Admin的密码" class="headerlink" title="设置harbor Admin的密码"></a>设置harbor Admin的密码</h2><p>可以登录Dashboard 或者 Pull镜像</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Remember Change the admin password from UI after launching Harbor.</span>
<span class="token key atrule">harbor_admin_password</span><span class="token punctuation">:</span> Harbor12345</code></pre>

<h2 id="创建harbor存储镜像的目录"><a href="#创建harbor存储镜像的目录" class="headerlink" title="创建harbor存储镜像的目录"></a>创建harbor存储镜像的目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建Harbor的存储目录， 可以远程指定到Cephfs上面</span>
~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> /opt/harbor/image_store</code></pre>

<h2 id="配置Docker-ce-清华的镜像源"><a href="#配置Docker-ce-清华的镜像源" class="headerlink" title="配置Docker-ce 清华的镜像源"></a>配置Docker-ce 清华的镜像源</h2><p>这个配置是给Centos &#x2F; RHEL来使用的，来自清华的Repo Help</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加repo文件，和修改配置到Tsinghua repo</span>
~<span class="token punctuation">]</span>$ <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo

<span class="token comment"># 安装Docker-ce</span>
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce

<span class="token comment"># CENTOS8 STREAM 特殊的配置，需要卸载 podman 和 Buildah</span>
~<span class="token punctuation">]</span>$ dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce <span class="token parameter variable">--allowerasing</span>

<span class="token comment"># 开机启动</span>
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># 安装Docker-compose ，因为CentOS8 默认是没有Docker-compose的 ， 按照官网的流程走就可以。</span>
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre>
<h2 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /opt/harbor
/opt/harbor<span class="token punctuation">]</span>$ ./install.sh</code></pre>

<h1 id="启动Harbor"><a href="#启动Harbor" class="headerlink" title="启动Harbor"></a>启动Harbor</h1><p>直接使用Docker-compose启动即可，如果需要的话可以在配置文件中指定镜像扫描器，来进行镜像的漏洞扫描。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入Harbor运行所在的目录</span>
~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /opt/harbor	

<span class="token comment"># 使用Docker-compose的启动命令，适用于服务停止 或者 Docker 重启的时候， 容器没有正常运行。</span>
~<span class="token punctuation">]</span>$ <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">-f</span> /opt/harbor/docker-compose.yaml

<span class="token comment"># 查看容器的启动状态</span>
/opt/harbor<span class="token punctuation">]</span>$ <span class="token function">docker-compose</span> <span class="token function">ps</span>
/opt/harbor<span class="token punctuation">]</span>$ <span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">docker-compose</span> <span class="token function">ps</span>

<span class="token comment"># 通过Docker-compose停止harbor</span>
/opt/harbor<span class="token punctuation">]</span>$ <span class="token function">docker-compose</span> down</code></pre>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ol>
<li>打开浏览器，访问harbor的地址 默认的端口80 </li>
<li>在所有docker节点上配置不安全的私有仓库，docker login [HARBORIP:PORT]</li>
<li>在所有podman节点上配置不安全的私有仓库，podman login [HARBORIP:PORT]</li>
<li>提示Login Successed， 登录成功，可以正常pull镜像了</li>
</ol>
<h1 id="Cephadm-Bootstrap"><a href="#Cephadm-Bootstrap" class="headerlink" title="Cephadm Bootstrap"></a>Cephadm Bootstrap</h1><h2 id="编辑cephadm文件，修改如下的镜像名称，和仓库的前缀"><a href="#编辑cephadm文件，修改如下的镜像名称，和仓库的前缀" class="headerlink" title="编辑cephadm文件，修改如下的镜像名称，和仓库的前缀"></a>编辑cephadm文件，修改如下的镜像名称，和仓库的前缀</h2><p>这里其实还是需要再测试的， 按照这个脚本的逻辑， 应该会把所有的镜像都从指定的仓库Pull下来，但是我执行的时候只有ceph&#x2F;ceph:v16一个镜像下来了， 感觉还是有点儿问题的。</p>
<pre class="language-python" data-language="python"><code class="language-python">DEFAULT_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/ceph:v16'</span>
DEFAULT_IMAGE_IS_MASTER <span class="token operator">=</span> <span class="token boolean">False</span>
DEFAULT_IMAGE_RELEASE <span class="token operator">=</span> <span class="token string">'pacific'</span>
DEFAULT_PROMETHEUS_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/prometheus:v2.18.1'</span>
DEFAULT_NODE_EXPORTER_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/node-exporter:v0.18.1'</span>
DEFAULT_ALERT_MANAGER_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/alertmanager:v0.20.0'</span>
DEFAULT_GRAFANA_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/ceph-grafana:6.7.4'</span>
DEFAULT_HAPROXY_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/haproxy:2.3'</span>
DEFAULT_KEEPALIVED_IMAGE <span class="token operator">=</span> <span class="token string">'harbor.local/ceph/keepalived'</span>
DEFAULT_REGISTRY <span class="token operator">=</span> <span class="token string">'harbor.local'</span>   <span class="token comment"># normalize unqualified digests to this</span></code></pre>

<h2 id="Cephadm-使用私有仓库bootstrap"><a href="#Cephadm-使用私有仓库bootstrap" class="headerlink" title="Cephadm 使用私有仓库bootstrap"></a>Cephadm 使用私有仓库bootstrap</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ cephadm bootstrap --mon-ip <span class="token number">192.168</span>.1.211 --allow-overwrite <span class="token punctuation">\</span>
  --registry-url harbor.local <span class="token punctuation">\</span>
  --registry-username admin <span class="token punctuation">\</span>
  --registry-password Harbor12345</code></pre>

<h2 id="查看并且清除ceph-bootstrap的历史记录"><a href="#查看并且清除ceph-bootstrap的历史记录" class="headerlink" title="查看并且清除ceph-bootstrap的历史记录"></a>查看并且清除ceph-bootstrap的历史记录</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">ls</span> /etc/systemd/system/ceph*
~<span class="token punctuation">]</span>$ <span class="token function">ls</span> /usr/lib/systemd/system/ceph*

~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/systemd/system/ceph*
~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/lib/systemd/system/ceph*
~<span class="token punctuation">]</span>$ <span class="token function">docker</span> stop <span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">`</span></span>  </code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Application, Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM虚拟机开启内存大页</title>
    <url>/2020/05/02/Linux/Linux_Hugepage-configuration/</url>
    <content><![CDATA[<p>Huge Pages是从Linux Kernel 2.6后被引入的。目的是使用更大的内存页面（memory page size） 以适应越来越大的系统内存，让操作系统可以支持现代硬件架构的大页面容量功能。<br>透明大页（Transparent Huge Pages）缩写为THP，这个是RHEL 6（其它分支版本SUSE Linux Enterprise Server 11, and Oracle Linux 6 with earlier releases of Oracle Linux Unbreakable Enterprise Kernel 2 (UEK2)）开始引入的一个功能。具体可以参考官方文档。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>这两者有啥区别呢？</p>
<ul>
<li>这两者的区别在于大页的分配机制，标准大页管理是<strong>预分配的方式</strong>，而透明大页管理则是<strong>动态分配</strong>的方式。</li>
</ul>
<p>使用大页的目的：</p>
<ul>
<li>增加内存寻址的命中率，如果使用旧的内存分页方式，操作系统需要管理很多很多的小的内存页面，查找和命中的效率比较低。</li>
<li>想象一下， 你有一本1000页的书，你需要找到其中的第782页的第20行中的一个“我”字，那么计算机会从第一页开始翻动一页一页的看是否符合要求；现在我将书藉的每100页合成1页，那我们只需要顺序查看10次就可以找到这个字符所在的范围了，之后再去查看这个字符所在的具体位置，速度就会比之前一页一页找快得多。</li>
</ul>
<hr>
<h2 id="配置启用手动分配的HugePage"><a href="#配置启用手动分配的HugePage" class="headerlink" title="配置启用手动分配的HugePage"></a>配置启用手动分配的HugePage</h2><ol>
<li><p>设置操作系统可用的最大内存值</p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;security&#x2F;limits.conf
* soft memlock 8192
* hard memlock 8192</code></pre>
</li>
<li><p>设置sysctl.conf</p>
<pre class="language-none"><code class="language-none"># vim &#x2F;etc&#x2F;sysctl.conf
vm.nr_hugepages &#x3D; 72708
# sysctl -p</code></pre>
</li>
<li><p>根据我的测试 ，需要重启才会生效，Hugepage部分的内存会一直属于使用中的内存，并且一直被占用。我的配置用了16G内存之中的8G，所以开机之后，我的8G内存是一直使用中的状态， 无论你的应用是否真正的开始使用了这部分Hugepage.</p>
</li>
</ol>
<hr>
<p>下面举例了如何查看Hugepages的信息：</p>
<pre class="language-none"><code class="language-none">$ cat &#x2F;proc&#x2F;meminfo | grep Huge
AnonHugePages:         0 kB
ShmemHugePages:        0 kB
FileHugePages:         0 kB
HugePages_Total:    4096
HugePages_Free:     4096
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
Hugetlb:         8388608 kB</code></pre>

<p>我的需求试使用Hugepage来分配给KVM中的虚拟机， 加速虚拟机的内存使用效率，所以当然是在虚拟机的配置文件中配置，编辑虚拟机&#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;HaydenGentoo.xml, 改成如下的样子：</p>
<pre class="language-none"><code class="language-none">&lt;memory unit&#x3D;&#39;KiB&#39;&gt;4194304&lt;&#x2F;memory&gt;
&lt;currentMemory unit&#x3D;&#39;KiB&#39;&gt;4194304&lt;&#x2F;currentMemory&gt;
&lt;memoryBacking&gt;
  &lt;hugepages&#x2F;&gt;
&lt;&#x2F;memoryBacking&gt;</code></pre>

<p>之后重启虚拟机即可。<br>可以观察到如下改变说明已经在使用了。</p>
<pre class="language-none"><code class="language-none">$ cat &#x2F;proc&#x2F;meminfo | grep Huge    
AnonHugePages:         0 kB
ShmemHugePages:        0 kB
FileHugePages:         0 kB
HugePages_Total:    4096
HugePages_Free:     2048
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
Hugetlb:         8388608 kB</code></pre>

<h2 id="在某些场景下完全关闭THP"><a href="#在某些场景下完全关闭THP" class="headerlink" title="在某些场景下完全关闭THP"></a>在某些场景下完全关闭THP</h2><p>查看当前的状态</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/kernel/mm/transparent_hugepage/defrag</span>
<span class="token punctuation">[</span>always<span class="token punctuation">]</span> madvise never
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/kernel/mm/transparent_hugepage/enabled</span>
<span class="token punctuation">[</span>always<span class="token punctuation">]</span> madvise never</code></pre>

<p>禁用THP</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/enabled
<span class="token builtin class-name">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/defrag</code></pre>

<p>完全禁用 THP</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">grubby --update-kernel<span class="token operator">=</span>ALL <span class="token parameter variable">--args</span><span class="token operator">=</span><span class="token string">"transparent_hugepage=never"</span>

---
<span class="token function">sudo</span> systemctl <span class="token function">reboot</span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>IO重定向笔记</title>
    <url>/2019/06/25/Linux/Linux_IO-Redirect/</url>
    <content><![CDATA[<p>输出重定向部分的复习笔记  </p>
<h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><h3 id="文件描述符的概念"><a href="#文件描述符的概念" class="headerlink" title="文件描述符的概念"></a>文件描述符的概念</h3><p>可以通过命令查看以及绑定文件描述符FD。  </p>
<pre class="language-none"><code class="language-none">liarlee@hayden-pc ~
&gt; $ ll &#x2F;proc&#x2F;$$&#x2F;fd
总用量 0
dr-x------ 2 liarlee liarlee  0  6月 24 20:22 .
dr-xr-xr-x 9 liarlee liarlee  0  6月 24 20:22 ..
lrwx------ 1 liarlee liarlee 64  6月 24 20:22 0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0
lrwx------ 1 liarlee liarlee 64  6月 24 20:22 1 -&gt; &#x2F;dev&#x2F;pts&#x2F;0
lrwx------ 1 liarlee liarlee 64  6月 24 20:22 10 -&gt; &#x2F;dev&#x2F;pts&#x2F;0
lrwx------ 1 liarlee liarlee 64  6月 24 20:22 2 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</code></pre>
<h3 id="Linux提供的I-x2F-O设备"><a href="#Linux提供的I-x2F-O设备" class="headerlink" title="Linux提供的I&#x2F;O设备"></a>Linux提供的I&#x2F;O设备</h3><p>Linux系统提供的IO设备，共有三种：</p>
<ul>
<li>STDIN - 0 默认键盘输入</li>
<li>STDOUT - 1 默认输出信息到终端</li>
<li>STDERR - 2 默认输出错误信息到终端</li>
</ul>
<h2 id="Linux输入输出重定向"><a href="#Linux输入输出重定向" class="headerlink" title="Linux输入输出重定向"></a>Linux输入输出重定向</h2><h3 id="重定向说明"><a href="#重定向说明" class="headerlink" title="重定向说明"></a>重定向说明</h3><pre><code>STDOUT和STDERR可以被重定向到文件中，STDIN可通过读取文件实现输入重定向，重定向命令的基本格式如下：  
[CMD] [lOPERATION_SYMBOL] [FILENAME]  
命令    操作符号    文件名
</code></pre>
<h3 id="操作符号包括："><a href="#操作符号包括：" class="headerlink" title="操作符号包括："></a>操作符号包括：</h3><ul>
<li>&gt; 把STDOUT重定向到文件 </li>
<li>2&gt; 把STDERR重定向到文件</li>
<li>&amp;&gt; 把所有结果输出重定向到文件</li>
<li>&gt;&gt; 在原有文件内容的基础上进行追加 </li>
<li>&lt; 标准输入的重定向</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>那么会有如下的操作：  </p>
<pre class="language-none"><code class="language-none">    &gt; $ ls 1&gt; &#x2F;tmp&#x2F;echo.stdout  
        # 正确的命令结果输出到文件中

    &gt; $ ls 2&gt; &#x2F;tmp&#x2F;echo.stderr  
        # 命令执行的错误结果输出到文件中  

    &gt; $ ls &#x2F;error &#x2F;usr 2&gt;&amp;1 &gt;&#x2F;tmp&#x2F;right.test   
        # 将错误信息重定向输出到屏幕显示，正确的信息输出到文件 
        # 通俗的讲是-- 将STDERR(2)重定向为STDOUT(1)输出到屏幕上，
        # 命令的其他结果输出到文件中  

    &gt; $ ls &#x2F;error &#x2F;usr &gt;true 2&gt;false
        # 将正确的信息输出到true中，把错误的信息输出到false中  

    &gt; $ ls &#x2F;error &#x2F;usr &gt;all 2&gt;&amp;1 
        # 先将标准输出重定向到文件all中，在将错误信息追加到标准输出中  
        # 命令结果等于ls &#x2F;error &#x2F;usr &amp;&gt;all 

    &gt; $ ls &#x2F;error &#x2F;usr &amp;&gt; &#x2F;dev&#x2F;null
        # 静默执行命令，不显示结果，不输出到终端

    &gt; $ ls &#x2F;error &#x2F;usr 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null  
        # 错误的信息显示在终端上，其他信息不显示

#  某些命令可以使用管道将STDIN输入重定向作为命令的值
    echo [PASSWD] | passwd --stdin [username] &amp;&gt; &#x2F;dev&#x2F;null
        # 更改某个用户的用户名和密码</code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Maven教程</title>
    <url>/2018/06/25/Linux/Linux_Install-Maven-Guide/</url>
    <content><![CDATA[<p>安装Maven过程，备忘。</p>
<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><ol>
<li><p><a href="https://maven.apache.org/download.cgi">Maven Download Links</a>  </p>
</li>
<li><p>解压安装包：<br>tar xzvf apache-maven-3.5.4-bin.tar.gz </p>
</li>
<li><p>设置环境变量：<br> vim &#x2F;etc&#x2F;profile<br> export M2_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven&#x2F;apache-maven-3.2.5<br> export M2&#x3D;$M2_HOME&#x2F;bin<br> export MAVEN_OPTS&#x3D;-Xms256m -Xmx512m</p>
</li>
<li><p>添加环境变量到PATH：<br> export PATH&#x3D;M2:PATH</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>完全隔离CPU的方法</title>
    <url>/2022/10/11/Linux/Linux_Isolate-cpu-and-taskset-to-it/</url>
    <content><![CDATA[<p>完全隔离CPU， 并排空CPU所有的进程，分配指定的任务到CPU上。</p>
<ol>
<li><p>当前的情况下， 我有CPU 0 - 3， 我希望隔离出CPU3 来进行指定的任务运行（方法是传递内核参数并重启）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub

<span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">'................isolcpu=3 nohz_full=3'</span>

grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg
<span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">reboot</span></code></pre>
</li>
<li><p>重启之后，CPU3 就已经从CFS的调度列表上面拿掉了， 可以通过如下的参数证明。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看设置是否已经正确的生效， 分离的CPU会表示为序号， 一般是： 0-2 ， 3 。 这两种表示方式。</span>
<span class="token function">cat</span> /sys/devices/system/cpu/isolated
<span class="token number">3</span>
<span class="token function">cat</span> /sys/devices/system/cpu/nohz_full
<span class="token number">3</span></code></pre>
</li>
<li><p>关于nohz_full这个参数， 需要编译内核的时候就启用这个功能。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要启用的参数如下：</span>
<span class="token assign-left variable">CONFIG_NO_HZ_COMMON</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_NO_HZ_FULL</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_NO_HZ</span><span class="token operator">=</span>y</code></pre>
<p>这部分的内容还包括的Kernel的Tickless等等知识， 这个部分的内容我在Redhat的文档中有看到。但是文档比较旧了， 这个设置是基于Redhat 7 版本的说明， 可能现在有更好的方法，我不太确定。</p>
</li>
<li><p>重启之后， CPU3上面已经完全不会有用户空间的进程被调度上去了，同时， 由于已经配置了NOHZ的参数，CPU3 上面也不会有Kernel Timer Interrept触发，因此也少了一部分中断。</p>
</li>
<li><p>Redhat的文档中定义了如下的方式进行验证， 我直接抄下面的内容了。</p>
<blockquote>
<p>关于如何验证Cpu隔离的文档： <a href="https://access.redhat.com/solutions/3875421">https://access.redhat.com/solutions/3875421</a><br>配置隔离CPU的方法已经确认功能是否激活的方法：<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/index">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/index</a></p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash">perf <span class="token function">stat</span> <span class="token parameter variable">-C</span> <span class="token number">1</span> <span class="token parameter variable">-e</span> irq_vectors:local_timer_entry taskset <span class="token parameter variable">-c</span> <span class="token number">3</span> <span class="token function">sleep</span> <span class="token number">3</span></code></pre>
<p>先记录这么多吧， 这个功能用到的地方实在是有限，基本上不怎么需要。并且需要知道是现在已经不怎么需要使用这个工具进行调优了， Redhat有 Tuned 守护进程， 可以通过默认的profile对OS进行调优。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>关于内核Config中的参数 CONFIG_NO_HZ</title>
    <url>/2022/04/19/Linux/Linux_KernelParam_NOHZ/</url>
    <content><![CDATA[<p>关于Tick， Tickless的研究。</p>
<blockquote>
<p><a href="https://www.kernel.org/doc/html/latest/timers/no_hz.html">https://www.kernel.org/doc/html/latest/timers/no_hz.html</a></p>
</blockquote>
<p>这几个参数的最终意义都和 Jitter 相关， 设置的参数含义是 ： CPU时钟中断的周期， 如果是 100HZ ， 那么1s的时间内CPU会中断100次。<br>目前最新的内核支持 NOHZ ， 也就是在没有任务的时候处于节能的考虑不进行中断。当有需要运行的业务时还是会正常的触发CPU中断。<br>NOHZ主要的功能时省电， 调整这个参数的意义就是让CPU处在合理的中断次数。过多的中断会导致相关的任务被打断。</p>
<blockquote>
<p>git:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;frederic&#x2F;dynticks-testing.git</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes day1</title>
    <url>/2021/09/11/Linux/Linux_Kubernetes-day1/</url>
    <content><![CDATA[<p><a href="https://github.com/cncf/toc/blob/main/DEFINITION.md#%E4%B8%AD%E6%96%87%E7%89%88%E6%9C%AC">云原生的定义</a></p>
<h2 id="云原生一些概念"><a href="#云原生一些概念" class="headerlink" title="云原生一些概念"></a>云原生一些概念</h2><h3 id="十二因素应用"><a href="#十二因素应用" class="headerlink" title="十二因素应用"></a>十二因素应用</h3><ol>
<li>基准代码： 一份基准代码，多次部署（用同一个代码库进行版本控制）</li>
<li>依赖： 显式的声明和隔离相互之间的依赖</li>
<li>配置： 在环境中存储配置(配置中心，携程的apollo)</li>
<li>后端服务： 后端服务作为一个附加的资源，数据库，中间件等等</li>
<li>构建，发布，运行： 对程序执行构建或者打包，严格分离构建和运行,打镜像编译等等，构建和运行严格的分离</li>
<li>进程： 使用一个或者多个无状态进程运行应用</li>
<li>端口绑定： 通过端口绑定提供服务</li>
<li>并发： 通过进程模型进行扩展</li>
<li>易处理： 快速的启动，优雅的终止，最大程度的保持健壮性。</li>
<li>开发环境与线上环境等价： 尽可能保持Dev，Prelive，Live环境的一致性</li>
<li>日志： 将所有运行中的进程和后台服务的输出流按照的时间顺序统一收集存储和展示(ELK,Fluend,Logstash,Filebeat等等)</li>
<li>管理进程： 一次性管理类型的进程(Onetime Job)应该和正常的常驻进程使用同样的运行环境</li>
</ol>
<h2 id="Master-APIserver"><a href="#Master-APIserver" class="headerlink" title="Master - APIserver"></a>Master - APIserver</h2><p>APIserver提供了Kubernetes各类资源对象的CRUD以及Watch等等的HTTP REST接口，对象包括Pods，Services, ReplicationsControllers等等, 为RESTful操作提供服务，并且为集群状态提供前端，所有的组件都通过前端进行交互。</p>
<ul>
<li><p>特点： RESTful风格</p>
<ol>
<li>APIserver的请求最后会同步到Etcd。</li>
<li>请求APIserver在权限的鉴定完成之后， 可以查看大部分的信息。</li>
<li>端口默认是 6443 可通过启动参数（–secure-port）来进行调整</li>
<li>绑定的IP地址可以通过 –bind-address 在启动的时候指定</li>
<li>端口用于接受客户端，dashboard的外部HTTPBase的请求</li>
<li>Token 以及证书的HTTPbase的校验</li>
<li>基于指定策略的授权</li>
</ol>
</li>
<li><p>功能： </p>
<ol>
<li>身份认证</li>
<li>验证权限</li>
<li>验证指令</li>
<li>执行操作</li>
<li>返回结果</li>
</ol>
</li>
</ul>
<h2 id="Master-Kube-scheduler"><a href="#Master-Kube-scheduler" class="headerlink" title="Master - Kube-scheduler"></a>Master - Kube-scheduler</h2><p>负责将Pod指定到节点上。</p>
<ol>
<li>取出Pod需要分配的信息， 先排除不可调度的Node，在可用的Node列表之中选择一个合适的Node，将信息写入etcd。等待Node上面的kubelet进行生成Pod。</li>
<li>Node的Kubelet通过APIserver监听到Pod的相关信息，然后获取Pod的清单，下载镜像，启动Pod， Kubelet每秒Watch-APIserver的信息。</li>
<li>三个默认策略： <ul>
<li>LeastRequestedPriority - CPU+MEM直接评分，选择资源目前较低</li>
<li>CalculateNodeLanelPriority - 先匹配标签，在进行评分</li>
<li>BalancedResourceAllocation - 优先分配各项资源的使用率最均衡的节点</li>
</ul>
</li>
<li>队列： PodQueue ， NodeList</li>
</ol>
<h2 id="Master-Kuber-Controller-Manager"><a href="#Master-Kuber-Controller-Manager" class="headerlink" title="Master - Kuber-Controller-Manager"></a>Master - Kuber-Controller-Manager</h2><p>提供不同的控制器，例如： 集群内的Node, Pod ReplicaCounts, EndPoint, Namespace, ServiceAccount, ResourceQuota等等资源的控制内容，如果发现异常的时候提供自动化的修复流程。确保所有的服务是在预期的状态下运行。</p>
<ol>
<li>5s检查一次Node的状态</li>
<li>包括多种不同的控制器</li>
<li>检查所有的控制器 和 Node是否符合预期</li>
<li>如果Node 不可达之后 40s会将节点标记为无法访问</li>
<li>标记为无法访问5min之后， 将删除这个节点，同时在其他的节点重建需要的Pod。</li>
</ol>
<hr>
<p>Pod的高可用机制：<br>    1.  NodeMonitorPeriod: 监视周期<br>    2.  NodeMonitorGracePerios: 节点监视观察期<br>    3.  PodEvictionTimeout: 超时驱逐的区间</p>
<h2 id="Kube-Proxy"><a href="#Kube-Proxy" class="headerlink" title="Kube-Proxy"></a>Kube-Proxy</h2><p>Kubernetes网络代理，反映了Node上面的Kubernetes中的服务对象的变化，通过管理IPVS或者IPTABLES的规则来进行网络层的实现。</p>
<ul>
<li>可以通过配置文件来指定IPVS的调度算法， 一般默认是RR, <code>ipvsadm -ln</code></li>
<li>直接指定kubelet的配置文件选项<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ipvs</span><span class="token punctuation">:</span>
  <span class="token key atrule">scheduler</span><span class="token punctuation">:</span> sh</code></pre></li>
</ul>
<h2 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h2><ol>
<li>汇报节点的状态</li>
<li>监听API server 上面的pod信息变化，并调用Docker 和 Containerd 创建容器</li>
<li>准备Pod所需要的数据卷</li>
<li>返回Pod的运行状态</li>
<li>在Node节点上进行容器的健康检查</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes day2</title>
    <url>/2021/10/02/Linux/Linux_Kubernetes-day2/</url>
    <content><![CDATA[<p>对于etcd的操作和备份 </p>
<h1 id="Etcd的操作-Etcdctl"><a href="#Etcd的操作-Etcdctl" class="headerlink" title="Etcd的操作 - Etcdctl"></a>Etcd的操作 - Etcdctl</h1><h2 id="Etcd的规划"><a href="#Etcd的规划" class="headerlink" title="Etcd的规划"></a>Etcd的规划</h2><ol>
<li>最好用 固态盘， Pod数量比较多的情况下会非常非常慢， 内存要大.</li>
<li>类似于redis 或者 Zookeeper， KV的存储.</li>
<li>支持watch机制，可以通知给node节点的数据变化.</li>
<li>etcd consul zookeeper 的区别</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
<th>接口</th>
<th>一致性算法</th>
</tr>
</thead>
<tbody><tr>
<td>zookeeper</td>
<td>1.功能强大，不仅仅只是服务发现<br />2.提供watcher机制能实时获取服务提供者的状态<br/>3.dubbo等框架支持</td>
<td>1.没有健康检查<br/>2.需在服务中集成sdk，复杂度高<br/>3.不支持多数据中心</td>
<td>sdk</td>
<td>Paxos</td>
</tr>
<tr>
<td>consul</td>
<td>1.简单易用，不需要集成sdk<br/>2.自带健康检查<br/>3.支持多数据中心<br/>4.提供web管理界面</td>
<td>1.不能实时获取服务信息的变化通知</td>
<td>http&#x2F;dns</td>
<td>Raft</td>
</tr>
<tr>
<td>etcd</td>
<td>1.简单易用，不需要集成sdk<br/>2.可配置性强</td>
<td>1.没有健康检查<br/>2.需配合第三方工具一起完成服务发现<br/>3.不支持多数据中心</td>
<td>http</td>
<td>Raft</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Etcdctl-的命令"><a href="#Etcdctl-的命令" class="headerlink" title="Etcdctl 的命令"></a>Etcdctl 的命令</h2><ul>
<li><p>查看etcd的成员清单</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem --write-out<span class="token operator">=</span>table <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379,192.168.31.22:2379,192.168.31.23:2379"</span> member list</code></pre>
</li>
<li><p>查看etcd的节点状态</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379,192.168.31.22:2379,192.168.31.23:2379"</span> endpoint status <span class="token parameter variable">-w</span> table</code></pre>
</li>
<li><p>查看etcd存储的数据 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379,192.168.31.22:2379,192.168.31.23:2379"</span> get /registry/ <span class="token parameter variable">--prefix</span> --keys-only <span class="token operator">|</span> <span class="token function">head</span></code></pre></li>
<li><p>查看etcd中的pod信息</p>
</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379,192.168.31.22:2379,192.168.31.23:2379"</span> get /registry/ <span class="token parameter variable">--prefix</span> --keys-only <span class="token operator">|</span> <span class="token function">grep</span> pod</code></pre>
<ul>
<li>其他的操作</li>
</ul>
<ol>
<li>get &#x2F; put &#x2F; del 等基础操作</li>
</ol>
<h2 id="Watch机制"><a href="#Watch机制" class="headerlink" title="Watch机制"></a>Watch机制</h2><p>watch机制是通过不断的查看数据，发生变化就主动的通知客户端，v3支持watch固定的key,也可以watch一个范围的数据。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># watch 一个pod的信息， 然后手动delete这个pod ， 查看etcd 的watch行为和输出的结果。</span>
<span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379,192.168.31.22:2379,192.168.31.23:2379"</span> <span class="token function">watch</span> /registry/pods/monitoring/node-exporter-889hf</code></pre>

<h2 id="数据备份恢复和WAL日志"><a href="#数据备份恢复和WAL日志" class="headerlink" title="数据备份恢复和WAL日志"></a>数据备份恢复和WAL日志</h2><p>WAL： watch ahead log - 预写日志， 可以通过预写日志来进行数据库的恢复。<br>WAL记录了整个数据变化的过程，在操作写入数据之前先进行wal日志的写入。</p>
<p>etcd v2 的时候直接复制和备份目录，备份文件的方案<br>etcd v3 的备份和恢复， 使用快照的方式。</p>
<p>备份使用的命令和恢复的命令不太一样， etcdctl  vs   etcdutl </p>
<p>可以写脚本来进行数据进行备份和恢复。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ etcdctl snapshot save
<span class="token punctuation">]</span>$ etcdctl snapshot restore
<span class="token punctuation">]</span>$ etcdctl snapshot status

<span class="token punctuation">]</span>$ etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/ssl/ca.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/ssl/kubernetes-key.pem <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">"192.168.31.21:2379"</span> snapshot save snap-20211002.db

<span class="token comment"># 测试尝试恢复到临时的目录，测试用。 目录地址用的是tmp下面的。</span>
<span class="token punctuation">]</span>$ etcdutl snapshot restore ./snap-20211002.db --data-dir /tmp/etcd-restore
<span class="token number">2021</span>-10-02T12:01:13+08:00	info	snapshot/v3_snapshot.go:251	restoring snapshot	<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"./snap-20211002.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore/member/snap"</span>, <span class="token string">"stack"</span><span class="token builtin class-name">:</span> <span class="token string">"go.etcd.io/etcd/etcdutl/v3/snapshot.(*v3Manager).Restore<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.0/etcd/release/etcd/etcdutl/snapshot/v3_snapshot.go:257<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdutl/v3/etcdutl.SnapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.0/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:147<span class="token entity" title="\n">\n</span>go.etcd.io/etcd/etcdutl/v3/etcdutl.snapshotRestoreCommandFunc<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.0/etcd/release/etcd/etcdutl/etcdutl/snapshot_command.go:117<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:856<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).ExecuteC<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:960<span class="token entity" title="\n">\n</span>github.com/spf13/cobra.(*Command).Execute<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/pkgsets/go1.16.3/global/pkg/mod/github.com/spf13/cobra@v1.1.3/command.go:897<span class="token entity" title="\n">\n</span>main.Start<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.0/etcd/release/etcd/etcdutl/ctl.go:50<span class="token entity" title="\n">\n</span>main.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/tmp/etcd-release-3.5.0/etcd/release/etcd/etcdutl/main.go:23<span class="token entity" title="\n">\n</span>runtime.main<span class="token entity" title="\n">\n</span><span class="token entity" title="\t">\t</span>/home/remote/sbatsche/.gvm/gos/go1.16.3/src/runtime/proc.go:225"</span><span class="token punctuation">&#125;</span>
<span class="token number">2021</span>-10-02T12:01:13+08:00	info	membership/store.go:119	Trimming membership information from the backend<span class="token punctuation">..</span>.
<span class="token number">2021</span>-10-02T12:01:13+08:00	info	membership/cluster.go:393	added member	<span class="token punctuation">&#123;</span><span class="token string">"cluster-id"</span><span class="token builtin class-name">:</span> <span class="token string">"cdf818194e3a8c32"</span>, <span class="token string">"local-member-id"</span><span class="token builtin class-name">:</span> <span class="token string">"0"</span>, <span class="token string">"added-peer-id"</span><span class="token builtin class-name">:</span> <span class="token string">"8e9e05c52164694d"</span>, <span class="token string">"added-peer-peer-urls"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://localhost:2380"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token number">2021</span>-10-02T12:01:13+08:00	info	snapshot/v3_snapshot.go:272	restored snapshot	<span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token builtin class-name">:</span> <span class="token string">"./snap-20211002.db"</span>, <span class="token string">"wal-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore/member/wal"</span>, <span class="token string">"data-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore"</span>, <span class="token string">"snap-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/tmp/etcd-restore/member/snap"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>$ <span class="token function">ls</span> /tmp/etcd-restore/
member</code></pre>

<p>数据恢复的流程：</p>
<ol>
<li>创建新的etcd集群</li>
<li>停止kubernetes以及其他的依赖etcd 的服务。 </li>
<li>停止空白的新的集群</li>
<li>使用备份的文件进行集群的恢复</li>
<li>使用在集群的每个节点恢复相同的备份文件</li>
<li>每个节点启动etcd的集群并且进行验证</li>
<li>启动Kubernetes的相关集群和组件。</li>
<li>查看恢复的结果，验证各个组件的相关服务是否已经正常恢复。</li>
</ol>
<h2 id="Etcd节点的维护"><a href="#Etcd节点的维护" class="headerlink" title="Etcd节点的维护"></a>Etcd节点的维护</h2><ul>
<li>etcdctl add-etcd  </li>
<li>etcdctl del-etcd</li>
</ul>
<h1 id="资源清单以及API"><a href="#资源清单以及API" class="headerlink" title="资源清单以及API"></a>资源清单以及API</h1><h2 id="相关的外部服务接口"><a href="#相关的外部服务接口" class="headerlink" title="相关的外部服务接口"></a>相关的外部服务接口</h2><ol>
<li>Container Runtime Interface - CRI</li>
</ol>
<ul>
<li>runc</li>
<li>RKT</li>
</ul>
<ol>
<li>Container Storage Interface - CSI</li>
<li>Container Network Interface - CNI</li>
</ol>
<h2 id="Node的相关操作"><a href="#Node的相关操作" class="headerlink" title="Node的相关操作"></a>Node的相关操作</h2><ol>
<li>cordon</li>
<li>uncordon</li>
<li>drain</li>
<li>taint</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次旧LVM硬盘挂载失败</title>
    <url>/2020/05/30/Linux/Linux_Lvm2-member-mounterror/</url>
    <content><![CDATA[<p>我之前的硬盘上是fedora默认的LVM分区，我换了硬盘之后，弄了一个硬盘盒，把旧的硬盘放进去，连到电脑上试图把旧的数据取出来。发现系统已经正确的识别了PV，VG，LV，但是不能挂载， 提示无法读取硬盘的Superblock 和提示 mount: unknown filesystem type ‘LVM2_member（这个提示说明你是直接挂载的&#x2F;dev&#x2F;sdx，LVM需要你挂载的应该是逻辑卷，不是物理设备）。</p>
<span id="more"></span>

<h2 id="问题是这样的"><a href="#问题是这样的" class="headerlink" title="问题是这样的"></a>问题是这样的</h2><pre class="language-bash" data-language="bash"><code class="language-bash">HaydenArchLinux$ lvs
  LV   VG                    Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  home fedora_localhost-live -wi------- <span class="token operator">&lt;</span><span class="token number">118</span>.77g
  root fedora_localhost-live -wi-------   <span class="token number">70</span>.00g
  swap fedora_localhost-live -wi-------    <span class="token number">7</span>.75g
  
---
HaydenArchLinux$ vgs
  VG                    <span class="token comment">#PV #LV #SN Attr   VSize    VFree</span>
  fedora_localhost-live   <span class="token number">1</span>   <span class="token number">3</span>   <span class="token number">0</span> wz--n- <span class="token operator">&lt;</span><span class="token number">196</span>.52g    <span class="token number">0</span>

---
HaydenArchLinux$ vgchange <span class="token parameter variable">-ay</span> /dev/fedora_localhost-live
  device-mapper: create ioctl on fedora_localhost--live-swap LVM-SPkNfSXuuIWyxOArrqJAnfQbYfU4tEKFIj295MyZpNmiMsazbwuGuLsrDgl7u509 failed: Device or resource busy
  device-mapper: create ioctl on fedora_localhost--live-home LVM-SPkNfSXuuIWyxOArrqJAnfQbYfU4tEKFqvyrcOAarRr7ol6o2DbieN2mIRCnqi0m failed: Device or resource busy
  device-mapper: create ioctl on fedora_localhost--live-root LVM-SPkNfSXuuIWyxOArrqJAnfQbYfU4tEKFkTeSg9t8t8dy1jqHhzD6BRcOoJ7dG0H2 failed: Device or resource busy
  <span class="token number">0</span> logical volume<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> volume group <span class="token string">"fedora_localhost-live"</span> now active
  
---
HaydenArchLinux$ lvdisplay
 --- Logical volume ---
  LV Path                /dev/fedora_localhost-live/home
  LV Name                home
  VG Name                fedora_localhost-live
  LV UUID                qvyrcO-AarR-r7ol-6o2D-bieN-2mIR-Cnqi0m
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> localhost-live, <span class="token number">2020</span>-04-05 03:07:47 +0800
  LV Status              NOT available
  LV Size                <span class="token operator">&lt;</span><span class="token number">118.77</span> GiB
  Current LE             <span class="token number">30405</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto</code></pre>

<p>可以注意看上面的vgchange的时候显示LVM-SPkNfSXuuIWyxOArrqJAnfQbYfU4tEKFqvyrcOAarRr7ol6o2DbieN2mIRCnqi0m failed: Device or resource busy， lvdisplay显示lv status是NOT avaliable。</p>
<p>去Google了一下，大部分复制粘贴来的答案都是：</p>
<p>两种方法，第一种是直接mount &#x2F;dev&#x2F;fedora_localhost-live&#x2F;home &#x2F;mnt;第二种是格式化硬盘。</p>
<p>我不需要这种粗鲁的处理方式，第一种和第二种其实都是废话。</p>
<hr>
<h2 id="处理方式是这样的"><a href="#处理方式是这样的" class="headerlink" title="处理方式是这样的"></a>处理方式是这样的</h2><p>简单说明一下，使用dmsetup命令，dmsetup是一个偏向底层的逻辑卷管理工具，可以对现在已经有的逻辑卷进行更改。我的初步怀疑是Arch自动识别挂载了旧硬盘的逻辑卷但是，使用了错误的参数，导致设备被占用但是我无法再次挂载使用。使用dmsetup remove 参数将系统现在已经识别出来的逻辑卷移除， 之后手动使用vgchange重新读取，问题解决了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">HaydenArchLinux$ dmsetup remove /dev/fedora_localhost-live/home
HaydenArchLinux$ vgchange <span class="token parameter variable">-ay</span>
  <span class="token number">3</span> logical volume<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> volume group <span class="token string">"fedora_localhost-live"</span> now active
HaydenArchLinux$ lvdisplay
  --- Logical volume ---
  LV Path                /dev/fedora_localhost-live/home
  LV Name                home
  VG Name                fedora_localhost-live
  LV UUID                qvyrcO-AarR-r7ol-6o2D-bieN-2mIR-Cnqi0m
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> localhost-live, <span class="token number">2020</span>-04-05 03:07:47 +0800
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token operator">&lt;</span><span class="token number">118.77</span> GiB
  Current LE             <span class="token number">30405</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">256</span>
  Block device           <span class="token number">254</span>:1
HaydenArchLinux$ <span class="token function">mount</span> /dev/fedora_localhost-live/home /mnt</code></pre>

<p>如上才是正确的处理方式。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, LVM, Filesystem, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内存管理笔记</title>
    <url>/2023/07/11/Linux/Linux_MemoryManagement/</url>
    <content><![CDATA[<hr>
<h2 id="内存管理部分的笔记"><a href="#内存管理部分的笔记" class="headerlink" title="内存管理部分的笔记"></a>内存管理部分的笔记</h2><h3 id="Crash命令的使用"><a href="#Crash命令的使用" class="headerlink" title="Crash命令的使用"></a>Crash命令的使用</h3><p>使用这个命令需要有debuginfo 以及kernel debug 的数据包， 同时可能需要gdb。 </p>
<p>需要在配置文件里面开启这个 <strong>仓库： rhel-8-baseos-rhui-debug-rpms</strong></p>
<p>具体的步骤也可以看这个文档， 来自Redhat 官方： <a href="https://access.redhat.com/solutions/9907">https://access.redhat.com/solutions/9907</a></p>
 <pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kernel-debuginfo 
<span class="token comment"># 使用这个命令就可以安装， 但是尺寸非常的大。</span>
crash /boot/vmlinuz-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-a</span><span class="token variable">)</span></span></code></pre>

<p>使用命令crash来进行 PM 和 VM的对应关系：</p>
<p>内核的debug文件在： &#x2F;var&#x2F;lib&#x2F;debug&#x2F;lib&#x2F;modules&#x2F;kernel-version&#x2F;</p>
<p> 使用crash命令： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">~ <span class="token comment"># ❯❯❯ crash</span>

crash <span class="token number">7.3</span>.2-4.el8
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2002</span>-2022  Red Hat, Inc.
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2004</span>, <span class="token number">2005</span>, <span class="token number">2006</span>, <span class="token number">2010</span>  IBM Corporation
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1999</span>-2006  Hewlett-Packard Co
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2005</span>, <span class="token number">2006</span>, <span class="token number">2011</span>, <span class="token number">2012</span>  Fujitsu Limited
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2006</span>, <span class="token number">2007</span>  VA Linux Systems Japan K.K.
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2005</span>, <span class="token number">2011</span>, <span class="token number">2020</span>-2022  NEC Corporation
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1999</span>, <span class="token number">2002</span>, <span class="token number">2007</span>  Silicon Graphics, Inc.
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1999</span>, <span class="token number">2000</span>, <span class="token number">2001</span>, <span class="token number">2002</span>  Mission Critical Linux, Inc.
This program is <span class="token function">free</span> software, covered by the GNU General Public License,
and you are welcome to change it and/or distribute copies of it under
certain conditions.  Enter <span class="token string">"help copying"</span> to see the conditions.
This program has absolutely no warranty.  Enter <span class="token string">"help warranty"</span> <span class="token keyword">for</span> details.

GNU gdb <span class="token punctuation">(</span>GDB<span class="token punctuation">)</span> <span class="token number">7.6</span>
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2013</span> Free Software Foundation, Inc.
License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">></span>
This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type <span class="token string">"show copying"</span>
and <span class="token string">"show warranty"</span> <span class="token keyword">for</span> details.
This GDB was configured as <span class="token string">"x86_64-unknown-linux-gnu"</span><span class="token punctuation">..</span>.

WARNING: kernel relocated <span class="token punctuation">[</span>592MB<span class="token punctuation">]</span>: patching <span class="token number">107327</span> gdb minimal_symbol values

      KERNEL: /usr/lib/debug/lib/modules/4.18.0-477.13.1.el8_8.x86_64/vmlinux  <span class="token punctuation">[</span>TAINTED<span class="token punctuation">]</span>
    DUMPFILE: /proc/kcore
        CPUS: <span class="token number">2</span>
        DATE: Tue Jul <span class="token number">11</span> <span class="token number">17</span>:07:01 CST <span class="token number">2023</span>
      UPTIME: 01:04:34
LOAD AVERAGE: <span class="token number">0.15</span>, <span class="token number">0.03</span>, <span class="token number">0.01</span>
       TASKS: <span class="token number">226</span>
    NODENAME: center
     RELEASE: <span class="token number">4.18</span>.0-477.13.1.el8_8.x86_64
     VERSION: <span class="token comment">#1 SMP Thu May 18 10:27:05 EDT 2023</span>
     MACHINE: x86_64  <span class="token punctuation">(</span><span class="token number">2199</span> Mhz<span class="token punctuation">)</span>
      MEMORY: <span class="token number">7.9</span> GB
         PID: <span class="token number">7657</span>
     COMMAND: <span class="token string">"crash"</span>
        TASK: ffff9ce7d835a800  <span class="token punctuation">[</span>THREAD_INFO: ffff9ce7d835a800<span class="token punctuation">]</span>
         CPU: <span class="token number">0</span>
       STATE: TASK_RUNNING <span class="token punctuation">(</span>ACTIVE<span class="token punctuation">)</span>

crash<span class="token operator">></span> vm <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span>

PID: <span class="token number">913</span>      TASK: ffff9ce7c75fd000  CPU: <span class="token number">0</span>    COMMAND: <span class="token string">"sshd"</span>
       MM               PGD          RSS    TOTAL_VM
ffff9ce7c11b8000  ffff9ce7c75ae000  7604k    76644k
      VMA           START       END     FLAGS FILE
ffff9ce7c759f828 55a7fcc7b000 55a7fcd4c000 <span class="token number">8000875</span> /usr/sbin/sshd
VIRTUAL     PHYSICAL
55a7fcc7b000  12026b000
55a7fcc7c000  1201df000
55a7fcc7d000  1201ec000
55a7fcc7e000  1200c7000
55a7fcc7f000  120c43000
55a7fcc80000  10fa79000
55a7fcc81000  11fdd3000
55a7fcc82000  11087f000
55a7fcc83000  11fa8d000
55a7fcc84000  10fe05000
55a7fcc85000  <span class="token number">110870000</span>
55a7fcc86000  10fa2c000
55a7fcc87000  10f9fc000
55a7fcc88000  10fdab000
55a7fcc89000  11f296000
55a7fcc8a000  1117ec000
55a7fcc8b000  10fdac000
55a7fcc8c000  120c65000
55a7fcc8d000  12011b000
55a7fcc8e000  <span class="token number">110714000</span>
55a7fcc8f000  110c83000
55a7fcc90000  110c90000
55a7fcc91000  110d2b000
55a7fcc92000  <span class="token number">120730000</span>
55a7fcc93000  12076f000
55a7fcc94000  1207e8000
55a7fcc95000  110c2f000
55a7fcc96000  110c3c000
55a7fcc97000  <span class="token number">120650000</span>
55a7fcc98000  1206c1000
55a7fcc99000  120c67000
55a7fcc9a000  120c0f000
55a7fcc9b000  FILE: /usr/sbin/sshd  OFFSET: <span class="token number">20000</span>
55a7fcc9c000  11d46d000
55a7fcc9d000  10fe01000
55a7fcc9e000  10fdb9000
55a7fcc9f000  10fde7000
55a7fcca0000  FILE: /usr/sbin/sshd  OFFSET: <span class="token number">25000</span>
<span class="token comment"># 结果省略了后面的部分， 太长了。。 。。 </span>


可以看到内存的映射关系， notmapped 表示没有被映射到物理内存的部分。 
一般来说 后面的三位是一样的， 如果是THP的话， 那么后面的五位是一样的。

这个vtop 可以直接查看里面保存的内容以及具体的映射关系。 
crash<span class="token operator">></span> vtop 55d5473fc000
VIRTUAL     PHYSICAL
55d5473fc000  <span class="token punctuation">(</span>not accessible<span class="token punctuation">)</span>

rd命令可以读取指定的内存虚拟地址之后的偏移量。
crash<span class="token operator">></span> rd 55d54879d000 <span class="token number">100</span>
rd: invalid user virtual address: 55d54879d000  type: <span class="token string">"64-bit UVADDR"</span>
</code></pre>

<p>超过内存申请容量的使用， 会导致 访问内存越界， 例如申请了1G的内存，但是尝试写入超出的数据量， 会导致数据写到后续不属于这个进程的空间上， 而这个时候内核会触发一个 segfault， 来终止这个进程。 </p>
<p>这个报错不是立刻发生的，可能确实会溢出一部分。</p>
<p>匿名页面 实际上是 mmap with MAP_ANONYMOUS flag映射出来的虚拟内存地址， 当需要第一次去写匿名页面的时候， 会将物理内存的地址映射到虚拟内存并将其中填0.</p>
<p>overcommit 0 可以所有的地址，   1 无限制，虚拟内存没有限制， 2  按照一定的比例进行计算， 最终的结果。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置网卡策略路由</title>
    <url>/2023/07/25/Linux/Linux_MultiNetworkCard-RoutePolicy/</url>
    <content><![CDATA[<p>会遇到Linux多个网卡的时候， 网络并不会保证源地址进网卡 ， 源地址出网卡。 </p>
<p>大佬说， IP地址的其实关联的是操作系统，并不是特定的网卡， 所以对于os来说， 邻居子系统会选择一下网络数据从哪个物理网卡出。 </p>
<p>这样就会导致，数据包会在网卡之间Forward一下，而转发出来的数据包， 会被aws vpc 丢包， 因为出入栈的地址不一样了。 </p>
<p>对于这个行为， 需要配置操作系统的路由策略来解决， 让流量从相同的网卡进出。 </p>
<p>记录一下这个配置。</p>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>Ubuntu 直接使用的netplan ，在配置文件里面直接指定policy就可以了。 </p>
<p>配置文件位置： &#x2F;etc&#x2F;netplan&#x2F;* </p>
<p>配置文件内容大致如下： </p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">:</span><span class="token null important">~</span><span class="token comment"># cat /etc/netplan/50-cloud-init.yaml</span>
<span class="token comment"># This file is generated from information provided by the datasource.  Changes</span>
<span class="token comment"># to it will not persist across an instance reboot.  To disable cloud-init's</span>
<span class="token comment"># network configuration capabilities, write a file</span>
<span class="token comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span>
<span class="token comment"># network: &#123;config: disabled&#125;</span>
<span class="token key atrule">network</span><span class="token punctuation">:</span>
    <span class="token key atrule">ethernets</span><span class="token punctuation">:</span>
        <span class="token key atrule">ens4</span><span class="token punctuation">:</span>
            <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
            <span class="token key atrule">match</span><span class="token punctuation">:</span>
                <span class="token key atrule">macaddress</span><span class="token punctuation">:</span> 02<span class="token punctuation">:</span>ab<span class="token punctuation">:</span>8e<span class="token punctuation">:</span>b1<span class="token punctuation">:</span>ba<span class="token punctuation">:</span><span class="token number">36</span>
            <span class="token key atrule">set-name</span><span class="token punctuation">:</span> ens4
            <span class="token key atrule">routes</span><span class="token punctuation">:</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 0.0.0.0/0
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 172.31.48.1
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 172.31.51.248
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 0.0.0.0
               <span class="token key atrule">scope</span><span class="token punctuation">:</span> link
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span>
            <span class="token key atrule">routing-policy</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> 172.31.51.248
                <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1000</span>
        <span class="token key atrule">ens6</span><span class="token punctuation">:</span>
            <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">dhcp6</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
            <span class="token key atrule">match</span><span class="token punctuation">:</span>
                <span class="token key atrule">macaddress</span><span class="token punctuation">:</span> 02<span class="token punctuation">:</span>64<span class="token punctuation">:</span>69<span class="token punctuation">:</span>51<span class="token punctuation">:</span>00<span class="token punctuation">:</span>f2
            <span class="token key atrule">set-name</span><span class="token punctuation">:</span> ens6
            <span class="token key atrule">routes</span><span class="token punctuation">:</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 0.0.0.0/0
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 172.31.48.1
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
             <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span> 172.31.59.199
               <span class="token key atrule">via</span><span class="token punctuation">:</span> 0.0.0.0
               <span class="token key atrule">scope</span><span class="token punctuation">:</span> link
               <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
            <span class="token key atrule">routing-policy</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> 172.31.59.199
                <span class="token key atrule">table</span><span class="token punctuation">:</span> <span class="token number">1001</span>
    <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre>

<h2 id="Redhat-x2F-CentOS-x2F-Fedora-x2F-AmazonLinux2"><a href="#Redhat-x2F-CentOS-x2F-Fedora-x2F-AmazonLinux2" class="headerlink" title="Redhat&#x2F;CentOS&#x2F;Fedora&#x2F;AmazonLinux2"></a>Redhat&#x2F;CentOS&#x2F;Fedora&#x2F;AmazonLinux2</h2><h3 id="旧方式设置"><a href="#旧方式设置" class="headerlink" title="旧方式设置"></a>旧方式设置</h3><p>设置开机配置路由的方式， 使用旧脚本得方式需要禁用NetworkManager，完全手动配置networkd的脚本。</p>
<ol>
<li><p>安装旧的脚本管理工具</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> network-scripts</code></pre>
</li>
<li><p>确认配置文件是否正确</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">244</span>
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">174</span> Dec <span class="token number">17</span> <span class="token number">12</span>:30 ifcfg-eth0
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">278</span> Dec <span class="token number">17</span> <span class="token number">15</span>:56 ifcfg-eth1
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">254</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifcfg-lo
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">2123</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> <span class="token function">ifdown</span>
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">646</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-bnep
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6419</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-eth
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">769</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-ippp
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">4536</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-ipv6
lrwxrwxrwx. <span class="token number">1</span> root root    <span class="token number">11</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-isdn -<span class="token operator">></span> ifdown-ippp
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">2064</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-post
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">870</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-routes
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1458</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-sit
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1621</span> Jul <span class="token number">26</span>  <span class="token number">2020</span> ifdown-Team
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1556</span> Jul <span class="token number">26</span>  <span class="token number">2020</span> ifdown-TeamPort
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1462</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifdown-tunnel
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">5463</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> <span class="token function">ifup</span>
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">12270</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-aliases
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">906</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-bnep
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">13776</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-eth
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">12068</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-ippp
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">11891</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-ipv6
lrwxrwxrwx. <span class="token number">1</span> root root     <span class="token number">9</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-isdn -<span class="token operator">></span> ifup-ippp
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">643</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-plip
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1057</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-plusb
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">5000</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-post
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">2001</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-routes
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">3303</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-sit
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1755</span> Jul <span class="token number">26</span>  <span class="token number">2020</span> ifup-Team
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1876</span> Jul <span class="token number">26</span>  <span class="token number">2020</span> ifup-TeamPort
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">2879</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-tunnel
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1836</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> ifup-wireless
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">5421</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> init.ipv6-global
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">20431</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> network-functions
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">31037</span> Feb <span class="token number">15</span>  <span class="token number">2021</span> network-functions-ipv6
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">40</span> Dec <span class="token number">17</span> <span class="token number">16</span>:00 route-eth0
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">40</span> Dec <span class="token number">17</span> <span class="token number">16</span>:00 route-eth1
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">28</span> Dec <span class="token number">17</span> <span class="token number">15</span>:40 rule-eth0
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">28</span> Dec <span class="token number">17</span> <span class="token number">15</span>:41 rule-eth1</code></pre>
</li>
<li><p>书写文件内容，需要配置的文件如下： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> ifcfg-eth0
<span class="token comment"># Created by cloud-init on instance boot automatically, do not edit.</span>
<span class="token comment">#</span>
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">HWADDR</span><span class="token operator">=</span>02:20:22:29:a4:0c
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">STARTMODE</span><span class="token operator">=</span>auto
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">USERCTL</span><span class="token operator">=</span>no
<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> ifcfg-eth1
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none
<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>eth1
<span class="token assign-left variable">UUID</span><span class="token operator">=</span>80caddf5-1347-4246-827e-5e0146c7f2c5
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth1
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes

<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> route-eth0
default via <span class="token number">172.31</span>.0.1 dev eth0 table <span class="token number">1</span>

<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> route-eth1
default via <span class="token number">172.31</span>.0.1 dev eth1 table <span class="token number">2</span>

<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> rule-eth0
from <span class="token number">172.31</span>.11.110 lookup <span class="token number">1</span>

<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span>$ <span class="token function">cat</span> rule-eth1
from <span class="token number">172.31</span>.11.124 lookup <span class="token number">2</span>

<span class="token punctuation">[</span>root@ip-172-31-11-110 network-scripts<span class="token punctuation">]</span><span class="token comment"># cat /etc/iproute2/rt_tables</span>
<span class="token comment">#</span>
<span class="token comment"># reserved values</span>
<span class="token comment">#</span>
<span class="token number">255</span>     <span class="token builtin class-name">local</span>
<span class="token number">254</span>     main
<span class="token number">253</span>     default
<span class="token number">1</span>       network0
<span class="token number">2</span>       network1
<span class="token number">0</span>       unspec
<span class="token comment">#</span>
<span class="token comment"># local</span>
<span class="token comment">#</span>
<span class="token comment">#1      inr.ruhep</span></code></pre>
</li>
<li><p>关闭NetworkManager， 开启Networkd</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">358</span>  <span class="token function">sudo</span> systemctl stop NetworkManager
<span class="token number">380</span>  <span class="token function">sudo</span> systemctl disable NetworkManager
<span class="token number">375</span>  <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> network
<span class="token number">377</span>  <span class="token function">sudo</span> systemctl restart network</code></pre>
</li>
<li><p>重启， 完成</p>
</li>
</ol>
<h3 id="使用NetworkManager设置"><a href="#使用NetworkManager设置" class="headerlink" title="使用NetworkManager设置"></a>使用NetworkManager设置</h3><p>使用network Manager的方式需要有两个前置的条件。   </p>
<ul>
<li>开启 NetworkManager </li>
<li>开启 Firewalld</li>
</ul>
<p>大概是这样，没测试：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nmcli connection <span class="token function">add</span> <span class="token builtin class-name">type</span> ethernet con-name Internal-Workstations-0 ifname eth0 ipv4.method manual ipv4.addresses <span class="token number">172.31</span>.11.110 ipv4.routes <span class="token string">"172.31.11.110 src=172.31.0.1 table=1"</span> ipv4.routing-rules <span class="token string">"priority 500 from 172.31.11.110 table 1"</span> connection.zone internal-0

nmcli connection <span class="token function">add</span> <span class="token builtin class-name">type</span> ethernet con-name Internal-Workstations-1 ifname eth1 ipv4.method manual ipv4.addresses <span class="token number">172.31</span>.11.124 ipv4.routes <span class="token string">"172.31.11.124 src=172.31.0.1 table=2"</span> ipv4.routing-rules <span class="token string">"priority 600 from 172.31.11.124 table 2"</span> connection.zone internal-1</code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, EC2, Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx编译安装</title>
    <url>/2018/01/22/Linux/Linux_Nginx-InstalltionNote/</url>
    <content><![CDATA[<p>很久之前的笔记了，发出来，做编译安装Nginx的时候记录的……包括安装命令和脚本……</p>
<h2 id="安装nginx服务器"><a href="#安装nginx服务器" class="headerlink" title="安装nginx服务器"></a>安装nginx服务器</h2><ol>
<li>下载<a href="http://zlib.net/">zlib</a>，<a href="http://www.pcre.org/">pcre</a>，<a href="http://nginx.org/en/download.html">nginx</a>  </li>
<li>安装zlib<br><code>[root@localhost Liarlee]# cd zlib-[version]</code><br><code>[root@localhost Liarlee]# ./configure --prefix=/usr/local/zlib</code></li>
<li>安装pcre<br><code>[root@localhost Liarlee]# cd pcre-[version]</code><br><code>[root@localhost Liarlee]# ./configure --prefix=/usr/local/pcre</code></li>
<li>安装nginx<br><code>[root@localhost Liarlee]# cd nginx-[version]</code><br><code>[root@localhost Liarlee]# ./configure --prefix=/usr/local/nginx</code></li>
<li>安装完成</li>
</ol>
<hr>
<h2 id="配置Sys-V-脚本："><a href="#配置Sys-V-脚本：" class="headerlink" title="配置Sys V 脚本："></a>配置Sys V 脚本：</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token comment">#</span>
<span class="token comment"># nginx - this script starts and stops the nginx daemon</span>
<span class="token comment">#</span>
<span class="token comment"># chkconfig:   - 85 15</span>
<span class="token comment"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span>
<span class="token comment">#               proxy and IMAP/POP3 proxy server</span>
<span class="token comment"># processname: nginx</span>
<span class="token comment"># config:      /etc/nginx/nginx.conf</span>
<span class="token comment"># config:      /etc/sysconfig/nginx</span>
<span class="token comment"># pidfile:     /var/run/nginx.pid</span>
<span class="token comment"># Source function library.</span>
<span class="token builtin class-name">.</span> /etc/rc.d/init.d/functions
<span class="token comment"># Source networking configuration.</span>
<span class="token builtin class-name">.</span> /etc/sysconfig/network
<span class="token comment"># Check that networking is up.</span>
<span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$NETWORKING</span>"</span> <span class="token operator">=</span> <span class="token string">"no"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token assign-left variable">nginx</span><span class="token operator">=</span><span class="token string">"/usr/sbin/nginx"</span>
<span class="token assign-left variable">prog</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $nginx<span class="token variable">)</span></span>
<span class="token assign-left variable">NGINX_CONF_FILE</span><span class="token operator">=</span><span class="token string">"/etc/nginx/nginx.conf"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/sysconfig/nginx <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> /etc/sysconfig/nginx
<span class="token assign-left variable">lockfile</span><span class="token operator">=</span>/var/lock/subsys/nginx
<span class="token function-name function">make_dirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment"># make required directories</span>
   <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nginx <span class="token parameter variable">-V</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"configure arguments:"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -<span class="token variable">`</span></span>
   <span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$nginx <span class="token parameter variable">-V</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'configure arguments:'</span><span class="token variable">`</span></span>
   <span class="token keyword">for</span> <span class="token for-or-select variable">opt</span> <span class="token keyword">in</span> <span class="token variable">$options</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
       <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $opt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'.*-temp-path'</span><span class="token variable">`</span></span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
           <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $opt <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">"="</span> <span class="token parameter variable">-f</span> <span class="token number">2</span><span class="token variable">`</span></span>
           <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$value</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
               <span class="token comment"># echo "creating" $value</span>
               <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$value</span> <span class="token operator">&amp;&amp;</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token variable">$user</span> <span class="token variable">$value</span>
           <span class="token keyword">fi</span>
       <span class="token keyword">fi</span>
   <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token variable">$nginx</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">5</span>
    <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$NGINX_CONF_FILE</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">6</span>
    make_dirs
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"Starting <span class="token variable">$prog</span>: "</span>
    daemon <span class="token variable">$nginx</span> <span class="token parameter variable">-c</span> <span class="token variable">$NGINX_CONF_FILE</span>
    <span class="token assign-left variable">retval</span><span class="token operator">=</span><span class="token variable">$?</span>
    <span class="token builtin class-name">echo</span>
    <span class="token punctuation">[</span> <span class="token variable">$retval</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> <span class="token variable">$lockfile</span>
    <span class="token builtin class-name">return</span> <span class="token variable">$retval</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"Stopping <span class="token variable">$prog</span>: "</span>
    killproc <span class="token variable">$prog</span> <span class="token parameter variable">-QUIT</span>
    <span class="token assign-left variable">retval</span><span class="token operator">=</span><span class="token variable">$?</span>
    <span class="token builtin class-name">echo</span>
    <span class="token punctuation">[</span> <span class="token variable">$retval</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$lockfile</span>
    <span class="token builtin class-name">return</span> <span class="token variable">$retval</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    configtest <span class="token operator">||</span> <span class="token builtin class-name">return</span> <span class="token variable">$?</span>
    stop
    <span class="token function">sleep</span> <span class="token number">1</span>
    start
<span class="token punctuation">&#125;</span>
<span class="token function-name function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    configtest <span class="token operator">||</span> <span class="token builtin class-name">return</span> <span class="token variable">$?</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> $<span class="token string">"Reloading <span class="token variable">$prog</span>: "</span>
    killproc <span class="token variable">$nginx</span> <span class="token parameter variable">-HUP</span>
    <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token variable">$?</span>
    <span class="token builtin class-name">echo</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">force_reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    restart
<span class="token punctuation">&#125;</span>
<span class="token function-name function">configtest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$nginx</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> <span class="token variable">$NGINX_CONF_FILE</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">rh_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    status <span class="token variable">$prog</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">rh_status_q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    rh_status <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
    start<span class="token punctuation">)</span>
        rh_status_q <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
        <span class="token variable">$1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    stop<span class="token punctuation">)</span>
        rh_status_q <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
        <span class="token variable">$1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    restart<span class="token operator">|</span>configtest<span class="token punctuation">)</span>
        <span class="token variable">$1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    reload<span class="token punctuation">)</span>
        rh_status_q <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">7</span>
        <span class="token variable">$1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    force-reload<span class="token punctuation">)</span>
        force_reload
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    status<span class="token punctuation">)</span>
        rh_status
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    condrestart<span class="token operator">|</span>try-restart<span class="token punctuation">)</span>
        rh_status_q <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> $<span class="token string">"Usage: <span class="token variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span>
        <span class="token builtin class-name">exit</span> <span class="token number">2</span>
<span class="token keyword">esac</span></code></pre>
<h1 id="补充一些"><a href="#补充一些" class="headerlink" title="补充一些"></a>补充一些</h1><ol>
<li>在编译安装的nginx中，可能没有conf.d目录，只要自己的nginx的配置文件中， http字段下添加include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 就可以使用conf.d目录进行不同站点独立配置文件的配置了。</li>
<li>Nginx可以支持同样使用80端口， 但是使用不同域名进行站点的发布。之前没有确切的试过，今天确实碰到了这个问题，记录下来。 在配置文件中，使用不同的server {}字段，定义不同的server_name ， 两个站点可以同时listen在80 端口上。访问的时候不同的域名会直接访问到不同的目录。Over.</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx, Application</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx性能调整（不一定对</title>
    <url>/2022/12/27/Linux/Linux_Nginx-Performance-Tuning-Pre-md/</url>
    <content><![CDATA[<h1 id="Nginx-性能优化"><a href="#Nginx-性能优化" class="headerlink" title="Nginx 性能优化"></a>Nginx 性能优化</h1><p>看了不少的文档和说明， 尝试调整一下Nginx，看看与默认的设置性能表现能有多大的差距,顺便记录一下步骤，不记录的话自己会忘记的。 </p>
<h2 id="Sysctl-参数"><a href="#Sysctl-参数" class="headerlink" title="Sysctl 参数"></a>Sysctl 参数</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/sysctl.d/99-hayden.cof
net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">8192</span> <span class="token number">4194304</span> <span class="token number">8388608</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">8192</span> <span class="token number">4194304</span> <span class="token number">8388608</span>

net.core.somaxconn <span class="token operator">=</span> <span class="token number">262144</span>

<span class="token assign-left variable">net.core.default_qdisc</span><span class="token operator">=</span>fq
<span class="token assign-left variable">net.ipv4.tcp_congestion_control</span><span class="token operator">=</span>bbr</code></pre>
<h2 id="Nginx-Config"><a href="#Nginx-Config" class="headerlink" title="Nginx Config"></a>Nginx Config</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/nginx/nginx.conf

user nginx<span class="token punctuation">;</span>
worker_processes <span class="token number">1</span><span class="token punctuation">;</span>
worker_cpu_affinity <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment"># error_log /var/log/nginx/error.log;</span>
pid /run/nginx.pid<span class="token punctuation">;</span>

<span class="token comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>
include /usr/share/nginx/modules/*.conf<span class="token punctuation">;</span>

events <span class="token punctuation">&#123;</span>
    worker_connections <span class="token number">10240</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">..</span>.<span class="token comment"># 后面的都是默认值。</span></code></pre>

<h2 id="Systemd-Nginx-Service"><a href="#Systemd-Nginx-Service" class="headerlink" title="Systemd Nginx Service"></a>Systemd Nginx Service</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ systemctl <span class="token function">cat</span> nginx
<span class="token comment"># /usr/lib/systemd/system/nginx.service</span>
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>The nginx HTTP and reverse proxy server
<span class="token assign-left variable">After</span><span class="token operator">=</span>network-online.target remote-fs.target nss-lookup.target
<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network-online.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
<span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/run/nginx.pid
<span class="token comment"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong</span>
<span class="token comment"># SELinux context. This might happen when running `nginx -t` from the cmdline.</span>
<span class="token comment"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621</span>
<span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/bin/rm <span class="token parameter variable">-f</span> /run/nginx.pid
<span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/sbin/nginx <span class="token parameter variable">-t</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/nginx
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/usr/sbin/nginx <span class="token parameter variable">-s</span> reload
<span class="token assign-left variable">KillSignal</span><span class="token operator">=</span>SIGQUIT
<span class="token assign-left variable">TimeoutStopSec</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token assign-left variable">KillMode</span><span class="token operator">=</span>process
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true
<span class="token assign-left variable">LimitAS</span><span class="token operator">=</span>infinity
<span class="token assign-left variable">LimitRSS</span><span class="token operator">=</span>infinity
<span class="token assign-left variable">LimitCORE</span><span class="token operator">=</span>infinity
<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65536</span>
<span class="token assign-left variable">LimitNPROC</span><span class="token operator">=</span><span class="token number">65535</span>
<span class="token assign-left variable">Nice</span><span class="token operator">=</span>-20

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</code></pre>
<h2 id="CPU-Isolate"><a href="#CPU-Isolate" class="headerlink" title="CPU Isolate"></a>CPU Isolate</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/default/grub
<span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 nvme_core.io_timeout=4294967295 rd.emergency=poweroff rd.shell=0 isolcpus=1 nohz_full=1 rcu_nocbs=1"</span>
<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">GRUB_DISABLE_RECOVERY</span><span class="token operator">=</span><span class="token string">"true"</span>
<span class="token assign-left variable">GRUB_TERMINAL</span><span class="token operator">=</span><span class="token string">"ec2-console"</span>
<span class="token assign-left variable">GRUB_X86_USE_32BIT</span><span class="token operator">=</span><span class="token string">"true"</span></code></pre>

<h2 id="调整中断"><a href="#调整中断" class="headerlink" title="调整中断"></a>调整中断</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /proc/interrupts
           CPU0       CPU1
 <span class="token number">27</span>:          <span class="token number">0</span>        <span class="token number">845</span>   PCI-MSI <span class="token number">81920</span>-edge      ena-mgmnt@pci:0000:00:05.0
 <span class="token number">28</span>:    <span class="token number">1455005</span>          <span class="token number">0</span>   PCI-MSI <span class="token number">81921</span>-edge      eth0-Tx-Rx-0
 <span class="token number">29</span>:          <span class="token number">0</span>    <span class="token number">1870959</span>   PCI-MSI <span class="token number">81922</span>-edge      eth0-Tx-Rx-1
LOC:     <span class="token number">119785</span>      <span class="token number">15755</span>   Local timer interrupts

~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/irq/29/smp_affinity_list
~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/irq/28/smp_affinity_list
~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/irq/27/smp_affinity_list</code></pre>

<h2 id="关闭-Irqbalance"><a href="#关闭-Irqbalance" class="headerlink" title="关闭 Irqbalance"></a>关闭 Irqbalance</h2><pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl stop irqbalance.service
~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl disable irqbalance.service
Removed symlink /etc/systemd/system/multi-user.target.wants/irqbalance.service.</code></pre>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这些都做完之后，启动一个新的实例，安装nginx之后不做任何的动作， 使用ab命令测试默认页 index.html。 对比</p>
<h2 id="调整后的实例结果如下"><a href="#调整后的实例结果如下" class="headerlink" title="调整后的实例结果如下"></a>调整后的实例结果如下</h2><p>使用命令： <code>ab -c 3000 -n 50000 http://172.31.37.166:80/index.html</code></p>
<h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        732 bytes

Concurrency Level:      3000
Time taken for tests:   2.225 seconds
Complete requests:      50000
Failed requests:        0
Total transferred:      48250000 bytes
HTML transferred:       36600000 bytes
Requests per second:    22474.64 [#&#x2F;sec] (mean)
Time per request:       133.484 [ms] (mean)
Time per request:       0.044 [ms] (mean, across all concurrent requests)
Transfer rate:          21179.71 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   67 139.7     47    1124
Processing:    25   63  16.1     61     274
Waiting:        0   47  13.7     46     254
Total:         57  130 143.2    106    1191

Percentage of the requests served within a certain time (ms)
  50%    106
  66%    125
  75%    131
  80%    135
  90%    142
  95%    149
  98%    165
  99%   1173
 100%   1191 (longest request)</code></pre>
<h3 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        732 bytes

Concurrency Level:      3000
Time taken for tests:   2.232 seconds
Complete requests:      50000
Failed requests:        0
Total transferred:      48250000 bytes
HTML transferred:       36600000 bytes
Requests per second:    22397.25 [#&#x2F;sec] (mean)
Time per request:       133.945 [ms] (mean)
Time per request:       0.045 [ms] (mean, across all concurrent requests)
Transfer rate:          21106.78 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   67 141.3     47    1092
Processing:    22   63  15.8     60     106
Waiting:        0   47  13.5     46      84
Total:         60  130 143.5    108    1175

Percentage of the requests served within a certain time (ms)
  50%    108
  66%    122
  75%    131
  80%    134
  90%    141
  95%    149
  98%    165
  99%   1150
 100%   1175 (longest request)</code></pre>
<h3 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        732 bytes

Concurrency Level:      3000
Time taken for tests:   2.220 seconds
Complete requests:      50000
Failed requests:        0
Total transferred:      48250000 bytes
HTML transferred:       36600000 bytes
Requests per second:    22526.08 [#&#x2F;sec] (mean)
Time per request:       133.179 [ms] (mean)
Time per request:       0.044 [ms] (mean, across all concurrent requests)
Transfer rate:          21228.19 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   64 123.5     49    1087
Processing:    35   65  15.1     63     108
Waiting:        0   48  13.2     48      88
Total:         61  129 125.5    115    1166

Percentage of the requests served within a certain time (ms)
  50%    115
  66%    123
  75%    132
  80%    136
  90%    140
  95%    145
  98%    159
  99%   1139
 100%   1166 (longest request)</code></pre>

<h2 id="并未调整的实例结果如下"><a href="#并未调整的实例结果如下" class="headerlink" title="并未调整的实例结果如下"></a>并未调整的实例结果如下</h2><p>使用命令：<code>ab -c 3000 -n 50000 http://172.31.45.66:80/index.html</code></p>
<h3 id="第一次-1"><a href="#第一次-1" class="headerlink" title="第一次"></a>第一次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        615 bytes

Concurrency Level:      3000
Time taken for tests:   2.197 seconds
Complete requests:      50000
Failed requests:        9856
   (Connect: 0, Receive: 0, Length: 4928, Exceptions: 4928)
Total transferred:      38221056 bytes
HTML transferred:       27719280 bytes
Requests per second:    22754.61 [#&#x2F;sec] (mean)
Time per request:       131.841 [ms] (mean)
Time per request:       0.044 [ms] (mean, across all concurrent requests)
Transfer rate:          16986.43 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   61 115.4     47    1110
Processing:    23   65  15.2     65     112
Waiting:        0   45  18.6     48      88
Total:         61  126 115.4    111    1209

Percentage of the requests served within a certain time (ms)
  50%    111
  66%    120
  75%    125
  80%    128
  90%    139
  95%    144
  98%    157
  99%   1143
 100%   1209 (longest request)
</code></pre>
<h3 id="第二次-1"><a href="#第二次-1" class="headerlink" title="第二次"></a>第二次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        615 bytes

Concurrency Level:      3000
Time taken for tests:   2.202 seconds
Complete requests:      50000
Failed requests:        9408
   (Connect: 0, Receive: 0, Length: 4704, Exceptions: 4704)
Total transferred:      38411008 bytes
HTML transferred:       27857040 bytes
Requests per second:    22710.18 [#&#x2F;sec] (mean)
Time per request:       132.099 [ms] (mean)
Time per request:       0.044 [ms] (mean, across all concurrent requests)
Transfer rate:          17037.52 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   64 123.9     48    1089
Processing:    22   65  15.9     65     116
Waiting:        0   46  18.9     48      89
Total:         65  128 125.4    111    1171

Percentage of the requests served within a certain time (ms)
  50%    111
  66%    124
  75%    128
  80%    132
  90%    141
  95%    146
  98%    166
  99%   1124
 100%   1171 (longest request)
</code></pre>
<h3 id="第三次-1"><a href="#第三次-1" class="headerlink" title="第三次"></a>第三次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        615 bytes

Concurrency Level:      3000
Time taken for tests:   2.236 seconds
Complete requests:      50000
Failed requests:        9216
   (Connect: 0, Receive: 0, Length: 4608, Exceptions: 4608)
Total transferred:      38492416 bytes
HTML transferred:       27916080 bytes
Requests per second:    22361.25 [#&#x2F;sec] (mean)
Time per request:       134.161 [ms] (mean)
Time per request:       0.045 [ms] (mean, across all concurrent requests)
Transfer rate:          16811.30 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   64 111.8     52    1110
Processing:    26   67  15.8     67     113
Waiting:        0   47  19.0     49      86
Total:         65  130 114.2    118    1205

Percentage of the requests served within a certain time (ms)
  50%    118
  66%    126
  75%    131
  80%    134
  90%    141
  95%    147
  98%    158
  99%   1117
 100%   1205 (longest request)</code></pre>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果对比的话， 可以明显的发现，Connection Time 的输出中， 明显看到Processing 阶段（在 15.8 - 16.1 之间） 和 Waiting阶段 （在 13.2 - 13.7 之间） 变得稳定。</p>
<p>观察CPU使用率， 默认的设置 CPU 的使用率在多个核心之间均衡， IRQ以及 us sys 在多个核心上平均分布。<br>调整之后， Nginx在CPU1上处理数据， 中断以及其他进程完全跑满CPU0， Nginx单独在CPU1上面工作， 最大程度的处理数据。 这也是ab命令中返回的 processing time 更短更稳定的原因（大概。</p>
<p>在调整之后， CPU1 上面会触发大量的RES中断， 这会导致当前的CPU无法完全的跑满， 这个部分还是一个问题， 我不知道RES的中断能不能也移除， 不过我感觉这个可能并不能， 应该是调度的需要， 但是过多的中断数量本身也会导致性能问题， 可能还有其他的解法， 暂时不去考虑了。遗留。</p>
<h1 id="附加静态页面之后的测试"><a href="#附加静态页面之后的测试" class="headerlink" title="附加静态页面之后的测试"></a>附加静态页面之后的测试</h1><p>Hexo Render Project</p>
<h2 id="调整之后的测试"><a href="#调整之后的测试" class="headerlink" title="调整之后的测试"></a>调整之后的测试</h2><p>命令： <code>ab -c 3000 -n 50000 http://172.31.37.166:80/index.html</code></p>
<h3 id="第一次-2"><a href="#第一次-2" class="headerlink" title="第一次"></a>第一次</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Document Path:          /index.html
Document Length:        <span class="token number">35312</span> bytes

Concurrency Level:      <span class="token number">3000</span>
Time taken <span class="token keyword">for</span> tests:   <span class="token number">3.373</span> seconds
Complete requests:      <span class="token number">50000</span>
Failed requests:        <span class="token number">0</span>
Total transferred:      <span class="token number">1777400000</span> bytes
HTML transferred:       <span class="token number">1765600000</span> bytes
Requests per second:    <span class="token number">14822.50</span> <span class="token punctuation">[</span><span class="token comment">#/sec] (mean)</span>
Time per request:       <span class="token number">202.395</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>
Time per request:       <span class="token number">0.067</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>
Transfer rate:          <span class="token number">514560.94</span> <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> received

Connection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   max
Connect:        <span class="token number">0</span>   <span class="token number">54</span> <span class="token number">104.2</span>     <span class="token number">44</span>    <span class="token number">1061</span>
Processing:    <span class="token number">37</span>  <span class="token number">144</span>  <span class="token number">23.0</span>    <span class="token number">145</span>     <span class="token number">196</span>
Waiting:        <span class="token number">0</span>   <span class="token number">41</span>  <span class="token number">14.4</span>     <span class="token number">38</span>     <span class="token number">103</span>
Total:         <span class="token number">80</span>  <span class="token number">198</span> <span class="token number">108.1</span>    <span class="token number">193</span>    <span class="token number">1229</span>

Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token number">50</span>%    <span class="token number">193</span>
  <span class="token number">66</span>%    <span class="token number">200</span>
  <span class="token number">75</span>%    <span class="token number">207</span>
  <span class="token number">80</span>%    <span class="token number">209</span>
  <span class="token number">90</span>%    <span class="token number">215</span>
  <span class="token number">95</span>%    <span class="token number">218</span>
  <span class="token number">98</span>%    <span class="token number">231</span>
  <span class="token number">99</span>%   <span class="token number">1194</span>
 <span class="token number">100</span>%   <span class="token number">1229</span> <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span>
</code></pre>
<h3 id="第二次-2"><a href="#第二次-2" class="headerlink" title="第二次"></a>第二次</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Document Path:          /index.html
Document Length:        <span class="token number">35312</span> bytes

Concurrency Level:      <span class="token number">3000</span>
Time taken <span class="token keyword">for</span> tests:   <span class="token number">3.094</span> seconds
Complete requests:      <span class="token number">50000</span>
Failed requests:        <span class="token number">0</span>
Total transferred:      <span class="token number">1777400000</span> bytes
HTML transferred:       <span class="token number">1765600000</span> bytes
Requests per second:    <span class="token number">16157.77</span> <span class="token punctuation">[</span><span class="token comment">#/sec] (mean)</span>
Time per request:       <span class="token number">185.669</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>
Time per request:       <span class="token number">0.062</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>
Transfer rate:          <span class="token number">560914.54</span> <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> received

Connection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   max
Connect:        <span class="token number">0</span>   <span class="token number">54</span> <span class="token number">120.1</span>     <span class="token number">39</span>    <span class="token number">1070</span>
Processing:    <span class="token number">64</span>  <span class="token number">127</span>  <span class="token number">19.7</span>    <span class="token number">128</span>     <span class="token number">180</span>
Waiting:        <span class="token number">0</span>   <span class="token number">37</span>  <span class="token number">14.1</span>     <span class="token number">35</span>      <span class="token number">98</span>
Total:        <span class="token number">106</span>  <span class="token number">181</span> <span class="token number">123.6</span>    <span class="token number">171</span>    <span class="token number">1240</span>

Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token number">50</span>%    <span class="token number">171</span>
  <span class="token number">66</span>%    <span class="token number">180</span>
  <span class="token number">75</span>%    <span class="token number">183</span>
  <span class="token number">80</span>%    <span class="token number">184</span>
  <span class="token number">90</span>%    <span class="token number">190</span>
  <span class="token number">95</span>%    <span class="token number">195</span>
  <span class="token number">98</span>%    <span class="token number">204</span>
  <span class="token number">99</span>%   <span class="token number">1184</span>
 <span class="token number">100</span>%   <span class="token number">1240</span> <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span>
</code></pre>
<h3 id="第三次-2"><a href="#第三次-2" class="headerlink" title="第三次"></a>第三次</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Document Path:          /index.html
Document Length:        <span class="token number">35312</span> bytes

Concurrency Level:      <span class="token number">3000</span>
Time taken <span class="token keyword">for</span> tests:   <span class="token number">3.212</span> seconds
Complete requests:      <span class="token number">50000</span>
Failed requests:        <span class="token number">0</span>
Total transferred:      <span class="token number">1777400000</span> bytes
HTML transferred:       <span class="token number">1765600000</span> bytes
Requests per second:    <span class="token number">15565.24</span> <span class="token punctuation">[</span><span class="token comment">#/sec] (mean)</span>
Time per request:       <span class="token number">192.737</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>
Time per request:       <span class="token number">0.064</span> <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>
Transfer rate:          <span class="token number">540344.85</span> <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> received

Connection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   max
Connect:        <span class="token number">0</span>   <span class="token number">55</span> <span class="token number">115.1</span>     <span class="token number">43</span>    <span class="token number">1107</span>
Processing:    <span class="token number">57</span>  <span class="token number">133</span>  <span class="token number">23.3</span>    <span class="token number">136</span>     <span class="token number">190</span>
Waiting:        <span class="token number">0</span>   <span class="token number">39</span>  <span class="token number">14.6</span>     <span class="token number">36</span>     <span class="token number">101</span>
Total:        <span class="token number">110</span>  <span class="token number">188</span> <span class="token number">121.2</span>    <span class="token number">182</span>    <span class="token number">1290</span>

Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
  <span class="token number">50</span>%    <span class="token number">182</span>
  <span class="token number">66</span>%    <span class="token number">188</span>
  <span class="token number">75</span>%    <span class="token number">194</span>
  <span class="token number">80</span>%    <span class="token number">198</span>
  <span class="token number">90</span>%    <span class="token number">205</span>
  <span class="token number">95</span>%    <span class="token number">212</span>
  <span class="token number">98</span>%    <span class="token number">223</span>
  <span class="token number">99</span>%   <span class="token number">1238</span>
 <span class="token number">100</span>%   <span class="token number">1290</span> <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span>
</code></pre>

<h2 id="未调整的测试"><a href="#未调整的测试" class="headerlink" title="未调整的测试"></a>未调整的测试</h2><p>命令： <code>ab -c 3000 -n 50000 http://172.31.35.221:80/index.html</code></p>
<h3 id="第一次-3"><a href="#第一次-3" class="headerlink" title="第一次"></a>第一次</h3><pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        0 bytes

Concurrency Level:      3000
Time taken for tests:   3.217 seconds
Complete requests:      50000
Failed requests:        50000
   (Connect: 0, Receive: 0, Length: 48496, Exceptions: 1504)
Total transferred:      1723935808 bytes
HTML transferred:       1712490752 bytes
Requests per second:    15543.00 [#&#x2F;sec] (mean)
Time per request:       193.013 [ms] (mean)
Time per request:       0.064 [ms] (mean, across all concurrent requests)
Transfer rate:          523342.50 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   50 115.9     37    1091
Processing:    28  139  29.4    148     338
Waiting:        0   45  13.6     48     249
Total:         60  189 122.8    185    1287

Percentage of the requests served within a certain time (ms)
  50%    185
  66%    195
  75%    197
  80%    198
  90%    211
  95%    216
  98%    225
  99%   1233
 100%   1287 (longest request)</code></pre>
<p>未调整的情况下直接就失败了。。 所有的请求最终都Failed了， 尝试调小。<br>命令： <code>ab -c 1897 -n 50000 http://172.31.35.221/index.html</code><br>可以接受的最大值是：</p>
<pre class="language-none"><code class="language-none">Document Path:          &#x2F;index.html
Document Length:        35312 bytes

Concurrency Level:      1897
Time taken for tests:   3.206 seconds
Complete requests:      50000
Failed requests:        0
Total transferred:      1777400000 bytes
HTML transferred:       1765600000 bytes
Requests per second:    15597.31 [#&#x2F;sec] (mean)
Time per request:       121.624 [ms] (mean)
Time per request:       0.064 [ms] (mean, across all concurrent requests)
Transfer rate:          541458.01 [Kbytes&#x2F;sec] received

Connection Times (ms)
              min  mean[+&#x2F;-sd] median   max
Connect:        0   30  86.9     23    1062
Processing:    30   90  14.9     93     274
Waiting:        0   30   8.6     30     225
Total:         53  120  89.5    117    1180

Percentage of the requests served within a certain time (ms)
  50%    117
  66%    121
  75%    124
  80%    125
  90%    132
  95%    140
  98%    145
  99%    147
 100%   1180 (longest request)</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx, Application</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理笔记</title>
    <url>/2019/07/13/Linux/Linux_Nginx-Proxy/</url>
    <content><![CDATA[<p>Nginx的反向代理笔记。</p>
<h2 id="Nginx程序的主要功能"><a href="#Nginx程序的主要功能" class="headerlink" title="Nginx程序的主要功能"></a>Nginx程序的主要功能</h2><ol>
<li>load configuration</li>
<li>launch workers</li>
<li>non-stop upgrade</li>
</ol>
<p>可以使用epoll单进程响应多个用户请求，如果是BSD可以使用kevent时间驱动模式响应。<br>磁盘一侧使用的是高级IO中的sendfile机制，AIO异步IO，以及内存映射机制来完成硬盘IO的高级特性。</p>
<ul>
<li>Nginx官方文档及参数说明在这里： <a href="http://nginx.org/en/docs/">nginx documentation</a></li>
</ul>
<h3 id="SNAT-amp-amp-DNAT"><a href="#SNAT-amp-amp-DNAT" class="headerlink" title="SNAT &amp;&amp; DNAT"></a>SNAT &amp;&amp; DNAT</h3><p>主要是工作在三层&#x2F;四层的协议<br>SNAT主要的功能是<strong>隐藏客户端</strong>，DNAT对服务器<strong>接受并转发请求</strong>。<br>NAT功能无法触及7层协议的上面三层，所以无权控制上面的数据包内容，所以NAT不能对应用层的内容作出更改及缓存。只能对网络的内容及数据包进行直接的转发以及控制。</p>
<h3 id="正向代理-amp-amp-反向代理"><a href="#正向代理-amp-amp-反向代理" class="headerlink" title="正向代理 &amp;&amp; 反向代理"></a>正向代理 &amp;&amp; 反向代理</h3><p>正向代理是通过代理服务器<strong>对客户端发出</strong>的请求进行<strong>全部修改及转发</strong>；<br>反向代理是通过代理服务器<strong>对发送到服务器</strong>的请求进行<strong>全部修改及转发</strong>；<br>由于代理的服务器可以控制判定URL的资源内容，因此可以对站点进行动静分离处理。<br>如果这个功能可以工作在应用层叫做代理，如果工作类似SNAT上的叫做正向代理，工作类似DNAT就叫做反向代理。</p>
<h2 id="Nginx反向代理服务器"><a href="#Nginx反向代理服务器" class="headerlink" title="Nginx反向代理服务器"></a>Nginx反向代理服务器</h2><ul>
<li>面向客户端：该方向支持两种协议： http&#x2F;https</li>
<li>面向服务端：该方向支持HTTP&#x2F;FastCGI&#x2F;memcache协议<br>Nginx需要支持相关的协议需要有相关协议的对应模块<br>原理以及流程：<br>  从远程服务器取得数据进行nginx服务器本地的缓存，然后响应给客户端.<br>可修改或具有修改意义的报文有两种：第一种是发到后面处理服务器的报文；第二种是发给客户端的响应报文。</li>
</ul>
<h2 id="Nginx的代理模块"><a href="#Nginx的代理模块" class="headerlink" title="Nginx的代理模块"></a>Nginx的代理模块</h2><ol>
<li><p>ngx_http_proxy_module – Nginx的反向代理模块官方说明：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">Module ngx_http_proxy_module</a><br> 添加新的反向代理服务配置文件：<br> vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy.conf</p>
 <pre class="language-none"><code class="language-none">server &#123;
    listen 80；
    server_name [SERVER_FQDN]
    location &#x2F; &#123;
        proxy_pass http:&#x2F;&#x2F;[IP_ADDR:PORT]
        # 字段后加上&#x2F;表示将location后的目录映射为后端服务器的目录；
        # 例如：如果是location &#x2F;test，那么在反向代理不加&#x2F;的时候，访问的是后端真实的&#x2F;test目录；
        # 如果加上&#x2F;，访问到的是后端服务器的根目录；
        # 当使用了正则表达式进行了匹配的时候后面不能添加&#x2F;符号；
    &#125;

    location ~* \.&#123;jpg|jpeg|png&#125;$ &#123;
        proxy_pass http:&#x2F;&#x2F;[IP_ADDR:PORT];
        # 正则表达模式下部分在代理服务器的地址后面加上&#x2F;；
    &#125;
&#125;</code></pre></li>
<li><p>proxy_pass [RealServerAddress]；# 设置反向代理服务器的地址；<br> proxy_set_header [field] [value]; # 设定传递到后端服务器的请求报文首部的值；<br> proxy_set_header – Nginx的设定代理头文件参数模块的官方说明：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header">proxy_set_header</a>    </p>
 <pre class="language-none"><code class="language-none">proxy_set_header X-Real-IP $remote_addr;
在设定字段后，更改后端真实服务器的日志记录的值，即可记录所有的真正的客户端IP；  
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </code></pre>
</li>
<li><p>proxy_http_headers_module # 设定发给客户端的响应报文的地址的值；<br> Module ngx_http_headers_module – Nginx的客户端响应报文模块官方说明：  <a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html">Module ngx_http_headers_module</a>  </p>
 <pre class="language-none"><code class="language-none">add_header X_Via $server_addr;&#96; # 显示后端服务器的真实地址；</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx, Application</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置文件中if判断与try_files</title>
    <url>/2019/09/19/Linux/Linux_Nginx-if-try-files-Notwork/</url>
    <content><![CDATA[<p>Nginx的if判断问题，导致try_files字段未能正常生效。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-none"><code class="language-none">server &#123;
  listen 80;
  server_name liarlee.site;

  set $mobile_rewrite do_not_perform;
  if ($http_user_agent ~* &quot;(android|bb\d+|meego).+mobile|avantgo|bada\&#x2F;|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\&#x2F;|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino&quot;) &#123;
    set $mobile_rewrite perform;
  &#125;
  if ($http_user_agent ~* &quot;^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\&#x2F;|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\&#x2F;)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\&#x2F;)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\&#x2F;(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\&#x2F;|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\&#x2F;|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\&#x2F;|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)&quot;) &#123;
    set $mobile_rewrite perform;
  &#125;
  if ($http_cookie ~ &#39;gotopc&#x3D;true&#39;) &#123;
    set $mobile_rewrite do_not_perform;
  &#125;

  location &#x2F; &#123;
    root &#x2F;var&#x2F;html&#x2F;www&#x2F;[PC_WEB_ROOT];
     # 问题出现在了这里。
    if ($mobile_rewrite &#x3D; perform) &#123;
      root &#x2F;var&#x2F;html&#x2F;www&#x2F;[MOBILE_WEB_ROOT];
    &#125;
    index index.html index.htm
    error_page 404 index.html
    # 问题就出现在了这里。
    try_files $uri $uri&#x2F; &#x2F;index.html 404; 
  &#125;
&#125;</code></pre>
<h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><p>在访问请求来的同时，判断是不是手机访问，如果是PC使用默认的PC_WEB_ROOT,  如果是手机的话，访问到MOBILE_WEB_ROOT。本身逻辑和使用是没有问题的，但是需要使用try_files字段的时候，会导致PC站点的tryfiles可以正常生效；但是手机不会有tryfile的效果。</p>
<h2 id="可行的方式-Proxypass"><a href="#可行的方式-Proxypass" class="headerlink" title="可行的方式 - Proxypass"></a>可行的方式 - Proxypass</h2><p>看到了一篇文章说到nginx的IF语句，可以正常不出奇怪问题的只有<code>Proxy_pass</code>,<code>Rewrite</code>两个，因为项目无法用rewrite所以选择了Proxypass。<br>配置文件分为两个部分，每个网站放在一个Server下。</p>
<h3 id="PC配置文件"><a href="#PC配置文件" class="headerlink" title="PC配置文件"></a>PC配置文件</h3><pre class="language-none"><code class="language-none">server &#123;
  listen 80;
  server_name liarlee.site;

  set $mobile_rewrite do_not_perform;
  if ($http_user_agent ~* &quot;(android|bb\d+|meego).+mobile|avantgo|bada\&#x2F;|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\&#x2F;|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino&quot;) &#123;
    set $mobile_rewrite perform;
  &#125;
  if ($http_user_agent ~* &quot;^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\&#x2F;|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\&#x2F;)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\&#x2F;)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\&#x2F;(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\&#x2F;|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\&#x2F;|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\&#x2F;|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)&quot;) &#123;
    set $mobile_rewrite perform;
  &#125;
  if ($http_cookie ~ &#39;gotopc&#x3D;true&#39;) &#123;
    set $mobile_rewrite do_not_perform;
  &#125;

  location &#x2F; &#123;
    root &#x2F;var&#x2F;html&#x2F;www&#x2F;[PC_WEB_ROOT];
    
    if ($mobile_rewrite &#x3D; perform) &#123;
      proxy_pass http:&#x2F;&#x2F;127.0.0.1:81; # 更改这里为proxypass；
    &#125;

    index index.html index.htm
    error_page 404 index.html
    
    try_files $uri $uri&#x2F; &#x2F;index.html 404; 
  &#125;
&#125;	
&#125;
</code></pre>
<h3 id="MOBILE配置文件"><a href="#MOBILE配置文件" class="headerlink" title="MOBILE配置文件"></a>MOBILE配置文件</h3><pre class="language-none"><code class="language-none">server &#123;
  listen 81;
    server_name 127.0.0.1;
    location &#x2F; &#123;
    root &#x2F;var&#x2F;www&#x2F;html&#x2F;[MOBILE_WEB_ROOT];
    index index.html index.htm;
    error_page 404 index.html;
    try_files $uri $uri&#x2F; &#x2F;index.html 404; 
  &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx, Application</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Performance Test</title>
    <url>/2022/04/19/Linux/Linux_Nginx%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%8E%8B%E6%B5%8B/</url>
    <content><![CDATA[<p>写在最前面， 这个问题还在研究中， 我目前还没有合适的模型用来研究这个问题， Pending….</p>
<h2 id="Nginx-性能测试与压力计算"><a href="#Nginx-性能测试与压力计算" class="headerlink" title="Nginx 性能测试与压力计算"></a>Nginx 性能测试与压力计算</h2><p>使用al2023  + 默认的yum仓库软件版本， 具体信息记录如下： </p>
<p>按照下面的配置， 在Nginx上面发布一个目录， 其中放了一个Fedora镜像， 大小大约2.3GB， 固定Nginx处理请求的大小， 控制大部分的因素来尝试获取精确的结果。</p>
<ol>
<li><p>OS Version</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-53-146 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release</span>
<span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Amazon Linux"</span>
<span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"2023"</span>
<span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token string">"amzn"</span>
<span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span><span class="token string">"fedora"</span>
<span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"2023"</span>
<span class="token assign-left variable">PLATFORM_ID</span><span class="token operator">=</span><span class="token string">"platform:al2023"</span>
<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"Amazon Linux 2023"</span>
<span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"0;33"</span>
<span class="token assign-left variable">CPE_NAME</span><span class="token operator">=</span><span class="token string">"cpe:2.3:o:amazon:amazon_linux:2023"</span>
<span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://aws.amazon.com/linux/"</span>
<span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://github.com/amazonlinux/amazon-linux-2023"</span>
<span class="token assign-left variable">SUPPORT_END</span><span class="token operator">=</span><span class="token string">"2028-03-01"</span></code></pre>
</li>
<li><p>在一个机器上面部署MySQL 然后初始化配置一个密码和用户。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-53-200 ~<span class="token punctuation">]</span><span class="token comment"># mysql --version</span>
mysql  Ver <span class="token number">8.0</span>.32 <span class="token keyword">for</span> Linux on x86_64 <span class="token punctuation">(</span>MySQL Community Server - GPL<span class="token punctuation">)</span></code></pre>
</li>
<li><p>直接使用bitnami的wordpress， 仅部署wordpress在另一个机器上面，然后配置连接到上面的那台数据库。 </p>
</li>
<li><p>额外配置一下Docker-compose 的CPU affinity， 绑到cpu0上面， 让这个Container只能用cpu0, 模拟只有一个核心， 后面应该还会给他放开。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">   <span class="token punctuation">---</span>
   <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span>
   <span class="token key atrule">services</span><span class="token punctuation">:</span>
     <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
       <span class="token key atrule">cpuset</span><span class="token punctuation">:</span> <span class="token string">"0"</span>
       <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host

5. 尝试给点压力， 做个基准测试。

<span class="token comment">### 测试1 单线程计算QPS</span>

<span class="token punctuation">></span> 公式：  1000ms/RT = QPS 
<span class="token punctuation">></span>
<span class="token punctuation">></span> 这个是单线程的QPS 与 RT 的关系， 试图走一把流程验证这个。 

运行命令 wrk 配置 1connection 1thread 进行测试， 测试时间5分钟。

获取 RT，HTTP请求从发出到响应的时间 ： 

<span class="token tag">!</span><span class="token punctuation">[</span>2023<span class="token punctuation">-</span>04<span class="token punctuation">-</span>27_10<span class="token punctuation">-</span>38.png<span class="token punctuation">]</span>(https<span class="token punctuation">:</span>//s2.loli.net/2023/04/27/pf2Z5erTzcayPFJ.png)

基于当前获取到的RT就可以计算出单线程的QPS ： 

```bash
RT：45ms <span class="token comment"># 这个时候获取的RT是客户端从发出数据包 到 收到完整的请求的页面返回的时间， 基于上面的抓包结果计算。</span>
1000ms/45ms = 22 QPS</code></pre></li>
</ol>
<p>实际命令返回的结果： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">~ ❯❯❯ wrk <span class="token parameter variable">-t1</span> <span class="token parameter variable">-c1</span> <span class="token parameter variable">-d5m</span> <span class="token parameter variable">--latency</span> http://nginx.liarlee.site:8080
Running 5m <span class="token builtin class-name">test</span> @ http://nginx.liarlee.site:8080
  <span class="token number">1</span> threads and <span class="token number">1</span> connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    <span class="token number">45</span>.00ms    <span class="token number">3</span>.60ms <span class="token number">169</span>.02ms   <span class="token number">88.75</span>%
    Req/Sec    <span class="token number">22.24</span>      <span class="token number">4.27</span>    <span class="token number">30.00</span>     <span class="token number">76.72</span>%
  Latency Distribution
     <span class="token number">50</span>%   <span class="token number">44</span>.28ms
     <span class="token number">75</span>%   <span class="token number">46</span>.23ms
     <span class="token number">90</span>%   <span class="token number">48</span>.51ms
     <span class="token number">99</span>%   <span class="token number">54</span>.40ms
  <span class="token number">6668</span> requests <span class="token keyword">in</span> <span class="token number">5</span>.00m, <span class="token number">337</span>.69MB <span class="token builtin class-name">read</span>
Requests/sec:     <span class="token number">22.23</span> <span class="token comment"># 确实是 22左右， 基本上和计算得出的结果一致。</span>
Transfer/sec:      <span class="token number">1</span>.13MB</code></pre>

<h3 id="测试2-计算服务当前的最佳线程数量"><a href="#测试2-计算服务当前的最佳线程数量" class="headerlink" title="测试2 计算服务当前的最佳线程数量"></a>测试2 计算服务当前的最佳线程数量</h3><p>默认的情况下， 当一个进程处理的时候， 线程接收到请求， OnCPU处理这个请求， 发出数据库查询，切换到Sleep状态，数据库处理完成，线程回到CPU继续运算，发送结果给客户端，这样完成一个Request。</p>
<p>计算服务的最佳线程数量其实是 需要多少个线程占用CPU，最终可以填满 CPU 1s 的时间， 让CPU尽可能都用来处理业务请求。</p>
<p>所以最大的线程数量是变化的， 与CPU time 相关 或者说 与RT相关， 对于一些特定的请求，控制了大部分变量的场景下， 可以计算一个最佳的线程数量。 计算公式： </p>
<blockquote>
<p>最佳线程数： CPU TIme + Wait Time &#x2F; CPU Time &#x3D; 2 + 42 &#x2F; 2 &#x3D; 22  </p>
</blockquote>
<h2 id="打开文件数限制可能的并发数量"><a href="#打开文件数限制可能的并发数量" class="headerlink" title="打开文件数限制可能的并发数量"></a>打开文件数限制可能的并发数量</h2><p>测试 conntrack 的问题， 发现连接数不太高， 试图通过wrk 提高并发的连接数量。<br>使用命令： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">wrk <span class="token parameter variable">-t2</span> <span class="token parameter variable">-c30000</span> <span class="token parameter variable">-d30s</span> http://reg.liarlee.site:80</code></pre>
<p>如果我的理解没有问题， 那么我应该可以创建30000个连接 在 客户端 和 服务端 之间。<br>但是结果： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 客户端尝试建立 8000c</span>
ec2-user@arch ~<span class="token operator">></span> wrk <span class="token parameter variable">-t1</span> <span class="token parameter variable">-c8000</span> <span class="token parameter variable">-d30s</span> http://reg.liarlee.site:80
Running 30s <span class="token builtin class-name">test</span> @ http://reg.liarlee.site:80
  <span class="token number">1</span> threads and <span class="token number">8000</span> connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    <span class="token number">49</span>.94ms   <span class="token number">42</span>.36ms <span class="token number">428</span>.68ms   <span class="token number">92.65</span>%
    Req/Sec    <span class="token number">21</span>.15k     <span class="token number">8</span>.19k   <span class="token number">41</span>.30k    <span class="token number">66.08</span>%
  <span class="token number">608596</span> requests <span class="token keyword">in</span> <span class="token number">30</span>.04s, <span class="token number">218</span>.23MB <span class="token builtin class-name">read</span>
  Socket errors: connect <span class="token number">6980</span>, <span class="token builtin class-name">read</span> <span class="token number">0</span>, <span class="token function">write</span> <span class="token number">0</span>, <span class="token function">timeout</span> <span class="token number">0</span>
Requests/sec:  <span class="token number">20260.60</span>
Transfer/sec:      <span class="token number">7</span>.27MB

<span class="token comment"># 服务端看到的是： </span>
<span class="token punctuation">[</span>root@reg tools<span class="token punctuation">]</span><span class="token comment"># ss -s</span>
Total: <span class="token number">282</span>
TCP:   <span class="token number">1103</span> <span class="token punctuation">(</span>estab <span class="token number">28</span>, closed <span class="token number">1063</span>, orphaned <span class="token number">0</span>, timewait <span class="token number">2</span><span class="token punctuation">)</span>

Transport Total     IP        IPv6
RAW	  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>
UDP	  <span class="token number">8</span>         <span class="token number">4</span>         <span class="token number">4</span>
TCP	  <span class="token number">40</span>        <span class="token number">36</span>        <span class="token number">4</span>
INET	  <span class="token number">48</span>        <span class="token number">40</span>        <span class="token number">8</span>
FRAG	  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span></code></pre>
<p>这和预期的差距挺大的， 1103 让我非常容易的想到了 1024 的文件描述符限制。 于是 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ec2-user@arch ~<span class="token operator">></span> <span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span>
<span class="token number">1024</span></code></pre>
<p>客户端  wrk 的文件描述符可用调大到 100000 。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 客户端</span>
ec2-user@arch ~ <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span>
<span class="token number">100000</span>
ec2-user@arch ~<span class="token operator">></span> wrk <span class="token parameter variable">-t2</span> <span class="token parameter variable">-c30000</span> <span class="token parameter variable">-d30s</span> http://reg.liarlee.site:80
Running 30s <span class="token builtin class-name">test</span> @ http://reg.liarlee.site:80
  <span class="token number">2</span> threads and <span class="token number">30000</span> connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   <span class="token number">515</span>.29ms  <span class="token number">411</span>.20ms   <span class="token number">2</span>.00s    <span class="token number">78.35</span>%
    Req/Sec     <span class="token number">1</span>.76k     <span class="token number">2</span>.70k   <span class="token number">11</span>.96k    <span class="token number">85.71</span>%
  <span class="token number">39021</span> requests <span class="token keyword">in</span> <span class="token number">30</span>.28s, <span class="token number">13</span>.99MB <span class="token builtin class-name">read</span>
  Socket errors: connect <span class="token number">0</span>, <span class="token builtin class-name">read</span> <span class="token number">298852</span>, <span class="token function">write</span> <span class="token number">16</span>, <span class="token function">timeout</span> <span class="token number">3115</span>
Requests/sec:   <span class="token number">1288.65</span>
Transfer/sec:    <span class="token number">473</span>.17KB

<span class="token comment"># 服务端</span>
<span class="token punctuation">[</span>root@reg tools<span class="token punctuation">]</span><span class="token comment"># ss -s</span>
Total: <span class="token number">282</span>
TCP:   <span class="token number">7544</span> <span class="token punctuation">(</span>estab <span class="token number">28</span>, closed <span class="token number">7504</span>, orphaned <span class="token number">1641</span>, timewait <span class="token number">2</span><span class="token punctuation">)</span>

Transport Total     IP        IPv6
RAW	  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>
UDP	  <span class="token number">8</span>         <span class="token number">4</span>         <span class="token number">4</span>
TCP	  <span class="token number">40</span>        <span class="token number">36</span>        <span class="token number">4</span>
INET	  <span class="token number">48</span>        <span class="token number">40</span>        <span class="token number">8</span>
FRAG	  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span></code></pre>
<p>如果从上面的角度来看， 那么客户端的打开文件数是限制， 现在打开文件数调大了， 服务端还是无法建立更多的连接， 这个还得继续看看 ， 我感觉是cpu的问题， 毕竟我访问的页面的是有内容的， 不是一个空请求。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 尝试看了以下服务端的ss 命令</span>
ec2-user@arch ~<span class="token operator">></span> ss <span class="token parameter variable">-s</span>
Total: <span class="token number">31669</span>
TCP:   <span class="token number">31268</span> <span class="token punctuation">(</span>estab <span class="token number">7959</span>, closed <span class="token number">1182</span>, orphaned <span class="token number">1250</span>, timewait <span class="token number">1</span><span class="token punctuation">)</span>

Transport Total     IP        IPv6
RAW	  <span class="token number">1</span>         <span class="token number">0</span>         <span class="token number">1</span>
UDP	  <span class="token number">4</span>         <span class="token number">2</span>         <span class="token number">2</span>
TCP	  <span class="token number">30086</span>     <span class="token number">30080</span>     <span class="token number">6</span>
INET	  <span class="token number">30091</span>     <span class="token number">30082</span>     <span class="token number">9</span>
FRAG	  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span></code></pre>
<p>确实发起了30000 但是 进入estab状态的连接只有 8000 左右。这基本上可以确定是服务端的限制了，具体是什么地方限制了待查。<br>客户端 ： c5 实例类型上面的 wrk<br>服务端 ： t3.micro  - docker compose 部署的 harbor</p>
<h2 id="连接异常导致的orphans"><a href="#连接异常导致的orphans" class="headerlink" title="连接异常导致的orphans"></a>连接异常导致的orphans</h2><p>一个遗憾的事情， 最近遇到了一个可能是 cilium 的一个问题， 在小规模集群的场景下， Cilium 会错误的处理FIN ， FIN ACK， 导致安全组的 Connection Track 数量被打满。 之前没有注意过这个行为，在Docker的环境中测试下， 尝试使用 iptables 屏蔽容器发送出来的FIN， 记录步骤和命令： </p>
<pre class="language-none"><code class="language-none">dnf install -y docker
systemctl enable --now docker
docker pull reg.liarlee.site&#x2F;docker.io&#x2F;library&#x2F;nginx&#x2F;nginx:latest
docker run -dt --rm --name nginx -p 81:80 reg.liarlee.site&#x2F;docker.io&#x2F;library&#x2F;nginx:latest 
docker ps 看到容器已经启动就可以了</code></pre>
<p>查看容器的IP地址： </p>
<pre class="language-none"><code class="language-none">[root@ip-172-31-54-32 ~]# docker inspect nginx | grep -i ipaddress
            &quot;SecondaryIPAddresses&quot;: null,
            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,
                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</code></pre>
<p>添加一个规则在 DOCKER-ISOLATION-STAGE-1 链上。</p>
<pre class="language-none"><code class="language-none">[root@ip-172-31-54-32 ~]# iptables -I DOCKER-ISOLATION-STAGE-1 1 -p tcp -s 172.17.0.2 --tcp-flags FIN FIN -j DROP
[root@ip-172-31-54-32 ~]# iptables -I OUTPUT 1 -p tcp -s 172.31.47.174 -tcp-flags FIN FIN -j DROP</code></pre>
<p>查看iptables 链表规则， DOCKER-ISOLATION-STAGE-1。</p>
<pre class="language-none"><code class="language-none">[root@ip-172-31-54-32 ~]# iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination

Chain FORWARD (policy DROP 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1      47M   13G DOCKER-USER  all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
2      47M   13G DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
3      24M 1713M ACCEPT     all  --  *      docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            ctstate RELATED,ESTABLISHED
4    12371  742K DOCKER     all  --  *      docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
5      24M   11G ACCEPT     all  --  docker0 !docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
6        0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination

Chain DOCKER (1 references)
num   pkts bytes target     prot opt in     out     source               destination
1    11933  716K ACCEPT     tcp  --  !docker0 docker0  0.0.0.0&#x2F;0            172.17.0.2           tcp dpt:80

Chain DOCKER-ISOLATION-STAGE-1 (1 references)
num   pkts bytes target     prot opt in     out     source               destination
1      24M   11G DOCKER-ISOLATION-STAGE-2  all  --  docker0 !docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
2    30690 1596K DROP       tcp  --  *      *       172.17.0.2           0.0.0.0&#x2F;0            tcp flags:0x01&#x2F;0x01 # 在这里
3      47M   13G RETURN     all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0

Chain DOCKER-ISOLATION-STAGE-2 (1 references)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 DROP       all  --  *      docker0  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
2      24M   11G RETURN     all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0

Chain DOCKER-USER (1 references)
num   pkts bytes target     prot opt in     out     source               destination
1      47M   13G RETURN     all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0</code></pre>
<p>使用 wrk 在客户端发起测试： </p>
<pre class="language-none"><code class="language-none">ec2-user@arch ~&gt; wrk -t1 -c1000 -d3000s http:&#x2F;&#x2F;172.31.54.32:81
Running 50m test @ http:&#x2F;&#x2F;172.31.54.32:81
  1 threads and 1000 connections</code></pre>
<p>在系统内部可以看到有一部分 orphans 连接： </p>
<pre class="language-none"><code class="language-none">[root@ip-172-31-54-32 ~]# ss -s
Total: 233
TCP:   2019 (estab 5, closed 2009, orphaned 1006, timewait 1)

Transport Total     IP        IPv6
RAW	  1         0         1
UDP	  4         2         2
TCP	  10        8         2
INET	  15        10        5
FRAG	  0         0         0</code></pre>
<p>记录下GPT告诉我的答案： </p>
<blockquote>
<p>TCP orphans 是指没有与任何文件描述符关联的 socket，也就是说应用程序已经关闭了这个 socket，但是内核还没有释放它的资源，因为 TCP 还没有完成它的状态转换。<br>    TCP orphans 通常出现在以下几种 TCP 状态：FIN-WAIT-1, FIN-WAIT-2, LAST-ACK, CLOSING 和 TIME-WAIT。这些状态都是在 TCP 四次挥手的过程中产生的，表示连接正在关闭或已经关闭，但是还需要等待一段时间才能完全释放。<br>    TCP orphans 的产生可能有以下几种原因：<br>    应用程序关闭了 socket，但是对方没有及时回复 ACK 或 FIN 报文，导致连接一直处于 FIN-WAIT-1 或 FIN-WAIT-2 状态。<br>    应用程序关闭了 socket，但是对方回复了 FIN 报文，导致连接进入 CLOSING 状态，然后双方都没有及时回复 ACK 报文，导致连接一直处于 CLOSING 状态。<br>    应用程序关闭了 socket，但是对方回复了 ACK 报文，导致连接进入 LAST-ACK 状态，然后对方没有及时回复 FIN 报文，导致连接一直处于 LAST-ACK 状态。<br>    应用程序关闭了 socket，但是对方回复了 FIN 和 ACK 报文，导致连接进入 TIME-WAIT 状态，然后需要等待 2MSL 的时间才能释放连接。<br>    应用程序关闭了 socket，但是由于网络延迟或丢包等原因，导致上述状态转换过程中的报文丢失或重传，延长了连接的关闭时间。</p>
</blockquote>
<p><a href="https://github.com/moooofly/MarkSomethingDownLLS/blob/master/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%20iptables%20%E4%B8%AD%20connection%20tracking%20(conntrack).md">https://github.com/moooofly/MarkSomethingDownLLS/blob/master/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%20iptables%20%E4%B8%AD%20connection%20tracking%20(conntrack).md</a></p>
<p>新的测试步骤： </p>
<pre class="language-none"><code class="language-none"># 清理IPtables规则
iptables -Z &amp;&amp; iptables -X &amp;&amp; iptables -F
iptables -t raw -Z &amp;&amp; iptables -t raw -F &amp;&amp; iptables -t raw -X

# 创建新的IPtables规则， 屏蔽 FIN ， RST

# Server block self FIN RST 
# Role Nginx Server  172.31.54.32
iptables -I OUTPUT 1 -p tcp -s 171.31.54.32 --tcp-flags FIN FIN -j DROP
iptables -I OUTPUT 1 -p tcp -s 172.31.54.32 --tcp-flags RST RST -j DROP

# Client block self FIN RST 
# Role Client  172.31.36.129
iptables -I OUTPUT 1 -p tcp -s 172.31.36.129 --tcp-flags FIN FIN -j DROP
iptables -I OUTPUT 1 -p tcp -s 172.31.36.129 --tcp-flags RST RST -j DROP</code></pre>
<p>按照这个设置， 使用tcpdump抓报包， 双方是没有 FIN 和 RST 的， 说明iptables规则层面是生效。<br>查看 ss -s 的数据， 客户端的连接数是在 10000 左右的， 服务端也是；<br>使用命令中断客户端的wrk程序之后，客户端的连接数会直接被释放；<br>服务端会维持， 维持一段时间之后， 下降到 5000 ， 然后完全消失。 </p>
<p>造成这个现象的原因是： Nginx配置文件中的参数。</p>
<pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
worker_rlimit_nofile 1024000;

http&#123;
    sendfile            on;
    tcp_nopush          on;
    types_hash_max_size 4096;
    keepalive_timeout 3000s; # 服务端维持连接的最大时间， 超过这个时间之后的连接会被nginx释放。 
    keepalive_requests 1000000; # 在一个长连接上可以服务的最大请求数目。
&#125;</code></pre>
<p>Refer Link： <a href="https://www.cnblogs.com/kevingrace/p/9364404.html">https://www.cnblogs.com/kevingrace/p/9364404.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx, Application</tag>
      </tags>
  </entry>
  <entry>
    <title>OOM行为</title>
    <url>/2022/04/19/Linux/Linux_OOMKiller/</url>
    <content><![CDATA[<p>关于OOM行为的思考 以及Kswapd的动作和行为。<br><a href="http://evertrain.blogspot.com/2018/04/oom.html">http://evertrain.blogspot.com/2018/04/oom.html</a><br>更详细的打分算法见源码  <a href="https://github.com/torvalds/linux/blob/master/mm/oom_kill.c">https://github.com/torvalds/linux/blob/master/mm/oom_kill.c</a></p>
<h2 id="发生之后"><a href="#发生之后" class="headerlink" title="发生之后"></a>发生之后</h2><p>OOM killer会将kill的信息记录到系统日志&#x2F;var&#x2F;log&#x2F;messages，检索相关信息就能匹配到是否触发。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'Out of memory'</span> /var/log/messages</code></pre>
<p>也可以通过dmesg</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span> <span class="token parameter variable">-Tx</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">'killed process'</span></code></pre>

<h2 id="查看分数最高的进程"><a href="#查看分数最高的进程" class="headerlink" title="查看分数最高的进程"></a>查看分数最高的进程</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">proc</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /proc <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-regex</span> <span class="token string">'/proc/[0-9]+'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">printf</span> <span class="token string">"%2d %5d %s<span class="token entity" title="\n">\n</span>"</span> <span class="token punctuation">\</span>
        <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $proc/oom_score<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span>
        <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $proc<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span>
        <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $proc/cmdline <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'\0'</span> <span class="token string">' '</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token number">50</span><span class="token variable">)</span></span>"</span>
<span class="token keyword">done</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span></code></pre>

<h2 id="保护措施"><a href="#保护措施" class="headerlink" title="保护措施"></a>保护措施</h2><h3 id="设置OverCommit"><a href="#设置OverCommit" class="headerlink" title="设置OverCommit"></a>设置OverCommit</h3><p>只有在OverCommit的时候才会触发OOM， 默认是许可一定程度的OverCommit的。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">https://docs.kernel.org/vm/overcommit-accounting.html
vm.overcommit_memory 作用是控制OverCommit是否被许可。
<span class="token number">0</span>
    Heuristic overcommit handling. Obvious overcommits of address space are refused. Used <span class="token keyword">for</span> a typical system. It ensures a seriously wild allocation fails <span class="token keyword">while</span> allowing overcommit to reduce swap usage. root is allowed to allocate slightly <span class="token function">more</span> memory <span class="token keyword">in</span> this mode. This is the default.
<span class="token number">1</span>
    Always overcommit. Appropriate <span class="token keyword">for</span> some scientific applications. Classic example is code using sparse arrays and just relying on the virtual memory consisting almost entirely of zero pages.
<span class="token number">2</span>
    Don’t overcommit. The total address space commit <span class="token keyword">for</span> the system is not permitted to exceed swap + a configurable amount <span class="token punctuation">(</span>default is <span class="token number">50</span>%<span class="token punctuation">)</span> of physical RAM. Depending on the amount you use, <span class="token keyword">in</span> <span class="token function">most</span> situations this means a process will not be killed <span class="token keyword">while</span> accessing pages but will receive errors on memory allocation as appropriate.

    Useful <span class="token keyword">for</span> applications that want to guarantee their memory allocations will be available <span class="token keyword">in</span> the future without having to initialize every page.

<span class="token punctuation">[</span>root@ip-172-31-9-192 log<span class="token punctuation">]</span><span class="token comment"># cat /proc/meminfo | grep Comm</span>
CommitLimit:     <span class="token number">4794236</span> kB
Committed_AS:    <span class="token number">2344744</span> kB
---
CommitLimit： 可提交内存的上限， 超过这个上限系统认为目前内存已经是OverCommit。
Committed_AS： 已经提交内存的上限，当前所有进程已经提交的内存使用，这个不是已经分配出去的， 是进程申请的。</code></pre>

<h3 id="设置Killer的行为"><a href="#设置Killer的行为" class="headerlink" title="设置Killer的行为"></a>设置Killer的行为</h3><pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-11-235:/home/ec2-user<span class="token operator">|</span>⇒  <span class="token function">cat</span> /proc/sys/vm/oom_kill_allocating_task
<span class="token comment"># 值为0：会 kill 掉得分最高的进程</span>
<span class="token comment"># 值为非0：会kill 掉当前申请内存而触发OOM的进程</span></code></pre>

<h3 id="设置进程"><a href="#设置进程" class="headerlink" title="设置进程"></a>设置进程</h3><ol>
<li>对于需要保护的进程可以使用OOM_ADJ&#x3D;-17 将这个进程从OOM Killer的列表中移除（已经在内核的2.6之后废弃，处于兼容性保留了这个文件接口</li>
<li>调整OOM_SCORE_ADJ, 范围是 -1000 &lt; oom_score_adj &lt; 1000</li>
</ol>
<p>直接调整到-1000，会出现在计算分数列表的最后<br>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-1000</span> <span class="token operator">></span> /proc/31595/oom_score_adj</code></pre></p>
<p>  手动触发一次OOM规则， Kill符合要求的进程<br>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> f <span class="token operator">></span> /proc/sysrq-trigger</code></pre></p>
<h3 id="调整服务的OOM-Score"><a href="#调整服务的OOM-Score" class="headerlink" title="调整服务的OOM Score"></a>调整服务的OOM Score</h3><p>对于服务本身的保护方式， 可以采用使用Systemd Unit file里面进行 OOMADJSCORE&#x3D;*** 的方式来指定，例如保护MySQL的进程不会在OOM Killer的列表中。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/lib/systemd/system/mariadb.service

    <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
    <span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
    <span class="token assign-left variable">User</span><span class="token operator">=</span>mysql
    <span class="token assign-left variable">Group</span><span class="token operator">=</span>mysql

    <span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/libexec/mariadb-prepare-db-dir %n
    <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/mysqld_safe <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr
    <span class="token assign-left variable">ExecStartPost</span><span class="token operator">=</span>/usr/libexec/mariadb-wait-ready <span class="token variable">$MAINPID</span>
    <span class="token comment"># Setting Here. and setting in the /proc/$PID/oom_score_adj.</span>
    <span class="token assign-left variable">OOMScoreAdjust</span><span class="token operator">=</span>-1000

<span class="token function">sudo</span> systemctl daemon-reload <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl restart mariadb</code></pre>

<h3 id="避免OOM的方式"><a href="#避免OOM的方式" class="headerlink" title="避免OOM的方式"></a>避免OOM的方式</h3><ol>
<li>关闭OverCommit： 关闭OverCommit会导致进程如果无法拿到内存就fast fail ， 不会出现OOMKiller干掉无辜进程的情况。</li>
<li>开启OverCommit， 开启一定程度的Swap： 开启Swap会导致内存在接近99%的时候，会出现系统响应变慢的问题，但是会由于申请的内存没有超过TotalMEM + TotalSWAP，因此不会触发OOM ，但是会导致明显的系统响应问题。 如果超过了 TotalMEM + TotalSWAP 会立刻触发一次OOMkiller结束进程。</li>
<li>开启OverCommit， 调整进程的优先级： 对于特定的进程进行保护。OOM会按照设置的积分计算需要Kill的进程。</li>
<li>开启OverCommit， 调整OOMkiller的行为方式： 计算积分后Kill 或者 直接Kill当前新申请内存的进程。这个方式感觉和默认的关闭OverCommit的行为类型，都是拒绝新的进程以保证旧的进程可以存活。</li>
</ol>
<h2 id="更可靠的方式"><a href="#更可靠的方式" class="headerlink" title="更可靠的方式"></a>更可靠的方式</h2><h3 id="Faceboook的oomd"><a href="#Faceboook的oomd" class="headerlink" title="Faceboook的oomd"></a>Faceboook的oomd</h3><p><a href="https://github.com/facebookincubator/oomd">https://github.com/facebookincubator/oomd</a><br>oomd使用的是 PSI接口来评估内存的压力，可以通过自定义规则的方式来对来进行内存压力的分析，而不是简单的内存用量。</p>
<h3 id="Fedora的Early-OOM"><a href="#Fedora的Early-OOM" class="headerlink" title="Fedora的Early OOM"></a>Fedora的Early OOM</h3><p><a href="https://github.com/rfjakob/earlyoom">https://github.com/rfjakob/earlyoom</a><br>EarlyOOM的作用是提前OOM，这样可以保障用户空间的图形桌面不会到交换空间去， 主要解决的问题是内存压力过大的交换动作会将桌面环境换出导致响应变慢。</p>
<h2 id="输出结果记录"><a href="#输出结果记录" class="headerlink" title="输出结果记录"></a>输出结果记录</h2><h3 id="Cgroup-Pod"><a href="#Cgroup-Pod" class="headerlink" title="Cgroup - Pod"></a>Cgroup - Pod</h3><ul>
<li><p>首先是哪个程序超过了cgroup的limit， 触发了cgroup 的oom， 这里是 xray 这个进程自己。</p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023] xray invoked oom-killer: gfp_mask&#x3D;0x100cca(GFP_HIGHUSER_MOVABLE), order&#x3D;0, oom_score_adj&#x3D;-997</code></pre>
</li>
<li><p>这个部分是触发kprint的信息， 解释如下：<br>在哪个CPU（1）上， 运行的进程PID（1586622）， commandline的名称（xray）， 哪个版本的内核， 是否被标记为 taint.</p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023] CPU: 1 PID: 1586622 Comm: xray Kdump: loaded Not tainted 5.14.0-333.el9.x86_64 #1</code></pre>
</li>
<li><p>硬件信息， BIOS信息   </p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023] Hardware name: Red Hat KVM, BIOS 1.15.0-2.module_el8.6.0+2880+7d9e3703 04&#x2F;01&#x2F;2014</code></pre>
</li>
<li><p>打印发生oom时刻的堆栈</p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023] Call Trace:
kern  :warn  : [Thu Aug 17 17:29:27 2023]  &lt;TASK&gt;
kern  :warn  : [Thu Aug 17 17:29:27 2023]  dump_stack_lvl+0x34&#x2F;0x48
kern  :warn  : [Thu Aug 17 17:29:27 2023]  dump_header+0x4a&#x2F;0x201
kern  :warn  : [Thu Aug 17 17:29:27 2023]  oom_kill_process.cold+0xb&#x2F;0x10
kern  :warn  : [Thu Aug 17 17:29:27 2023]  out_of_memory+0xed&#x2F;0x2e0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  mem_cgroup_out_of_memory+0x13a&#x2F;0x150
kern  :warn  : [Thu Aug 17 17:29:27 2023]  try_charge_memcg+0x79d&#x2F;0x860
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? __mem_cgroup_charge+0x55&#x2F;0x80
kern  :warn  : [Thu Aug 17 17:29:27 2023]  charge_memcg+0x7a&#x2F;0xf0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  __mem_cgroup_charge+0x29&#x2F;0x80
kern  :warn  : [Thu Aug 17 17:29:27 2023]  __filemap_add_folio+0x224&#x2F;0x590
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? scan_shadow_nodes+0x30&#x2F;0x30
kern  :warn  : [Thu Aug 17 17:29:27 2023]  filemap_add_folio+0x37&#x2F;0xa0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  __filemap_get_folio+0x1fd&#x2F;0x330
kern  :warn  : [Thu Aug 17 17:29:27 2023]  filemap_fault+0x40b&#x2F;0x740
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? next_uptodate_page+0x160&#x2F;0x1f0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? _raw_spin_unlock+0xa&#x2F;0x30
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? filemap_map_pages+0x298&#x2F;0x540
kern  :warn  : [Thu Aug 17 17:29:27 2023]  __do_fault+0x36&#x2F;0x140
kern  :warn  : [Thu Aug 17 17:29:27 2023]  do_read_fault+0xf0&#x2F;0x160
kern  :warn  : [Thu Aug 17 17:29:27 2023]  do_fault+0xa9&#x2F;0x390
kern  :warn  : [Thu Aug 17 17:29:27 2023]  __handle_mm_fault+0x585&#x2F;0x650
kern  :warn  : [Thu Aug 17 17:29:27 2023]  handle_mm_fault+0xc5&#x2F;0x2a0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  do_user_addr_fault+0x1b4&#x2F;0x6a0
kern  :warn  : [Thu Aug 17 17:29:27 2023]  ? syscall_exit_to_user_mode+0x12&#x2F;0x30
kern  :warn  : [Thu Aug 17 17:29:27 2023]  exc_page_fault+0x62&#x2F;0x150
kern  :warn  : [Thu Aug 17 17:29:27 2023]  asm_exc_page_fault+0x22&#x2F;0x30</code></pre>
</li>
<li><p>寄存器的地址和相关信息。</p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023] RIP: 0033:0x46ea1d
kern  :warn  : [Thu Aug 17 17:29:27 2023] Code: Unable to access opcode bytes at RIP 0x46e9f3.
kern  :warn  : [Thu Aug 17 17:29:27 2023] RSP: 002b:000000c000073f10 EFLAGS: 00010202
kern  :warn  : [Thu Aug 17 17:29:27 2023] RAX: 0000000000000000 RBX: 0000000000002710 RCX: 000000000046ea1d
kern  :warn  : [Thu Aug 17 17:29:27 2023] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 000000c000073f10
kern  :warn  : [Thu Aug 17 17:29:27 2023] RBP: 000000c000073f20 R08: 000000000001af6c R09: 0000000000000072
kern  :warn  : [Thu Aug 17 17:29:27 2023] R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000011
kern  :warn  : [Thu Aug 17 17:29:27 2023] R13: 000000c000aa6c00 R14: 000000c0000064e0 R15: 0000000000001000</code></pre>
</li>
<li><p>oom时刻的内存信息 和 &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory.stat， 当前发生oom下面的Cgroup 的信息</p>
  <pre class="language-none"><code class="language-none">kern  :warn  : [Thu Aug 17 17:29:27 2023]  &lt;&#x2F;TASK&gt;
kern  :info  : [Thu Aug 17 17:29:27 2023] memory: usage 208204kB, limit 204800kB, failcnt 7470
kern  :info  : [Thu Aug 17 17:29:27 2023] swap: usage 0kB, limit 0kB, failcnt 0
kern  :info  : [Thu Aug 17 17:29:27 2023] Memory cgroup stats for &#x2F;kubepods.slice&#x2F;kubepods-pod089f25ee_a41a_414c_a028_71a38dfb30d3.slice&#x2F;cri-containerd-c3f1de0d0969e5d3c6758d2e59be98d4dc8ba0367af77f52b09d15225139c74f.scope:
kern  :info  : [Thu Aug 17 17:29:27 2023] anon 28139520
                                      file 8192
                                      kernel 1343488
                                      kernel_stack 212992
                                      pagetables 167936
                                      sec_pagetables 0
                                      percpu 0
                                      sock 183623680
                                      vmalloc 0
                                      shmem 0
                                      zswap 0
                                      zswapped 0
                                      file_mapped 0
                                      file_dirty 0
                                      file_writeback 0
                                      swapcached 0
                                      anon_thp 8388608
                                      file_thp 0
                                      shmem_thp 0
                                      inactive_anon 28135424
                                      active_anon 4096
                                      inactive_file 4096
                                      active_file 0
                                      unevictable 0
                                      slab_reclaimable 367104
                                      slab_unreclaimable 562944
                                      slab 930048
                                      workingset_refault_anon 0
                                      workingset_refault_file 5784
                                      workingset_activate_anon 0
                                      workingset_activate_file 2856
                                      workingset_restore_anon 0
                                      workingset_restore_file 2331
                                      workingset_nodereclaim 0
                                      pgscan 8263
                                      pgsteal 5880
                                      pgscan_kswapd 1945
                                      pgscan_direct 6318
                                      pgsteal_kswapd 1496
                                      pgsteal_direct 4384
                                      pgfault 23739
                                      pgmajfault 416
                                      pgrefill 4326
                                      pgactivate 379
                                      pgdeactivate 3235
                                      pglazyfree 0
                                      pglazyfreed 0
                                      zswpin 0
                                      zswpout 0
                                      thp_fault_alloc 14
                                      thp_collapse_alloc 4</code></pre></li>
<li><p>任务信息， 被kill的进程的信息， 内存的使用量以及积分模式。</p>
  <pre class="language-none"><code class="language-none">kern  :info  : [Thu Aug 17 17:29:27 2023] Tasks state (memory values in pages):
kern  :info  : [Thu Aug 17 17:29:27 2023] [  pid  ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
kern  :info  : [Thu Aug 17 17:29:27 2023] [1586608]     0 1586608   184282     6593   180224        0          -997 xray
kern  :info  : [Thu Aug 17 17:29:27 2023] oom-kill:constraint&#x3D;CONSTRAINT_MEMCG,nodemask&#x3D;(null),cpuset&#x3D;cri-containerd-c3f1de0d0969e5d3c6758d2e59be98d4dc8ba0367af77f52b09d15225139c74f.scope,mems_allowed&#x3D;0,oom_memcg&#x3D;&#x2F;kubepods.slice&#x2F;kubepods-pod089f25ee_a41a_414c_a028_71a38dfb30d3.slice&#x2F;cri-containerd-c3f1de0d0969e5d3c6758d2e59be98d4dc8ba0367af77f52b09d15225139c74f.scope,task_memcg&#x3D;&#x2F;kubepods.slice&#x2F;kubepods-pod089f25ee_a41a_414c_a028_71a38dfb30d3.slice&#x2F;cri-containerd-c3f1de0d0969e5d3c6758d2e59be98d4dc8ba0367af77f52b09d15225139c74f.scope,task&#x3D;xray,pid&#x3D;1586608,uid&#x3D;0
kern  :err   : [Thu Aug 17 17:29:27 2023] Memory cgroup out of memory: Killed process 1586608 (xray) total-vm:737128kB, anon-rss:26372kB, file-rss:0kB, shmem-rss:0kB, UID:0 pgtables:176kB oom_score_adj:-997</code></pre></li>
</ul>
<h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Orthanc的安装</title>
    <url>/2018/04/25/Linux/Linux_Orthanc_InstallationNote/</url>
    <content><![CDATA[<p>记录了Orthanc的安装过程。只有简单的安装，复杂没研究，待补全。<br>Orthanc是一个开源的DICOM Server，支持RESTful API，是轻量级的DICOM Server，默认基于数据库SQLlite，同时也支持PostgreSQL。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  平台：<em>Fedora</em> OR <em>Windows</em>  </p>
<h2 id="安装Orthanc"><a href="#安装Orthanc" class="headerlink" title="安装Orthanc"></a>安装Orthanc</h2><h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><h4 id="Fedora集成的RPM包"><a href="#Fedora集成的RPM包" class="headerlink" title="Fedora集成的RPM包"></a>Fedora集成的RPM包</h4><p><a href="https://koji.fedoraproject.org/koji/rpminfo?rpmID=11215099">Fedora提供的BuildVersion</a><br>下载到本地之后：执行  </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> orthanc*
systemctl <span class="token builtin class-name">enable</span> orthanc
systemctl start orthanc
iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8042</span> <span class="token parameter variable">-j</span> ACCEPT
iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">4242</span> <span class="token parameter variable">-j</span> ACCEPT
iptables-save</code></pre>
<p>安装结束。  </p>
<h4 id="Windows一键安装包"><a href="#Windows一键安装包" class="headerlink" title="Windows一键安装包"></a>Windows一键安装包</h4><p><a href="https://www.orthanc-server.com/download-windows.php">Windows安装包下载地址</a><br>直接下载之后运行即可。</p>
<h2 id="插件部分"><a href="#插件部分" class="headerlink" title="插件部分"></a>插件部分</h2>]]></content>
      <categories>
        <category>Healthcare-IT</category>
      </categories>
      <tags>
        <tag>Orthanc, Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>BufferIO与DirectIO的比较</title>
    <url>/2023/07/10/Linux/Linux_Perf-DirectIO-BufferIO/</url>
    <content><![CDATA[<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>使用BufferIO的方式， 测试文件的写入： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

perf record <span class="token parameter variable">-T</span> <span class="token parameter variable">-C</span> <span class="token number">0</span> -- taskset <span class="token parameter variable">-c</span> <span class="token number">0</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>./a.dat <span class="token assign-left variable">bs</span><span class="token operator">=</span>4k <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">16384</span></code></pre>

<p>使用DirectIO的方式， 测试文件的写入:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

perf record <span class="token parameter variable">-T</span> <span class="token parameter variable">-C</span> <span class="token number">0</span> -- taskset <span class="token parameter variable">-c</span> <span class="token number">0</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>./a.dat <span class="token assign-left variable">bs</span><span class="token operator">=</span>4k <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">16384</span> <span class="token assign-left variable">oflag</span><span class="token operator">=</span>direct</code></pre>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>BufferIO:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-53-200 perf_records<span class="token punctuation">]</span><span class="token comment"># ./start_test_bufferio.sh</span>
<span class="token number">16384</span>+0 records <span class="token keyword">in</span>
<span class="token number">16384</span>+0 records out
<span class="token number">67108864</span> bytes <span class="token punctuation">(</span><span class="token number">67</span> MB, <span class="token number">64</span> MiB<span class="token punctuation">)</span> copied, <span class="token number">0.118848</span> s, <span class="token number">565</span> MB/s
<span class="token punctuation">[</span> perf record: Woken up <span class="token number">1</span> <span class="token builtin class-name">times</span> to <span class="token function">write</span> data <span class="token punctuation">]</span>
<span class="token punctuation">[</span> perf record: Captured and wrote <span class="token number">0.225</span> MB perf.data <span class="token punctuation">(</span><span class="token number">485</span> samples<span class="token punctuation">)</span> <span class="token punctuation">]</span>

ll <span class="token parameter variable">-h</span> 
-rw-r--r--. <span class="token number">1</span> root root  64M Jun  <span class="token number">1</span> <span class="token number">13</span>:45 a.dat

<span class="token punctuation">[</span>root@ip-172-31-53-200 ~<span class="token punctuation">]</span><span class="token comment"># dstat -tf</span>
----system---- -----cpu0-usage----------cpu1-usage----------cpu2-usage----------cpu3-usage---- dsk/nvme0n1 ---net/lo-----net/eth0- ---paging-- ---system--
     <span class="token function">time</span>     <span class="token operator">|</span>usr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl<span class="token operator">|</span> <span class="token builtin class-name">read</span>  writ<span class="token operator">|</span> recv  send: recv  send<span class="token operator">|</span>  <span class="token keyword">in</span>   out <span class="token operator">|</span> int   csw
01-06 <span class="token number">13</span>:35:48<span class="token operator">|</span>  <span class="token number">2</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">98</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>8192B   35k<span class="token operator">|</span>1096B 1096B: 968B  828B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">712</span>   <span class="token number">971</span>
01-06 <span class="token number">13</span>:35:49<span class="token operator">|</span> <span class="token number">25</span>   <span class="token number">9</span>  <span class="token number">60</span>   <span class="token number">5</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>  <span class="token number">12</span>  <span class="token number">84</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>   <span class="token number">8</span>  <span class="token number">90</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>    64M<span class="token operator">|</span>1096B 1096B: 576B  756B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">2283</span>  <span class="token number">1311</span>
01-06 <span class="token number">13</span>:35:50<span class="token operator">|</span>  <span class="token number">6</span>   <span class="token number">1</span>  <span class="token number">94</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>: <span class="token number">16</span>   <span class="token number">2</span>  <span class="token number">83</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span>1096B 1096B: 156B  418B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">954</span>  <span class="token number">1018</span></code></pre>

<p>DirectIO:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-53-200 perf_records<span class="token punctuation">]</span><span class="token comment"># ./start_test_directio.sh</span>
<span class="token number">16384</span>+0 records <span class="token keyword">in</span>
<span class="token number">16384</span>+0 records out
<span class="token number">67108864</span> bytes <span class="token punctuation">(</span><span class="token number">67</span> MB, <span class="token number">64</span> MiB<span class="token punctuation">)</span> copied, <span class="token number">10.4225</span> s, <span class="token number">6.4</span> MB/s
<span class="token punctuation">[</span> perf record: Woken up <span class="token number">9</span> <span class="token builtin class-name">times</span> to <span class="token function">write</span> data <span class="token punctuation">]</span>
<span class="token punctuation">[</span> perf record: Captured and wrote <span class="token number">2.417</span> MB perf.data <span class="token punctuation">(</span><span class="token number">41489</span> samples<span class="token punctuation">)</span> <span class="token punctuation">]</span>

<span class="token punctuation">[</span>root@ip-172-31-53-200 ~<span class="token punctuation">]</span><span class="token comment"># dstat -tf</span>
----system---- -----cpu0-usage----------cpu1-usage----------cpu2-usage----------cpu3-usage---- dsk/nvme0n1 ---net/lo-----net/eth0- ---paging-- ---system--
     <span class="token function">time</span>     <span class="token operator">|</span>usr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl:usr sys idl wai stl<span class="token operator">|</span> <span class="token builtin class-name">read</span>  writ<span class="token operator">|</span> recv  send: recv  send<span class="token operator">|</span>  <span class="token keyword">in</span>   out <span class="token operator">|</span> int   csw
01-06 <span class="token number">13</span>:36:36<span class="token operator">|</span>  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span>1097B 1097B: 688B  624B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">622</span>   <span class="token number">930</span>
01-06 <span class="token number">13</span>:36:37<span class="token operator">|</span>  <span class="token number">3</span>   <span class="token number">4</span>  <span class="token number">32</span>  <span class="token number">61</span>   <span class="token number">0</span>:  <span class="token number">4</span>  <span class="token number">14</span>  <span class="token number">81</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">97</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">5</span>  <span class="token number">94</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  4277k<span class="token operator">|</span>1095B 1095B: 332B  338B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">6434</span>  <span class="token number">3133</span>
01-06 <span class="token number">13</span>:36:38<span class="token operator">|</span>  <span class="token number">3</span>   <span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">3</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6421k<span class="token operator">|</span>1096B 1096B:  52B  174B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8767</span>  <span class="token number">4148</span>
01-06 <span class="token number">13</span>:36:39<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">2</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6431k<span class="token operator">|</span>1096B 1096B:  52B  150B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8790</span>  <span class="token number">4191</span>
01-06 <span class="token number">13</span>:36:40<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">91</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">2</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6320k<span class="token operator">|</span>1096B 1096B:  52B  142B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8744</span>  <span class="token number">4092</span>
01-06 <span class="token number">13</span>:36:41<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6216k<span class="token operator">|</span>1096B 1096B:  52B  142B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8662</span>  <span class="token number">4103</span>
01-06 <span class="token number">13</span>:36:42<span class="token operator">|</span>  <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">2</span>   <span class="token number">2</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  7492k<span class="token operator">|</span>1576B 1576B:  52B  134B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8756</span>  <span class="token number">4099</span>
01-06 <span class="token number">13</span>:36:43<span class="token operator">|</span>  <span class="token number">3</span>   <span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">91</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6284k<span class="token operator">|</span>1096B 1096B:  52B  134B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8720</span>  <span class="token number">4077</span>
01-06 <span class="token number">13</span>:36:44<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">2</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">2</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6296k<span class="token operator">|</span>1096B 1096B:  52B  134B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8788</span>  <span class="token number">4067</span>
01-06 <span class="token number">13</span>:36:45<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">0</span>  <span class="token number">91</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  6368k<span class="token operator">|</span>1096B 1096B:  52B  134B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8792</span>  <span class="token number">4071</span>
01-06 <span class="token number">13</span>:36:46<span class="token operator">|</span>  <span class="token number">3</span>   <span class="token number">5</span>   <span class="token number">0</span>  <span class="token number">92</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">4</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  5904k<span class="token operator">|</span>1096B 1096B:  52B  134B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">8576</span>  <span class="token number">3893</span>
01-06 <span class="token number">13</span>:36:47<span class="token operator">|</span> <span class="token number">25</span>   <span class="token number">7</span>   <span class="token number">0</span>  <span class="token number">69</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">2</span>   <span class="token number">1</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>  4811k<span class="token operator">|</span>1097B 1097B: 364B  763B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span><span class="token number">7035</span>  <span class="token number">3360</span>
01-06 <span class="token number">13</span>:36:48<span class="token operator">|</span>  <span class="token number">4</span>   <span class="token number">0</span>  <span class="token number">96</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>: <span class="token number">22</span>   <span class="token number">3</span>  <span class="token number">75</span>   <span class="token number">1</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">1</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>2642k  109k<span class="token operator">|</span>1095B 1095B: 208B  472B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">977</span>  <span class="token number">1008</span>
01-06 <span class="token number">13</span>:36:49<span class="token operator">|</span>  <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">100</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">98</span>   <span class="token number">0</span>   <span class="token number">0</span>:  <span class="token number">0</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span><span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span>1096B 1096B: 104B  276B<span class="token operator">|</span>   <span class="token number">0</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">640</span>   <span class="token number">903</span></code></pre>

<h2 id="Perf-采样结果"><a href="#Perf-采样结果" class="headerlink" title="Perf 采样结果"></a>Perf 采样结果</h2><p>BufferIO：</p>
<p><img src="https://s2.loli.net/2023/06/01/oArisB8fI71NQdE.png" alt="bufferIO.png"></p>
<p>DirectIO：</p>
<p><img src="https://s2.loli.net/2023/06/01/VMW9lwpgnFQ34DB.png" alt="directio.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Perf, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Perf 命令的Performance分析</title>
    <url>/2022/04/19/Linux/Linux_Perf/</url>
    <content><![CDATA[<p><a href="https://blog.gmem.cc/perf">https://blog.gmem.cc/perf</a>  一个非常详细的博客， 太强啦。</p>
<h2 id="使用perf进行性能的简单输出"><a href="#使用perf进行性能的简单输出" class="headerlink" title="使用perf进行性能的简单输出"></a>使用perf进行性能的简单输出</h2><pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-11-235:~<span class="token operator">|</span>⇒  perf <span class="token function">stat</span> <span class="token function">htop</span> <span class="token parameter variable">-d</span> <span class="token number">1</span>

 Performance counter stats <span class="token keyword">for</span> <span class="token string">'htop -d 1'</span><span class="token builtin class-name">:</span>

        <span class="token number">181.764747</span>      task-clock <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>         <span class="token comment">#    0.055 CPUs utilized</span>
                <span class="token number">52</span>      context-switches          <span class="token comment">#    0.286 K/sec</span>
                 <span class="token number">0</span>      cpu-migrations            <span class="token comment">#    0.000 K/sec</span>
               <span class="token number">320</span>      page-faults               <span class="token comment">#    0.002 M/sec</span>
   <span class="token operator">&lt;</span>not supported<span class="token operator">></span>      cycles
   <span class="token operator">&lt;</span>not supported<span class="token operator">></span>      instructions
   <span class="token operator">&lt;</span>not supported<span class="token operator">></span>      branches
   <span class="token operator">&lt;</span>not supported<span class="token operator">></span>      branch-misses

       <span class="token number">3.283236218</span> seconds <span class="token function">time</span> elapsed

</code></pre>

<h2 id="使用perf记录性能指标到文件"><a href="#使用perf记录性能指标到文件" class="headerlink" title="使用perf记录性能指标到文件"></a>使用perf记录性能指标到文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-41-141 tmp<span class="token punctuation">]</span><span class="token comment"># perf record -F 99 -a -g -p 44551</span>
<span class="token punctuation">[</span>root@ip-172-31-41-141 tmp<span class="token punctuation">]</span><span class="token comment"># sudo perf record -F 99 -a -g -- sleep 60</span>
Warning:
PID/TID switch overriding SYSTEM
^C<span class="token punctuation">[</span> perf record: Woken up <span class="token number">1</span> <span class="token builtin class-name">times</span> to <span class="token function">write</span> data <span class="token punctuation">]</span>
<span class="token punctuation">[</span> perf record: Captured and wrote <span class="token number">0.021</span> MB perf.data <span class="token punctuation">(</span><span class="token number">2</span> samples<span class="token punctuation">)</span> <span class="token punctuation">]</span>
root@ip-172-31-11-235:~<span class="token operator">|</span>⇒  <span class="token function">sudo</span> perf script <span class="token operator">></span> out.perf</code></pre>

<h2 id="生成火焰图"><a href="#生成火焰图" class="headerlink" title="生成火焰图"></a>生成火焰图</h2><p>通常的做法是将 out.perf 拷贝到本地机器，在本地生成火焰图：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/brendangregg/FlameGraph.git
<span class="token comment"># 折叠调用栈</span>
$ perf script <span class="token operator">></span> out.perf
$ FlameGraph/stackcollapse-perf.pl out.perf <span class="token operator">></span> out.folded
<span class="token comment"># 生成火焰图</span>
$ FlameGraph/flamegraph.pl out.folded <span class="token operator">></span> out.svg</code></pre>
<p>生成火焰图可以指定参数，–width 可以指定图片宽度，–height 指定每一个调用栈的高度，生成的火焰图，宽度越大就表示CPU耗时越多。<br>FlameGraph&#x2F;flamegraph.pl &lt; out.profile &gt; out.svg</p>
<p>[root@ip-172-31-18-198 timechart]# perf timechart record -g – curl <a href="http://localhost:19999/">http://localhost:19999</a><br>[root@ip-172-31-18-198 timechart]# perf timechart<br>Written 0.0 seconds of trace to output.svg.</p>
<h2 id="制造一个D进程"><a href="#制造一个D进程" class="headerlink" title="制造一个D进程"></a>制造一个D进程</h2><p>Most proper way is to use freezer cgroup. It puts process to uninterruptible sleep in case of FROZEN cgroup state.</p>
<p>mkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer<br>mount -t cgroup -ofreezer freezer &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer<br>mkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer&#x2F;frozen<br>echo FROZEN &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer&#x2F;frozen&#x2F;freezer.state<br>echo <code>pidof you_process</code> &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer&#x2F;frozen&#x2F;tasks<br>echo <code>pgrep cp</code> &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer&#x2F;frozen&#x2F;tasks<br>echo THAWED &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer&#x2F;frozen&#x2F;freezer.state</p>
<p>To put again to interruptible sleep, just change cgroup state to THAWED.</p>
<h2 id="动态追踪"><a href="#动态追踪" class="headerlink" title="动态追踪"></a>动态追踪</h2><ol>
<li>添加一个动态追踪的Tracepoint Event<pre class="language-none"><code class="language-none">perf probe --add&#x3D;&quot;probe:io_schedule_timeout&quot;
perf probe --add&#x3D;&quot;probe:io_schedule_timeout%return&quot;
# 使用
perf record -e probe:tcp_sendmsg -a -g -- sleep 5
# 分析
perf report --stdio</code></pre></li>
<li>移除一个动态追踪的Tracepoint Event<pre class="language-none"><code class="language-none">perf probe --del&#x3D;&quot;probe:io_schedule_timeout&quot;
perf probe -d &quot;probe:io_schedule_timeout&quot;</code></pre></li>
<li>列出所有存在的probe <pre class="language-none"><code class="language-none">perf probe -l</code></pre></li>
<li>查看追踪的结果<pre class="language-none"><code class="language-none">perf script
perf probe -V tcp_sendmsg # 列出可用的变量列表
perf probe --add &#39;tcp_sendmsg size&#39; # 追踪这个变量
# Add a tracepoint for tcp_sendmsg() return, and capture the return value:
perf probe &#39;tcp_sendmsg%return $retval&#39;</code></pre></li>
</ol>
<h2 id="关于Off-cpu进程的分析"><a href="#关于Off-cpu进程的分析" class="headerlink" title="关于Off-cpu进程的分析"></a>关于Off-cpu进程的分析</h2><ol>
<li>按步骤生成<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ /usr/share/bcc/tools/offcputime <span class="token parameter variable">-df</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">`</span>pgrep <span class="token parameter variable">-nx</span> mysqld<span class="token variable">`</span></span> <span class="token number">30</span> <span class="token operator">></span> out.stacks
<span class="token punctuation">[</span><span class="token punctuation">..</span>.copy out.stacks to your <span class="token builtin class-name">local</span> system <span class="token keyword">if</span> desired<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token punctuation">]</span>$ <span class="token function">git</span> clone https://github.com/brendangregg/FlameGraph
<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> FlameGraph
<span class="token punctuation">]</span>$ ./flamegraph.pl <span class="token parameter variable">--color</span><span class="token operator">=</span>io <span class="token parameter variable">--title</span><span class="token operator">=</span><span class="token string">"Off-CPU Time Flame Graph"</span> <span class="token parameter variable">--countname</span><span class="token operator">=</span>us <span class="token operator">&lt;</span> out.stacks <span class="token operator">></span> out.svg</code></pre></li>
<li>一条命令出图 <pre class="language-none"><code class="language-none">]$ grep do_command &lt; out.stacks | .&#x2F;flamegraph.pl --color&#x3D;io --title&#x3D;&quot;Off-CPU Time Flame Graph&quot; --countname&#x3D;us &gt; out.svg</code></pre></li>
</ol>
<h2 id="Perf命令的常见参数"><a href="#Perf命令的常见参数" class="headerlink" title="Perf命令的常见参数"></a>Perf命令的常见参数</h2><ol>
<li>内核设置<br>要启用内核动态追踪，需要使用内核编译参数CONFIG_KPROBES&#x3D;y、CONFIG_KPROBE_EVENTS&#x3D;y。<br>要追踪基于帧指针的内核栈，需要内核编译参数CONFIG_FRAME_POINTER&#x3D;y。<br>要启用用户动态追踪，需要使用内核编译参数CONFIG_UPROBES&#x3D;y、CONFIG_UPROBE_EVENTS&#x3D;y</li>
<li>子命令列表</li>
</ol>
<p>perf支持一系列的子命令：<br>子命令 	说明<br>annotate 	读取perf.data并显示被注解的代码<br>bench 	基准测试的框架<br>config 	在配置文件中读写配置项<br>diff 	读取perf.data并显示剖析差异<br>evlist 	列出perf.data中的事件名称<br>inject 	用于增强事件流的过滤器<br>kmem 	跟踪&#x2F;度量内核内存属性<br>kvm 	跟踪&#x2F;度量KVM客户机系统<br>list 	显示符号化的事件列表<br>lock 	分析锁事件<br>mem 	分析内存访问<br>record 	执行剖析<br>report 	显示剖析结果<br>sched 	分析调度器<br>stat 	获取性能计数<br>top 	显示成本最高的操作并动态刷新<br>trace 	类似于strace的工具<br>probe 	定义新的动态追踪点</p>
<ol start="3">
<li>perrf record 命令参数 <pre class="language-bash" data-language="bash"><code class="language-bash">--exclude-perf 	不记录perf自己发起的事件
<span class="token parameter variable">-p</span> 	收集指定进程的事件，逗号分割的PID列表
<span class="token parameter variable">-a</span> 	使用Per-CPU模式，如果不指定-C，则相当于全局模式。如果指定-C，则可以选定若干CPU
<span class="token parameter variable">-g</span> 	记录调用栈
<span class="token parameter variable">-F</span> 	以指定的频率剖析
<span class="token parameter variable">-T</span> 	记录样本时间戳
<span class="token parameter variable">-s</span> 	记录每个线程的事件计数器，配合 perf report -T使用</code></pre></li>
</ol>
<h1 id="微基准测试"><a href="#微基准测试" class="headerlink" title="微基准测试"></a>微基准测试</h1><p>From youtube video： </p>
<pre><code class="bash">root@HaydenArchDesktop /tmp# perf bench sched pipe
# Running &#39;sched/pipe&#39; benchmark:
# Executed 1000000 pipe operations between two processes

     Total time: 2.407 [sec]

       2.407455 usecs/op
         415376 ops/sec


root@HaydenArchDesktop /tmp# taskset -c 0 perf bench sched pipe
# Running &#39;sched/pipe&#39; benchmark:
# Executed 1000000 pipe operations between two processes

     Total time: 2.381 [sec]

       2.381081 usecs/op
         419977 ops/sec
# 这里的时间提升不明显的原因是， 我的Archlinux是ZenKernel， 感觉可能在调度上已经做了不少的事情 ，如果随便启动一个redhat , 这个指标的差距会比较大。
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Perf</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中一些常见的性能分析命令</title>
    <url>/2021/12/26/Linux/Linux_PerfCommand/</url>
    <content><![CDATA[<p>记录性能分析的思路。</p>
<p>最近的这个半年越来越好奇的事情是， 为什么命令会卡住，为什么命令会执行不下去，为什么命令会等待，等等等等。</p>
<p>那么这些问题， 有的是可以有答案的， 目前也不知道的。 </p>
<p>已经大概掌握的几个不同的方法以及观测的工具， 大概做一个记录。</p>
<h1 id="Strace命令"><a href="#Strace命令" class="headerlink" title="Strace命令"></a>Strace命令</h1><h2 id="Strace-命令的常见用法"><a href="#Strace-命令的常见用法" class="headerlink" title="Strace 命令的常见用法"></a>Strace 命令的常见用法</h2><p>strace命令是用来追踪系统调用的，常见的可以追踪的系统调用需要阅读内核部分的代码。 但是常见的系统调用就是集中， read() , write() , ioctl(), futex() , mmap()<br>大部分的时候 我们都是可以观测到卡住的部分的 ， 这种追踪我认为常见的使用场景就是命令卡住了， 或者执行中的程序卡住了。 </p>
<h3 id="命令卡住的分析"><a href="#命令卡住的分析" class="headerlink" title="命令卡住的分析"></a>命令卡住的分析</h3><p>对于命令卡住的情况， 可以使用类似于如下的命令： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-ttt</span> <span class="token parameter variable">-s</span> <span class="token number">512</span> <span class="token builtin class-name">echo</span> <span class="token string">"123"</span></code></pre>
<p>这样的话， 在执行的过程中就可以查看相关的内容，比如常见的卡在了系统调用的某个函数上， 这个可以用来定位，命令打开了那些文件，申请的那些内存地址，打开了什么文件，关闭Socket等等等等。<br>目前我的办法的通过对比这个卡住的命令执行到什么函数出现的问题， 对应的在正常的机器上进行对比，就可以猜到大概的问题出现在了哪里。</p>
<h3 id="已经运行中的程序分析"><a href="#已经运行中的程序分析" class="headerlink" title="已经运行中的程序分析"></a>已经运行中的程序分析</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-ttt</span> <span class="token parameter variable">-s</span> <span class="token number">512</span> <span class="token parameter variable">-p</span> <span class="token number">123</span></code></pre>
<p>执行进程的PID ， 然后strace会attach到进程上， 输出的内容， 也可以查看到当前程序的运行状态。 </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如上面的两种方式，都可以对运行中明显的问题进行观察， 但是如果没有卡在系统调用的部分， 通过这个命令的观察其实是无法查看的， 因为他记录的是应用程序指令陷入到内核态的部分， 但是常见的应用程序基本上都是用户态的，所以这个部分如果是应用卡在用户态上， 观测的信息就比较有限了。</p>
<h1 id="Perf命令"><a href="#Perf命令" class="headerlink" title="Perf命令"></a>Perf命令</h1><h2 id="Perf简单的分析"><a href="#Perf简单的分析" class="headerlink" title="Perf简单的分析"></a>Perf简单的分析</h2><p>perf命令的简单分析， 首先是</p>
<ol>
<li><p>perf top<br>perf top 可以用来实时的查看应用程序的相关问题， 收集指标的范围是整个操作系统，所以是比较消耗资源的， 输出的结果也是直接可以查看的， 看完了结果打断即可。 </p>
</li>
<li><p>perf stat<br>perf stat 查看相关的统计信息，如下是一个样例，提供了一些静态的指标。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> perf <span class="token function">stat</span>
Performance counter stats <span class="token keyword">for</span> <span class="token string">'system wide'</span><span class="token builtin class-name">:</span>
        <span class="token number">61,167</span>.25 msec cpu-clock                 <span class="token comment">#   16.000 CPUs utilized</span>
            <span class="token number">4,955</span>      context-switches          <span class="token comment">#   81.007 /sec</span>
               <span class="token number">63</span>      cpu-migrations            <span class="token comment">#    1.030 /sec</span>
              <span class="token number">930</span>      page-faults               <span class="token comment">#   15.204 /sec</span>
    <span class="token number">6,266</span>,524,215      cycles                    <span class="token comment">#    0.102 GHz                      (83.32%)</span>
      <span class="token number">244,046</span>,608      stalled-cycles-frontend   <span class="token comment">#    3.89% frontend cycles idle     (83.34%)</span>
       <span class="token number">66,809</span>,179      stalled-cycles-backend    <span class="token comment">#    1.07% backend cycles idle      (83.34%)</span>
      <span class="token number">818,170</span>,826      instructions              <span class="token comment">#    0.13  insn per cycle</span>
                                                 <span class="token comment">#    0.30  stalled cycles per insn  (83.34%)</span>
      <span class="token number">155,602</span>,840      branches                  <span class="token comment">#    2.544 M/sec                    (83.34%)</span>
        <span class="token number">1,701</span>,804      branch-misses             <span class="token comment">#    1.09% of all branches          (83.33%)</span>

      <span class="token number">3.823037998</span> seconds <span class="token function">time</span> elapsed</code></pre>
<p>显示的内容是从输入了命令之后的相关信息，主要是一些CPU相关的指标， 比如CPU时钟，上下文交换次数，cpu转移，缺页中断等等等等。</p>
</li>
<li><p>perf record<br>perf record 我常用的命令是这样的， 他会将记录到的指标输出到当前目录的文件中，然后供report命令来进行分析， 这两个一般来说会合用。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-F</span> <span class="token number">1000</span> <span class="token parameter variable">-p</span> <span class="token number">123</span>  
perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-F</span> <span class="token number">1000</span> <span class="token builtin class-name">echo</span> <span class="token number">123</span>
perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-F</span> <span class="token number">1000</span> 
perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-F</span> <span class="token number">1000</span> -- <span class="token function">sleep</span> <span class="token number">60</span> 
三个命令会记录相关的指标到当前目录的perf.data文件中。 大小和采样的频率，时间的数量有关。</code></pre></li>
<li><p>perf report<br>perf report 我比较常用的参数就是 使用 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">perf record <span class="token parameter variable">--stdio</span></code></pre>
<p>来直接进行查看， 占用时间百分比比较高的函数，前提是 ，这个命令的运行需要有perf.data.</p>
</li>
<li><p>perf sched<br>perf sched 通常是用来查看cpu调度延时的， 这个用的确实不多， 毕竟cpu调度现在基本上都是cfq， 改的人毕竟还是少数， 所以实际的使用比较少。<br>这个指令常用的如下： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">perf sched record 
perf sched latency 
perf sched report</code></pre>
<p>上面的这些都是我比较常用的命令， 临时抓出来看下。</p>
</li>
</ol>
<h2 id="Perf命令输出火焰图"><a href="#Perf命令输出火焰图" class="headerlink" title="Perf命令输出火焰图"></a>Perf命令输出火焰图</h2><p>perf 命令输出火焰图需要的是Github上面的一个项目， 这个项目的作者也是写性能之巅的作者。</p>
<p>具体的处理流程如下： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/brendangregg/FlameGraph.git
<span class="token function">sudo</span> perf script <span class="token operator">></span> out.perf
FlameGraph/stackcollapse-perf.pl out.perf <span class="token operator">></span> out.folded
FlameGraph/flamegraph.pl out.folded <span class="token operator">></span> out.svg</code></pre>
<p>最后输出的out.svg就是结果了，可以通过浏览器来查看。<br>至于查看的方法，其实是看函数所占有的面积， 面积越大说明函数运行的时间越长；<br>那么还有说法是说， 越靠近顶端的应该越尖，如果有顶端比较大的平顶说明可能是有问题的， 这个答案还在求证中。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Perf, Strace</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能调优笔记</title>
    <url>/2020/08/20/Linux/Linux_PerformanceNote/</url>
    <content><![CDATA[<p>应该是一个性能调优的书的笔记， 记不清了， 存货了属于是。</p>
<h1 id="Linux的性能调优"><a href="#Linux的性能调优" class="headerlink" title="Linux的性能调优"></a>Linux的性能调优</h1><h2 id="CPU性能释放"><a href="#CPU性能释放" class="headerlink" title="CPU性能释放"></a>CPU性能释放</h2><h3 id="Process生命周期"><a href="#Process生命周期" class="headerlink" title="Process生命周期"></a>Process生命周期</h3><ol>
<li>建立一个新的进程, 表示为父进程， 父进程进入Wait状态。</li>
<li>父进程Fork()系统调用出来的一个子进程。</li>
<li>子进程调用exec()对操作进行执行。</li>
<li>子进程执行结束退出exit()。</li>
<li>子进程变为Zombie进程。</li>
<li>等待父进程回收，更新父进程的运行状态。</li>
</ol>
<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>线程是可以在同一个进程下并发执行的执行单位，他们共享相同的地址，数据和运行空间。线程也叫做（LWP） - 轻量的进程。两者的区别在于，进程在同一个CPU上不能并发执行，且两个进程间不是共享资源的方式进行数据处理的。其他的地方， 进程和线程并无太大的区别，Linux的内核将使用一直的Manner对进程和线程进行调度和处理。</p>
<p>There are several thread implementations avaliable in linux operation system.</p>
<ol>
<li><p>Linux threads</p>
<p>传统的Linux进程</p>
</li>
<li><p>Native POSIX thread library</p>
<p>内核 2.6 以后由红帽开发的进程模型。</p>
</li>
<li><p>Next Generation POSIX Thread</p>
<p>IBM开发的新的进程模型。</p>
<p>Note：Linux系统中的<strong>环境变量 LD_ASSUME_KERNEL</strong> 。</p>
</li>
</ol>
<h3 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h3><ol>
<li>优先级(控制调度的先后顺序): 优先级的范围是： 0 - 139。</li>
<li>Nice值(控制运行时间的长短): 每个进程的nice值，19 到 -20 ，nice值越大 分配的时间越长。19最低 ， -20最高。默认的nice值是0。</li>
</ol>
<h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><p>每一个进程有独立的数据存储，当多个进程在同一颗CPU切换时，内核会对进程需要的数据空间进行重定向，这个行为叫做上下文切换。Context Swtiching，负责进程的上下文切换以及调度。在多个进程切换的过程中， 每次切换都会<strong>触发一次上下文的切换</strong>，是导致性能下降的主要原因。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>CPU的终端控制通常由 硬中断 和 软中断为主， 硬中断通常见于硬件设备，鼠标键盘网卡硬盘设备。软中断常见于TCP&#x2F;IP协议操作，SCSI协议操作。</p>
<p><strong>Note：</strong> 中断的信息显示在： <code>/proc/interrepts</code>。</p>
<p><strong>Note：</strong>在多个CPU的系统中，可以将<strong>中断集中绑定在某一颗物理的CPU上</strong>，可以有效的改善系统的性能。</p>
<h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><ol>
<li>RUNNING（正常的进程）</li>
<li>STOPPED（已经停止的进程）</li>
<li>UNINTERREPTIBLE（Disk I&#x2F;O）</li>
<li>INTERREPTIBLE（Keyboard I&#x2F;O）</li>
<li>ZOMBIE（只能通过结束或重启父进程来回收僵尸进程）</li>
</ol>
<h3 id="进程的内存空间"><a href="#进程的内存空间" class="headerlink" title="进程的内存空间"></a>进程的内存空间</h3><p>进程的内存地址空间：(由顶至低顺序为)Text Segment， Data Segment，Heap Segment， Stack Segment</p>
<ol>
<li>Text Segment ： 存储进程可执行代码的部分，只读模式。</li>
<li>Data Segment： 包括三个部分<ul>
<li>Data： 数据片段， 初始数据的存储，例如静态变量。</li>
<li>BSS：填零数据的存储。数据初始化为0。</li>
<li>Heap（堆内存）： malloc()按需分配的动态内存，堆内存向更高的地址发展。</li>
</ul>
</li>
<li>Stack Segment： 栈内存。存储本地变量， 方法参数，方法返回地址。栈内存向更低的地址发展。</li>
</ol>
<p><strong>NOTE：</strong>可以使用命令<code>pmap</code>查看一个用户空间进程的地址分配情况。可以使用<code>ps</code>命令查看总的内存分配情况。</p>
<h3 id="CPU的NUMA-Node"><a href="#CPU的NUMA-Node" class="headerlink" title="CPU的NUMA Node"></a>CPU的NUMA Node</h3><ol>
<li><p>一颗物理CPU 8逻辑核，两个NUMA节点。</p>
</li>
<li><p>4CPU为一组， 在同一个NUMA节点中。</p>
</li>
<li><p>HT技术提供了一个物理两个逻辑CPU。</p>
<ul>
<li>在 1 情况下，一般不触发跨越NUMA节点的负载均衡，除非子节点过载。</li>
<li>在 2 情况下，提供了调度器tick的 时间调度 和 时间片 调度。</li>
<li>在 3 情况下， 提供调度器tick时间的负载均衡调度。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="内存性能"><a href="#内存性能" class="headerlink" title="内存性能"></a>内存性能</h2><p>Linux内存的结构</p>
<h3 id="物理内存"><a href="#物理内存" class="headerlink" title="物理内存"></a>物理内存</h3><p>物理的内存的分配分别有32位和64位的不同，</p>
<ul>
<li>32位系统中只能Linux内核可以直接管理的内存空间只有第一个 1 GB（扣除预留的部分只有896M） ， 剩下的空间需要映射到前面的1GB空间中。这种映射会使性能下降，但是对于应用程序来说是透明且无感的。</li>
<li>64位系统中将ZONE-NORMAL的区域扩展到了64GB - 128GB， 就不需要这种映射操作了。</li>
</ul>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存的地址布局</p>
<ul>
<li>32位架构中，一个进程可以使用的虚拟内存的空间最大只能有4GB。内存被分为了 3GB的用户空间和1GB的内核空间。</li>
<li>64位架构中完全没有这种限制，每个进程都可以使用全部的内存空间。</li>
</ul>
<h3 id="虚拟内存的管理"><a href="#虚拟内存的管理" class="headerlink" title="虚拟内存的管理"></a>虚拟内存的管理</h3><p>物理内存通常对于应用或者用户是不可见的，Linux<strong>内核</strong>会将<strong>任何内存自动映射到虚拟内存</strong>。</p>
<p>应用<strong>不直接使用物理内存</strong>而是向内核申请一个<strong>确切空间的虚拟内存映射</strong>，并在虚拟内存中接收并处理内存的映射关系。</p>
<p>并且，<strong>虚拟内存</strong>不是必须映射到物理内存，还可以映射到在硬盘子系统中的<strong>Swap文件</strong>。</p>
<p>应用通常也不直接写入硬盘子系统，而是写入数据到Cache&#x2F;Buffer中。pdflush内核线程在合适的时间负责将Cache和Buffer中的数据刷写到硬盘。</p>
<p>Linux虚拟内存管理器分配全部的未使用虚拟内存作为磁盘的cache，其他的操作系统只使用内存中的一部分。</p>
<p>同样的，交换的空间的管理同样也是如此，事实上交换空间占用程度并不代表系统的瓶颈所在，相反证明了linux系统资源调度上的高效。</p>
<h3 id="页帧的分配-内存分页"><a href="#页帧的分配-内存分页" class="headerlink" title="页帧的分配 - 内存分页"></a>页帧的分配 - 内存分页</h3><ol>
<li>Page - 页是在物理内存（Page Frame） 或者 虚拟内存中的连续线性地址空间。</li>
<li>Linux通过控制页单元来控制内存的分配，一页的大小是 4Kb。</li>
<li>内核了解那些分页是可用的，以及他们的确切位置。</li>
</ol>
<h3 id="Buddy-System"><a href="#Buddy-System" class="headerlink" title="Buddy System"></a>Buddy System</h3><p>Linux使用这种机制来进行空闲页的管理和维护，并对申请进行分配，始终试图保持内存分页的连续性。当内存的分配失败的时候，会内存的页帧回收。</p>
<h3 id="Page-Frame-Reclaiming"><a href="#Page-Frame-Reclaiming" class="headerlink" title="Page Frame Reclaiming"></a>Page Frame Reclaiming</h3><p>当所有的页已经处于不可用的状态（unavalible）,会触发内存的回收机制，将暂时不在使用中的，或者在使用中但是优先级低的内存重新分配，这种机制叫做内存回收。内核线程<code>pswapd</code>和内核函数try_to_free_page()负责执行这个动作。</p>
<hr>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>Linux可以支持多种多样的文件系统，这得益于内核的VFS技术，VFS是介于用户进程和文件系统之间的抽象层。由于VFS的存在，那么用户进程无需知道文件系统的类型，就可以直接进行文件系统的使用。</p>
<p>用户进程调用文件系统的流程：</p>
<p>User Process –&gt; System Call –&gt; VFS –&gt; Variety of supported file system</p>
<p>日志：</p>
<h3 id="Ext2"><a href="#Ext2" class="headerlink" title="Ext2"></a>Ext2</h3><p>简单的文件系统，无日志记录</p>
<p>Ext2 文件系统（BlockGroup）结构：</p>
<ul>
<li><p>SuperBlock： 存储信息，在每一个BlockGroup的前面都有一个SuperBlock。</p>
</li>
<li><p>BlockGroupDesciptor： 存储BlockGroup的信息。</p>
</li>
<li><p>Data Block Bitmaps： 空闲的数据块管理。</p>
</li>
<li><p>i-node Bitmap： 空闲的Inode管理</p>
</li>
<li><p>i-node Tables： inode的table存储位置。记录了文件的基本信息，例如： uid，gid, atime, ctime, mtime, dtime,指向数据块的位置。</p>
</li>
<li><p>Data blocks: 实际用户数据的存储位置。</p>
<p>文件系统查找文件的过程： 先在&#x2F;下查看inode信息，查看所找文件的信息，按照路径持续查找，直到找到了文件的inode信息，通过inode提供的信息去数据块读取数据。</p>
</li>
</ul>
<h3 id="Ext3"><a href="#Ext3" class="headerlink" title="Ext3"></a>Ext3</h3><p>ext3文件系统是ext2 的升级版，主要的变更是支持了文件系统的日志，</p>
<p>ext3支持的日志模式有三种：</p>
<ol>
<li>journal - 全量记录，数据也元数据都通过日志记录。</li>
<li>Ordered - 只有元数据会记录日志。</li>
<li>Writeback - 记录了元数据的操作，无法保证数据的一致性，突然终止会导致旧数据的出现。</li>
</ol>
<h3 id="Xfs"><a href="#Xfs" class="headerlink" title="Xfs"></a>Xfs</h3><p>xfs是新一代的日志文件系统，性能和稳定性都不错。其他资料待补全。</p>
<hr>
<h2 id="IO子系统"><a href="#IO子系统" class="headerlink" title="IO子系统"></a>IO子系统</h2><p>进程是如何使用IO子系统进行数据交换的？</p>
<ul>
<li>进程通过write()系统调用，请求一个文件的写入。</li>
<li>内核更新Pagecache映射到文件。</li>
<li>pdflush内核线程处理pagecache到硬盘。</li>
<li>文件系统层将每个Blockbuffer组成一个Bio结构，提交和写入到块设备层。</li>
<li>块设备层得到上层的请求，执行IO电梯算法操作将数据推入写入队列。</li>
<li>存储驱动接管并执行写入。</li>
<li>硬盘硬件设备执行写入到盘片。</li>
</ul>
<p>关于缓存(cache)?</p>
<p>由于CPU和硬盘的速度差距太大，因此需要缓存来进行临时的数据存储。</p>
<p>速度递减的结构是：</p>
<p>CPU –&gt; cache –&gt; RAM –&gt; Disk</p>
<h3 id="块层-Block-Layer"><a href="#块层-Block-Layer" class="headerlink" title="块层 Block Layer"></a>块层 Block Layer</h3><p>关键的数据结构就是bio结构，bio结构是一种接口，存在于 文件系统层 和 块层之间。</p>
<p>bio就是将相邻的block buffer块整合到一起，发送bio到块层。</p>
<h3 id="块大小"><a href="#块大小" class="headerlink" title="块大小"></a>块大小</h3><p>直接影响服务器性能的设置。如果需要存储的文件尺寸比较大，那么设置大的blocksize性能更好。</p>
<h3 id="IO电梯算法"><a href="#IO电梯算法" class="headerlink" title="IO电梯算法"></a>IO电梯算法</h3><ul>
<li>Anticipatory</li>
<li>CFQ</li>
<li>BFQ</li>
<li>Deadline</li>
<li>MQ-deadline</li>
<li>NOOP</li>
<li>NONE</li>
</ul>
<h3 id="存储驱动"><a href="#存储驱动" class="headerlink" title="存储驱动"></a>存储驱动</h3><ol>
<li>SCSI</li>
<li>RAID</li>
</ol>
<hr>
<h2 id="网络子系统"><a href="#网络子系统" class="headerlink" title="网络子系统"></a>网络子系统</h2><pre class="language-none"><code class="language-none">netstat -n | awk &#39;&#x2F;^tcp&#x2F; &#123;++S[$NF]&#125; END &#123;for (a in S) print a, S[a]&#125;&#39;
# 查看所有的连接状态</code></pre>

<p>当一个应用需要发送网络数据流程：</p>
<ol>
<li>应用打包自己的数据。</li>
<li>应用通过套接字接口写入数据。</li>
<li>socket buffer用于处理需要被发送的数据。缓冲区引用了数据，并贯穿所有的层。</li>
<li>在每个层中，执行相应的操作，例如数据的封包，添加数据的报文首部。</li>
<li>从网卡的物理接口发出。</li>
<li>以太网帧抵达对端的网卡接口。</li>
<li>如果MAC地址匹配对端网卡的地址，数据帧移动到物理网卡的Buffer。</li>
<li>移动数据包到socket buffer中，同时发出一次CPU硬中断。</li>
<li>数据包逐层解包，直到抵达可以解释的应用层。</li>
</ol>
<hr>
<p>通过&#x2F;proc&#x2F;sys&#x2F;net目录可以进行网络子系统的调优。</p>
<p>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;rmem_max<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;rmem_default<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;wmem_max<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;wmem_default<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_mem<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_rmem<br>​	&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_wmem</p>
<h3 id="Network-API-NAPI"><a href="#Network-API-NAPI" class="headerlink" title="Network API(NAPI)"></a>Network API(NAPI)</h3><p>NAPI是一种新的网络处理方式，每次对数据包的操作都会触发系统中断，新的方式使用的是poll的方式。</p>
<p>NAPI 是 Linux 上采用的一种提高网络处理效率的技术，它的核心概念就是不采用中断的方式读取数据，而代之以首先采用中断唤醒数据接收的服务程序，然后 POLL 的方法来轮询数据，</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-napi/">https://www.ibm.com/developerworks/cn/linux/l-napi/</a></p>
<h3 id="Netfilter"><a href="#Netfilter" class="headerlink" title="Netfilter"></a>Netfilter</h3><p>Linux有使用了内核的Netfilter模块，可以通过Iptables进行管理和控制。</p>
<p>Netfilter提供了默认的集中功能：</p>
<ol>
<li>通过匹配规则，进行网络数据包的过滤。</li>
<li>通过匹配规则，提供修改数据包地址信息。</li>
</ol>
<hr>
<p>Netfilter可以使用的过滤属性有；</p>
<ul>
<li>􏰀  Network interface</li>
<li>􏰀  IP address, IP address range, subnet</li>
<li>􏰀  Protocol</li>
<li>􏰀  ICMP Type</li>
<li>􏰀  Port</li>
<li>􏰀  TCP flag</li>
<li>􏰀  State</li>
</ul>
<hr>
<p>Prerouting – Routing – Forward – Postrouting</p>
<p>​						  -                              -</p>
<p>​           			 Input                     Output</p>
<hr>
<p>Netfilter可以使用执行的操作有：</p>
<ul>
<li>ACCEPT</li>
<li>DROP</li>
<li>REJECT</li>
<li>LOG</li>
<li>MASQUERADE, SNAT, DNAT, REDIRECT</li>
</ul>
<p>Netfilter可以检测的状态；</p>
<ul>
<li><p>NEW</p>
</li>
<li><p>ESTABLISHED</p>
</li>
<li><p>RELATED</p>
</li>
<li><p>INVALID</p>
<p>还可以单独使用独立的模块用来进行分析和过滤相关的数据包。</p>
</li>
</ul>
<h3 id="TCPIP"><a href="#TCPIP" class="headerlink" title="TCPIP"></a>TCPIP</h3><p>connection establishment - 连接维持，在应用的数据被传送之前，TCP一直属于维持的状态，创建连接的时候叫做三次握手。断开连接的时候进行四次挥手。</p>
<p>三次握手：</p>
<ol>
<li>客户端发布SYN数据包，请求对端连接。</li>
<li>服务端收到SYN，回复SYN+ACK</li>
<li>客户端发布ACK，开始维持连接。</li>
</ol>
<p>四次挥手：</p>
<ol>
<li>客户端 发送 FIN</li>
<li>服务端发送ACK</li>
<li>服务端发送 FIN</li>
<li>客户端发送 ACK</li>
</ol>
<hr>
<p>TCPIP流量控制</p>
<ol>
<li>滑动窗口： 双方协商传输数据包大小。</li>
</ol>
<p>负载</p>
<ol>
<li><p>校验和offload</p>
<p>用于校验数据的字段计算的负载。</p>
</li>
<li><p>TCP段Offload（TSO）</p>
<p>用于计算大于MTU的数据包的消耗。</p>
</li>
</ol>
<p>网卡聚合： Bonding module</p>
<p>网卡的聚合可以将多个网卡绑定为一个物理网卡使用， Windows下叫做 Teaming。能够提供比较初级的负载均衡和容错。<strong>可以直接提高系统的性能表现。</strong></p>
<h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>在调试系统之前，需要了解的是相关性能指标的含义，由于是开源的系统，所以可用的工具多种多样，但是监控的指标是一致的。</p>
<h2 id="CPU性能指标"><a href="#CPU性能指标" class="headerlink" title="CPU性能指标"></a>CPU性能指标</h2><ul>
<li><p>CPU使用率 - 每一颗处理器的利用率，直观的指标。</p>
</li>
<li><p>User Time： CPU运行在用户空间的时间，包括Nice Time，运行在用户空间的时间<strong>越长越好</strong>。</p>
</li>
<li><p>System Time： CPU用于处理内核级别操作的时间，包括IRQ和Softirq time。维持在较高的水平说明系统的瓶颈可能是网络或者驱动栈。通常情况下，内核时间<strong>越短越好</strong>。</p>
</li>
<li><p>Waiting： 等待IO的时间。类似<em>Blocked</em>的数值，等待的时间<strong>越短越好</strong>。如果太多时间花在等待IO，你需要排查IO子系统的性能。</p>
</li>
<li><p>Idle Time： 系统的等待任务的空闲时间，描述CPU空闲的<strong>百分比</strong>。</p>
</li>
<li><p>Nice Time： CPU<strong>百分比</strong>，重新分配进程Nice值所占的百分比。</p>
</li>
<li><p>Load Average： Rolling average of the sum of the followings: </p>
<ol>
<li>进程队列等待被执行的数量。</li>
<li>不可中断任务等待被完成的数量。（IO操作的进程）</li>
</ol>
</li>
<li><p>Runable Processes：描述准备执行的进程，在持续的时间中<strong>不应该超过物理CPU核心数量的10倍</strong>。超过就是CPU瓶颈。</p>
</li>
<li><p>Blocked： 等待IO完成的进程，直接指向IO瓶颈。</p>
</li>
<li><p>Context Switch： 表示大量的线程切换，数值过高且大量系统中断可能代表了<strong>信号驱动或应用问题</strong>。这个参数通常<strong>不期望过高</strong>，因为CPU的缓存应该可以处理进程间切换的数据，但是<strong>某些是必要的</strong>。</p>
</li>
<li><p>Interrupts： 中断的值包括硬中断和软中断，硬中断更不利于系统的性能释放，高中断值是<strong>软件瓶颈</strong>的迹象，同时也存在于<strong>内核 或 驱动</strong>。 要注意的是 CPU的中断值可能是包括CPUclock导致的。</p>
</li>
</ul>
<h2 id="内存指标"><a href="#内存指标" class="headerlink" title="内存指标"></a>内存指标</h2><ul>
<li><p>Free Memory： 和其他的操作系统来进行比较，Linux的内存使用量不是主要的关心指标，因为Linux内核采用的虚拟内存管理器，会将未使用的内存作为文件系统的cache，所以，减除Buffers和Cache才是真正未使用的内存量。 Free &#x3D; Used - Buffer - cache</p>
</li>
<li><p>Swap Usage： 交换空间的使用量，使用量不是主要的指标，相比较更应该查看<strong>Swap IN&#x2F;OUT</strong>，才可以看出是否为内存瓶颈。<strong>数值在200-300+ page&#x2F;s</strong> 并且<strong>状况持续</strong>才说明是内存的瓶颈。</p>
</li>
<li><p>Buffer and Cache:  Cache分配给文件系统和块设备缓存。？ 块设备被写入之前和成Bio结构的时候使用的buffer空间？</p>
</li>
<li><p>Slabs： 内核使用的内存空间。值得注意的是内核的Pages不能被Pageout到硬盘。</p>
</li>
<li><p>Active versus Inactive Memory： <strong>提供数据的内存空间</strong>叫做活动内存。未活动的内存类似于候选，<strong>等待被kswapd进程交换到硬盘</strong>。</p>
</li>
</ul>
<h2 id="网络指标"><a href="#网络指标" class="headerlink" title="网络指标"></a>网络指标</h2><ul>
<li>Packets Received and sent : 数据包的发送量和接收量。关于网络的状况。</li>
<li>Bytes Received and sent： 数据字节数的发送量和接收量。</li>
<li>Collisions per second： 数据包冲突的数量。一般来讲不是服务器的问题，是网络设备的问题，常见的是在Hub网络中。</li>
<li>Packets Dropped： 内核丢弃的数据包，通常情况下和防火墙规则以及网络缓冲区溢出有关，默认较少。</li>
<li>Overruns: 展示了缓冲区溢出的次数。 结合 Packets Dropped来分析可能的瓶颈，缓冲区 或者 网络数据队列长度。</li>
<li>Errors： 数据包错误。网络数据无法完成校验或者网线的损坏。</li>
</ul>
<h2 id="块设备指标"><a href="#块设备指标" class="headerlink" title="块设备指标"></a>块设备指标</h2><ul>
<li>IOwait ： IOwait表示CPU在等待IO操作的完成，<strong>持续的数值偏高说明是IO的瓶颈</strong>。</li>
<li>Average queue length： 大量IO请求未完成，通常情况下<strong>在 2 - 3 之间是最佳的值</strong>。 如果高于说明是IO瓶颈。</li>
<li>Average Wait： 从请求到得到服务的平均时间。包括队列等待的时间和请求执行的时间。</li>
</ul>
<hr>
<h1 id="观察性能的工具"><a href="#观察性能的工具" class="headerlink" title="观察性能的工具"></a>观察性能的工具</h1><ol>
<li><p>top</p>
<p>通过top命令可以查看所有的进程， 观察使用CPU高的进程，可以kill命令停止它；或者观察TIME过低的进程，使用renice命令提高进程在CPU上的调度时间。</p>
<p>常用的命令：</p>
<p>t  – 显示Summary信息。关闭或者不同的风格</p>
<p>m – 显示内存的信息。 关闭或者使用不同的风格。</p>
<p>A – 显示多种不同的参数来观察进程。 Def ， Job ， Mem， Usr， 四个维度；默认， 任务，内存， 用户。</p>
<p>f – 交互式配置界面。</p>
<p>o – 交互式的选择排序方式。</p>
<p>r – renice</p>
<p>k – kill</p>
</li>
<li><p>[[Linux_vmstat|Linux_vmstat]]</p>
</li>
<li><p>uptime OR w</p>
<p>观察系统的负载状况和当前登陆到系统的用户。 三个load average的值，1 5 15 分钟的系统负载情况， 主要是观察状况， 前面介绍了 ， 计算的方式是<strong>CPU任务队列长度</strong> 和 <strong>不可中断进程的数量（IO操作的影响）</strong>。</p>
</li>
<li><p>ps OR pstree</p>
<p>观察系统进程的列表和系统进程列表树状图。</p>
<p>在ps -elFL命令中，有几个不常用的列 ： </p>
<ul>
<li>WCHAN： 休眠中的进程使用的内核函数名称。 - 表示进程正在运行；* 表示进程有多线程或者ps无法详细显示。</li>
<li>RSS ： 常驻内存集。进程使用的非交换物理内存。单位是： KB</li>
<li>PSR： 进程运行所在的CPU编号。</li>
</ul>
</li>
<li><p>free</p>
<p>free命令是查看内存的详细信息使用。</p>
<p>free的命令在最新的操作系统已经直观的显示内存的每个参数及细节。直接能看懂了， 老版本看 used下的Buffer&#x2F;Cache行数值，即使已经使用的内存；看free下的Mem行， 即使未使用的内存值。其余直接查看即可。</p>
</li>
<li></li>
</ol>
<p>CPU整合的不同架构：</p>
<p>NUMA，SMP，MPP的概念：</p>
<p><a href="https://www.cnblogs.com/yubo/archive/2010/04/23/1718810.html">https://www.cnblogs.com/yubo/archive/2010/04/23/1718810.html</a></p>
<h1 id="调优方法"><a href="#调优方法" class="headerlink" title="调优方法"></a>调优方法</h1><h2 id="安装的考虑"><a href="#安装的考虑" class="headerlink" title="安装的考虑"></a>安装的考虑</h2><p>安装系统之前就应该考虑做什么使用， 采用什么样的配置，CPU（数量），内存（大小， 多通道），硬盘（容量，RAID），网络（带宽，是否聚合，是否需要Binding）等等问题。</p>
<p>通过这些考虑可以避免很多后续的问题。</p>
<ol>
<li>收集配置<ul>
<li>dmesg</li>
<li>ulimit</li>
<li>关闭不用的守护进程</li>
<li>改变Runlevel</li>
<li>是否需要SELinux</li>
<li>是否需要编译内核</li>
</ul>
</li>
</ol>
<hr>
<h2 id="更改内核参数"><a href="#更改内核参数" class="headerlink" title="更改内核参数"></a>更改内核参数</h2><ol>
<li><p>系统的内核参数在&#x2F;proc&#x2F;sys目录下，有如下的几个方面：</p>
<ul>
<li>vm</li>
<li>net</li>
<li>fs</li>
<li>abi</li>
<li>Kernel</li>
</ul>
<p>可以通过sysctl命令进行调节， 也可以写入配置文件&#x2F;etc&#x2F;sysctl.conf</p>
</li>
</ol>
<h2 id="进程子系统"><a href="#进程子系统" class="headerlink" title="进程子系统"></a>进程子系统</h2><h3 id="SMT结构"><a href="#SMT结构" class="headerlink" title="SMT结构"></a>SMT结构</h3><ol>
<li>更改进程的优先级renice，使业务进程更多的得到CPU cycle。</li>
<li>变更系统的中断处理，一般有两种方式，一种是将中断绑定给一颗物理CPU集中处理。还有一种是让物理CPU自动控制中断。</li>
</ol>
<h3 id="NUMA结构"><a href="#NUMA结构" class="headerlink" title="NUMA结构"></a>NUMA结构</h3><ol>
<li>使用numactl软件包中的numastat来查看NUMA节点的状态。</li>
<li>如果numa_miss 的数值过高，考虑使用NUMA节点的亲和调节或者renice进程的数值。</li>
<li></li>
</ol>
<h2 id="内存子系统"><a href="#内存子系统" class="headerlink" title="内存子系统"></a>内存子系统</h2><h3 id="内核行为"><a href="#内核行为" class="headerlink" title="内核行为"></a>内核行为</h3><ol>
<li><p>vm.swappiness的调整</p>
<p>内存交换的频度</p>
<ul>
<li>设置为0 ， 如果内存没有耗尽就不使用交换分区。</li>
<li>设置为100，积极的使用交换分区。</li>
</ul>
</li>
<li><p>vm.dirty_background_ratio</p>
<p>脏数据回写到硬盘的比例，按照百分比设置，触发pdflush内核进程的回写。</p>
</li>
</ol>
<h3 id="交换分区"><a href="#交换分区" class="headerlink" title="交换分区"></a>交换分区</h3><p>Linux推荐使用多个硬盘，每个硬盘上建立交换分区，Linux会自动调度不同的交换分区来合理的使用空间。可以在&#x2F;etc&#x2F;fstab文件中进行交换分区的配置，可以调整优先级，使系统优先使用某几个分区。 (32767 is the highest and 0 is the lowest).</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/dev/sda2	swap	swap sw 	<span class="token number">0</span> <span class="token number">0</span>
/dev/sdb2	swap	swap sw 	<span class="token number">0</span> <span class="token number">0</span>

/dev/sda2	swap	swap sw,pri<span class="token operator">=</span><span class="token number">1</span> 	<span class="token number">0</span> <span class="token number">0</span>
/dev/sdb2	swap	swap sw,pri<span class="token operator">=</span><span class="token number">3</span> 	<span class="token number">0</span> <span class="token number">0</span></code></pre>

<h3 id="hugeLTBfs"><a href="#hugeLTBfs" class="headerlink" title="hugeLTBfs"></a>hugeLTBfs</h3><p>该值对 虚拟机 和 数据库 这种需要使用大量的内存空间的应用 是非常有用的参数。</p>
<p>&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;nr_hugepages 设置HugePages的容量。</p>
<p>cat &#x2F;proc&#x2F;meminfo | grep huge  查看相关的信息。</p>
<p>如果应用需要使用Hugepage，可以使用文件系统挂载的方式。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> <span class="token parameter variable">-t</span> hugetlbfs none /mnt/hugepages</code></pre>

<h2 id="硬盘子系统"><a href="#硬盘子系统" class="headerlink" title="硬盘子系统"></a>硬盘子系统</h2><h3 id="安装的考量"><a href="#安装的考量" class="headerlink" title="安装的考量"></a>安装的考量</h3><ol>
<li>是否需要Raid ，如何组建Raid， 硬件Raid或者软件Raid。</li>
<li>硬盘的性能计算。IOs PerSecond * 4kB &#x3D; 800kB</li>
</ol>
<h3 id="分区的规划"><a href="#分区的规划" class="headerlink" title="分区的规划"></a>分区的规划</h3><p>分区的规划， 规则和细节见： FHS</p>
<h3 id="内核调度算法"><a href="#内核调度算法" class="headerlink" title="内核调度算法"></a>内核调度算法</h3><p>常见的调度算法：</p>
<ul>
<li><p>Anticipatory</p>
</li>
<li><p>CFQ</p>
</li>
<li><p>BFQ</p>
</li>
<li><p>Deadline</p>
</li>
<li><p>MQ-deadline</p>
</li>
<li><p>NOOP</p>
</li>
<li><p>NONE</p>
<p>硬盘的调度算法可以单独设置某个硬盘，也可以在系统启动的内核参数重设置。</p>
<p>Cat &#x2F;proc&#x2F;block&#x2F;sda&#x2F;queue&#x2F;schedular 查看sda的调度算法。</p>
<p>elevator&#x3D;noop 在Grub启动配置内核文件的行中添加。</p>
</li>
</ul>
<h3 id="文件系统-1"><a href="#文件系统-1" class="headerlink" title="文件系统"></a>文件系统</h3><ol>
<li><p>文件系统的日志记录模式</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/dev/sdb1 /testfs ext3 defaults,data<span class="token operator">=</span>writeback <span class="token number">0</span> <span class="token number">0</span></code></pre>
</li>
<li><p>文件系统的块大小</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Perf</tag>
      </tags>
  </entry>
  <entry>
    <title>RDS QPS 下降引发的网络流控分析记录</title>
    <url>/2023/05/09/Linux/Linux_RDS%20QPS%20%E4%B8%8B%E9%99%8D%E5%BC%95%E5%8F%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%81%E6%8E%A7%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="Topic-1-现象"><a href="#Topic-1-现象" class="headerlink" title="Topic 1 现象"></a>Topic 1 现象</h3><p>看到一个朋友的问题， 由 RDS QPS 下降引发的网络问题分析： </p>
<p>引用原文的问题描述：</p>
<blockquote>
<p>这个问题一开始是在进行RDS实验的时候发现的。最初的情景是，多台机器同时对数据库进行select和insert操作时，会发现insert操作会造成select操作qps大幅下降，且insert操作结束之后select操作的qps仍不能回升。起初以为是RDS的问题，但是在复现问题、监控RDS之后发现RDS的压力其实很小。于是开始怀疑是网络的问题，在简化了场景和操作之后，发现能在过去做tcp实验的机器上复现，于是用这个更简单的场景进行问题复现和分析。</p>
</blockquote>
<p>正确答案以及复盘： <a href="https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/">https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/</a></p>
<p>感谢大佬<a href="https://twitter.com/plantegg">@plantegg</a> 提供的这个案例和<a href="https://public.zsxq.com/groups/15552551584552.html">知识星球</a>， tcp协议和 os 网络系统的分析我之前真是一句都说不出来， 这次确实完整的走了一遍网络的部分。</p>
<hr>
<p>下面是我的一些思路和资料整理： </p>
<p>看完了问题的描述， 我基本上可以给出一个经验的判断，这个问题是aws t2实例的流控， 因为表现和之前的测试非常一致， 为了确认这个问题我又进行了相关的测试，基准信息如下：</p>
<p>实例类型：t2.micro</p>
<p>实例的基准带宽: 64Mbps</p>
<p>实例的突增带宽: 1Gbps</p>
<p>实例的EBS规格： 3000 IOPS， 100GB根卷存储， 125MiB&#x2F;s</p>
<p>实例的OS ： AmazonLinux2023. </p>
<p>Congestion: Cubic</p>
<p>具体的测试方法：</p>
<ol>
<li>启动4个实例  t2.micro, hostname 分别是 nginx \ client1 \ client2 ， 方便测试和区分实例； 启动一个额外的实例Client3 来尝试验证是不是流控。</li>
<li>nginx上面启动一个Nginx server， 发布一个 2GB 大小的文件； Client 1、 Client2 两个实例上面使用curl命令下载。</li>
<li>尝试保持这个流量一段时间之后， 带宽会被限制到64 Mbps。</li>
<li>由于是流控的问题， 所以现象会稳定出现。</li>
</ol>
<hr>
<p>Summary： </p>
<p>我理解这个应该是一个对tcp流的限制， 所以验证这个问题的方法是启动一个iperf的服务并重新生成流量， 如果是流控的话， 那么新的流量应该不受限制， 简单的证明方式就是在Nginx Server上面启动一个Iperf3 的 Server ， 然后在发生降低速度的时刻， 使用 Client3 iperf 测试 Nginx Server， 这个时候观察到的现象是两个原有网络链接的速度还是很低， 但是iperf3 的测试网络吞吐量是比较高的。</p>
<p>t系列的实例都是突增类型， 可以允许一定的时间使用超过实例基准性能的资源， 在网络流量超过基准性能一段时间之后， 实例的带宽会被限制。 之前真的一直都没有思考过实例的带宽限制都是怎么做的， 让我在描述更多的细节我也确实无法提供， 借着这个机会，深入研究一下。</p>
<hr>
<p>重新开始分析这个问题： </p>
<ol>
<li><p>分析网络抓包看看，被限速的是Server的实例， 所以直接看Server的抓包.</p>
<p>贴一个我自己抓包截图，<strong>两个不同的流</strong>:</p>
<ul>
<li>Server to Client 1:</li>
</ul>
<p><img src="https://s2.loli.net/2023/05/08/WDAdY2RIxu9lPoF.png" alt="2023-05-08_20-39.png"></p>
<ul>
<li>Server to Client 2:</li>
</ul>
<p><img src="https://s2.loli.net/2023/05/08/WPR62JiBQ4ktlbh.png" alt="2023-05-08_20-39_1.png"></p>
<p>对与上面的两个截图来看， 斜率表越大，下载速度越快， 在斜率较大的前半段， 并未发生任何的TCP异常； 后半段斜率变小的期间，一直有规律的红色标记， 那个标记对应到抓包的结果中，是快速重传的数据包， 并且发生快速重传的时间比较规律， 这类规律的快速重传影响了传输的速度。</p>
</li>
<li><p>查看<strong>RTT的变化</strong>， 截图如下： </p>
<p>Server to Client 1: </p>
<p><img src="https://s2.loli.net/2023/05/08/YUZSvzAGq1PwnsF.png" alt="2023-05-08_20-52.png"></p>
<p>Server to Client 2:</p>
<p><img src="https://s2.loli.net/2023/05/08/7TfVQMUIghqarCx.png" alt="2023-05-08_20-52_1.png"></p>
<p>上面的这个部分可以看出整体增大了RTT ，基于之前的tc流控测试，<strong>rtt增大</strong>的链路上， 发<strong>送和接收的窗口</strong>需要相应的<strong>增大</strong>， 才能保证带宽的利用率较高。 按照实验更增加 <strong>wmem 和 rmem</strong>， 三个实例的设置都增加， 增加之后的速度并没有改变， <strong>依旧还是被限制的水平</strong>。RTT从抓包的结果上面来看就是有明显的变化。</p>
</li>
<li><p>查看Server 实例的<strong>CWND</strong>， 这个CWND的记录直接使用命令行看：</p>
<p><img src="https://s2.loli.net/2023/05/08/3eGPAKtZ9RdBHUE.png" alt="2023-05-08_16-20.png"></p>
<p>左侧是Server上面的命令行执行结果 命令是 <code>ss -4tni</code> ， 命令输出的结果中， 有当前的TCP链接的 RTT， CWND的值， 可以观察到， 到两个Server的链接中RTT的值 ~60ms 左右， 我使用了watch 0.1s来执行ss命令和观察， 重点关注上面的几个参数， 可以发现这几个数值的范围如下：</p>
<p><strong>RTT</strong> ~ 50ms ~ 70ms 之间变化的频率基本上与cwnd的变化频率一致。</p>
<p><strong>CWND</strong> 40 - 64 之间变化， 到达64之后回落到40左右， 然后快速提高到64再回落。</p>
<p>引用一个描述比较清晰的中文文章，其中也介绍了常见的几种<strong>拥塞控制算法</strong>的模式， 帮我大概理解了下网络的部分： </p>
<blockquote>
<p>TCP 连接建立后先经过 Slow Start 阶段，每收到一个 ACK，CWND 翻倍，数据发送率以指数形式增长，等出现丢包，或达到 ssthresh，或到达接收方 RWND 限制后进入 Congestion Avoidance 阶段。<a href="https://zhuanlan.zhihu.com/p/142618130?utm_id=0">1</a></p>
</blockquote>
<p>从另一个文章中找到了如下的一个公式： </p>
<blockquote>
<p>因此想要充分利用带宽，必须让窗口大小接近 BDP 的大小，才能确保最大吞吐量。</p>
<p>我们通过如下的例子来讨论一下，究竟 rwnd 和 cwnd 的值与理论最大使用带宽的关系是什么？</p>
<pre><code>min(cwnd, rwnd) = 16 KB
RTT = 100 ms
16 KB = 16 X 1024 X 8 = 131072 bits
131072 / 0.1 = 1310720 bits/s
1310720 bits/s = 1310720 / 1000000 = 1.31 Mbps
</code></pre>
<p>因此，无论发送端和接收端的实际带宽为多大，当窗口大小为 16 KB 时，传输速率最大只能为 1.31 Mbps 。<a href="https://blog.csdn.net/lingshengxiyou/article/details/130210354">2</a></p>
</blockquote>
<p>可以看到上面的公式中的第一个， 在计算的时候会在cwnd， rwnd 两个指标中<strong>选取最小</strong>的生效， 那么基于上面的变动， 我们已经把wmem ， rmem 都改到了较大的值， 那么这个时候较小 的就是 cwnd 了， 这个值增加不上去就无法充分的利用带宽。</p>
<p>那么现在的问题变成了为什么 cwnd 无法继续增长？</p>
<blockquote>
<p>Cubic 在 BIC 的基础上，一个是通过三次函数去平滑 CWND 增长曲线，让它在接近上一个  CWND 最大值时保持的时间更长一些，再有就是让 CWND 的增长和 RTT 长短无关，即不是每次 ACK 后就去增大 CWND，而是让  CWND 增长的三次函数跟时间相关，不管 RTT 多大，一定时间后 CWND 一定增长到某个值，从而让网络更公平，RTT 小的连接不能挤占  RTT 大的连接的资源。<a href="https://zhuanlan.zhihu.com/p/142618130?utm_id=0">1</a></p>
</blockquote>
<p>如果cwnd的大小在拥塞避免之后是基于时间来进行增长的，那么就可以结合上面我观察到的现象， 基本上过一段时间就会出现一定量的快速重传（抓包结果）， 周期性的RTT 与 cwnd的变化（命令输出结果）比较吻合了。</p>
<p>基于上面的命令输出结果可以认为确实是通过RTT的增加 + 丢包控制 CWND， 压着CWND的值上不去的原因就是快速重传， 让cwnd随时间增大之后快速重传， 然后触发拥塞避免， 回退到较低的值， 然后开始循环。</p>
</li>
</ol>
<hr>
<p>感谢<a href="https://twitter.com/bnu_chenshuo/status/1654867295452397569">Shuo Chen 和 Hao Chen 大佬的测试分析思路以及工具</a>，反复的理解这个Thread里面的说法， 现在基本上可以抓住这个问题的逻辑了。 </p>
<p>走着一圈之后， 写完了上面自己的总结， 现在复制大佬的答案： </p>
<blockquote>
<p><a href="https://twitter.com/haoel/status/1654654583149563904">@bnu_chenshuo</a> 从发生 retransmit 的间隔看，太规律了。我现在怀疑是 aws 有意限速，通过非常巧妙的少量丢包或乱序（图一中粗线下挂的小黑点），并控制 RTT，让 Linux TCP sender 的 cwnd 钳制在几十 KB，RTT 在 10ms，进而限制吞吐量在几千 KB&#x2F;s。</p>
<p>我在 t3.micro 上用 FreeBSD 13 复现。观察到 AWS 先用对付 Linux 的办法：故意丢包乱序 + RTT&#x3D;10ms，发现不灵之后，恼羞成怒，包也不丢了，直接卡脖子。总之就是不让你白嫖网速。对 Linux 是智斗，每秒钟丢你一两个包，RTT&#x3D;10ms，让你自己cwnd小、速度上不去，你也不好说啥。对 FreeBSD 就上武力了。</p>
</blockquote>
<p>？？？对于测试的结果， 我这边确实不同，我读取到的RTT 60ms 明显要比大佬测试的时候的RTT 10ms 更高. 我把这个理解为 中国区AWS 与 Global的差异， 这个问题也许还能继续分析?</p>
<p>调整 rmem ， wmem 的大小到 MTU * CWND &#x3D; 9001 * 60 &#x3D; 540600 ，这个数值x2 设置到发送和接收的窗口， 重新抓包， 理论上应该看不到快速重传了。并且拥塞窗口应该是稳定在 60 左右。 </p>
<p>测试的过程中观察， 设置 rmem wmem 最终的值为 1000000， ss命令中的 CWND稳定在 57 ， 抓包的结果中没有快速重传， RTT也比较稳定了， 不再有跳跃和突然增加到 100+ 的RTT， 速度还是被限制了， 这时候较小的是 RWND， 所以也是为什么 CWND 可以比较稳定不再变化的原因。</p>
<p><img src="https://s2.loli.net/2023/05/09/B9y1vpEAQ7nDUrc.png" alt="2023-05-09_15-04_1.png"><br><img src="https://s2.loli.net/2023/05/09/o4SgzJrtXf5wixe.png" alt="2023-05-09_15-04.png"></p>
<h3 id="Topic-2-如何使用wireshark查看丢包率？"><a href="#Topic-2-如何使用wireshark查看丢包率？" class="headerlink" title="Topic 2 如何使用wireshark查看丢包率？"></a>Topic 2 如何使用wireshark查看丢包率？</h3><p>如何查看实例在限速状态的 丢包率 和 重传率？ </p>
<p>在客户端的抓包结果里面， 使用字段 tcp.stream eq 0 and tcp.analysis.fast_retransmission 调整到对应的 tcp stream， 然后在Conversion</p>
<p>s窗口中统计的 Percent Filter 里面的百分比就是重传率， 丢包应该是 ： tcp.analysis.lost_segment</p>
<p>或者就直接使用IO Graphs， 然后可以看到下面的图像，可以看到这个丢包比较小， 所以我在Y轴设置 100 的 Factor， 这样看起来清楚些。</p>
<p>如图：</p>
<p><img src="https://s2.loli.net/2023/05/10/yZ5uCSnvYXi73Be.png" alt="2023-05-10_16-23.png"></p>
<p>基于这个抓包结果里面的基本上是乱序和快速重传，Server是发送数据的源头， 客户端没有收到认为这个是丢包。</p>
<p>那么感觉<strong>丢包率</strong>看Client的抓包结果应该就可以。 查看<strong>重传率</strong> 从Server这测的抓包结果来看。 </p>
<hr>
<h3 id="Topic-3-RTT的变长是不是流控可以设计的？"><a href="#Topic-3-RTT的变长是不是流控可以设计的？" class="headerlink" title="Topic 3 RTT的变长是不是流控可以设计的？"></a>Topic 3 RTT的变长是不是流控可以设计的？</h3><p>这个rtt确实无法区分到底是底层的流控带来的， 或者是设计故意拖长的，更新额外测试的结果:</p>
<ol>
<li><p>将三个实例完全换成 c5.large,  后续没有RTT非常高的的问题了， 如图:</p>
<p><img src="https://s2.loli.net/2023/05/09/2PzAZy7GdYQbxp8.png" alt="2023-05-09_20-24.png"></p>
</li>
<li><p>尝试处理掉CPU 的 IOwait， 也就是将这个文件缩小到 500MB ，之后nginx的数据都从内存取出， 发现RTT增加到了120ms， 维持了较长的时间之后还会回到60ms， 不知道这个原因是什么， 但是看起来RTT不稳定可能确实和os本身没什么关系。</p>
</li>
</ol>
<hr>
<p>试试其他规格的实例： 尝试在c5的实例上面直接使用tc卡住网桥设备的带宽， 来模拟链路中的网络设备？ 观察rtt看看是否有任何的变化。 </p>
<p>测试的方法使用docker-compose启动两个pod， 文件如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">pod1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> 111.dkr.ecr.cn<span class="token punctuation">-</span>north<span class="token punctuation">-</span>1.amazonaws.com.cn/haydenarchlinux<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
  <span class="token key atrule">pod2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> 111.dkr.ecr.cn<span class="token punctuation">-</span>north<span class="token punctuation">-</span>1.amazonaws.com.cn/haydenarchlinux<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre>

<p>在docker容器里面放入 Shuo Chen 大佬的tcpperf二进制文件，然后我在pod2里面启动 <code>-s</code>，  然后在br上面加tc控制带宽。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">tc qdisc del dev <span class="token string">"br-9f86ad93edf1"</span> root
tc qdisc <span class="token function">add</span> dev <span class="token string">"br-9f86ad93edf1"</span> root handle <span class="token number">1</span>:0 htb default <span class="token number">1</span>
tc class <span class="token function">add</span> dev <span class="token string">"br-9f86ad93edf1"</span> parent <span class="token number">1</span>:0 classid <span class="token number">1</span>:1 htb rate 64mbit</code></pre>

<p>在测试pod1与pod2 的带宽， 他们的通信速度非常快， 10G的文件几秒就发送完了， 并且br上面的限制没有生效， 感觉应该是直接走了os的协议栈， 其他的部分都没过， 所以没法继续测试。 </p>
<p>转而使用host os上面的 tcpperf 去发送数据到容器内， 带宽确实被限制了， 但是RTT依旧很低。</p>
<p><img src="https://s2.loli.net/2023/05/10/SnGDIEO31YxiMHe.png" alt="2023-05-10_10-47.png"></p>
<p>看起来思路是没问题的？ 但是好像也确实无法证明RTT升高的最终原因。</p>
<hr>
<p>Update 2023-05-10</p>
<p>对于这个延迟是不是流控添加上去的， 我得到了两个不一致的答案， </p>
<p>一种说法是， RTT升高是流控刻意为之， 主要的原因是， RTT的翻倍量级比较大。</p>
<p>另一个说法是， 没有给网络添加延时， 这不符合逻辑， RTT增高确实是不合理的现象。 </p>
<p><img src="https://s2.loli.net/2023/05/10/v7FPdLZyMkGNjSO.png" alt="2023-05-10_10-53.png"></p>
<hr>
<p>Update 2023-07-04</p>
<p>我最后找到了原因， 在ENA驱动程序的文档中是这样描述流控这个行为的： </p>
<blockquote>
<p>当实例的网络流量超过最大值时，AWS 将通过排队然后丢弃网络数据包来调整超过最大值的流量。您可以使用网络性能指标监控流量何时超过最大值。这些指标可以实时告知您对网络流量的影响以及可能的网络性能问题。</p>
<p><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/WindowsGuide/monitoring-network-performance-ena.htmlhttps://docs.aws.amazon.com/zh_cn/AWSEC2/latest/WindowsGuide/monitoring-network-performance-ena.html">https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/WindowsGuide/monitoring-network-performance-ena.htmlhttps://docs.aws.amazon.com/zh_cn/AWSEC2/latest/WindowsGuide/monitoring-network-performance-ena.html</a></p>
</blockquote>
<p>基于上面的描述就可以确认， 延迟高的原因是 队列 ， 丢包的原因是控制操作系统的TCP协议， 让 TCP 协议来遵守底层的规则。 看到了相关的指标， 两者是分开的。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Database, Kernel, Network</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ_SysV风格管理脚本模板</title>
    <url>/2019/09/23/Linux/Linux_RabbitMQ-Problems/</url>
    <content><![CDATA[<p>需要自己写一个RabbitMQ的SysV脚本，所以找了一个模板，如果需要的时候可以改改就用了。</p>
<h2 id="SysV脚本"><a href="#SysV脚本" class="headerlink" title="SysV脚本"></a>SysV脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token comment">#</span>
<span class="token comment"># rabbitmq-server RabbitMQ broker</span>
<span class="token comment">#</span>
<span class="token comment"># chkconfig: - 80 05</span>
<span class="token comment"># description: Enable AMQP service provided by RabbitMQ</span>
<span class="token comment">#</span>
<span class="token comment">### BEGIN INIT INFO</span>
<span class="token comment"># Provides:          rabbitmq-server</span>
<span class="token comment"># Required-Start:    $remote_fs $network</span>
<span class="token comment"># Required-Stop:     $remote_fs $network</span>
<span class="token comment"># Description:       RabbitMQ broker</span>
<span class="token comment"># Short-Description: Enable AMQP service provided by RabbitMQ broker</span>
<span class="token comment">### END INIT INFO</span>
<span class="token comment"># Source function library.</span>
<span class="token builtin class-name">.</span> /etc/init.d/functions
<span class="token comment"># 一些加注释的位置是需要修改的参数</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/sbin:/usr/sbin:/bin:/usr/bin:/data/erlang/bin  <span class="token comment"># 更改PATH指向Erlang的路径</span>
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>rabbitmq-server <span class="token comment"># 服务的名称，可以和脚本名称一致</span>
<span class="token assign-left variable">DAEMON</span><span class="token operator">=</span>/data/rabbitmq_server-3.6.13/sbin/<span class="token variable">$&#123;NAME&#125;</span>	<span class="token comment"># 启动为守护进程的命令所在绝对路径</span>
<span class="token assign-left variable">CONTROL</span><span class="token operator">=</span>/data/rabbitmq_server-3.6.13/sbin/rabbitmqctl	<span class="token comment"># 制定rabbitmqctl程序的所在位置， 绝对路径</span>
<span class="token assign-left variable">DESC</span><span class="token operator">=</span>rabbitmq-server	<span class="token comment"># 目标服务</span>
<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>root	<span class="token comment"># 运行时的用户， 线上服务都使用了root用户</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/data/rabbitmq_server-3.6.13/	<span class="token comment"># 指定RabbitMQ的HOME目录，默认是在安装目录下；也有可能是在运行RabbitMQ用户的家目录下</span>
<span class="token assign-left variable">ROTATE_SUFFIX</span><span class="token operator">=</span>
<span class="token comment"># INIT_LOG_DIR=/usr/local/rabbitmq/var/rabbitmq</span>
<span class="token assign-left variable">INIT_LOG_DIR</span><span class="token operator">=</span>/data/rabbitmq_server-3.6.13/var/log/rabbitmq	<span class="token comment"># 指出log的目录</span>
<span class="token comment"># PID_FILE=/var/run/rabbitmq/pid	</span>
<span class="token assign-left variable">PDI_FILE</span><span class="token operator">=</span>/data/rabbitmq_server-3.6.13/var/lib/rabbitmq/mnesia/rabbit@ean-online-dubbo-zk-rmq-server-209.pid <span class="token comment"># 指出当前RabbitMQ的PID文件所在目录</span>
<span class="token assign-left variable">START_PROG</span><span class="token operator">=</span><span class="token string">"daemon"</span>
<span class="token assign-left variable">LOCK_FILE</span><span class="token operator">=</span>/var/lock/subsys/<span class="token variable">$NAME</span> 
<span class="token builtin class-name">test</span> <span class="token parameter variable">-x</span> <span class="token variable">$DAEMON</span> <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token builtin class-name">test</span> <span class="token parameter variable">-x</span> <span class="token variable">$CONTROL</span> <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/default/<span class="token variable">$&#123;NAME&#125;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> /etc/default/<span class="token variable">$&#123;NAME&#125;</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/sysconfig/<span class="token variable">$&#123;NAME&#125;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> /etc/sysconfig/<span class="token variable">$&#123;NAME&#125;</span>
<span class="token function-name function">ensure_pid_dir</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token assign-left variable">PID_DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">dirname</span> $<span class="token punctuation">&#123;</span>PID_FILE<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$&#123;PID_DIR&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;PID_DIR&#125;</span>
        <span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> <span class="token variable">$&#123;PID_DIR&#125;</span>
        <span class="token function">chmod</span> <span class="token number">755</span> <span class="token variable">$&#123;PID_DIR&#125;</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">remove_pid</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$&#123;PID_FILE&#125;</span>
    <span class="token function">rmdir</span> <span class="token variable"><span class="token variable">`</span><span class="token function">dirname</span> $<span class="token punctuation">&#123;</span>PID_FILE<span class="token punctuation">&#125;</span><span class="token variable">`</span></span> <span class="token operator">||</span> <span class="token builtin class-name">:</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">start_rabbitmq</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    status_rabbitmq quiet
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$RETVAL</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> RabbitMQ is currently running
    <span class="token keyword">else</span>
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">0</span>
        <span class="token comment"># RABBIT_NOFILES_LIMIT from /etc/sysconfig/rabbitmq-server is not handled</span>
        <span class="token comment"># automatically</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$RABBITMQ_NOFILES_LIMIT</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token variable">$RABBITMQ_NOFILES_LIMIT</span>
        <span class="token keyword">fi</span>
        ensure_pid_dir
        <span class="token builtin class-name">set</span> +e
        <span class="token assign-left variable">RABBITMQ_PID_FILE</span><span class="token operator">=</span><span class="token variable">$PID_FILE</span> <span class="token variable">$START_PROG</span> <span class="token variable">$DAEMON</span> <span class="token punctuation">\</span>
            <span class="token operator">></span> <span class="token string">"<span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/startup_log"</span> <span class="token punctuation">\</span>
            <span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">"<span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/startup_err"</span> <span class="token punctuation">\</span>
            <span class="token operator"><span class="token file-descriptor important">0</span>&lt;&amp;</span>- <span class="token operator">&amp;</span>
        <span class="token variable">$CONTROL</span> <span class="token function">wait</span> <span class="token variable">$PID_FILE</span> <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token variable">$?</span>
        <span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
        <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$RETVAL</span>"</span> <span class="token keyword">in</span>
            <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token builtin class-name">echo</span> SUCCESS
                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
                    <span class="token function">touch</span> <span class="token variable">$LOCK_FILE</span>
                <span class="token keyword">fi</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
            *<span class="token punctuation">)</span>
                remove_pid
                <span class="token builtin class-name">echo</span> FAILED - check <span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/startup_<span class="token punctuation">\</span><span class="token punctuation">&#123;</span>log, _err<span class="token punctuation">\</span><span class="token punctuation">&#125;</span>
                <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">1</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">stop_rabbitmq</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    status_rabbitmq quiet
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$RETVAL</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">set</span> +e
        <span class="token variable">$CONTROL</span> stop <span class="token variable">$&#123;PID_FILE&#125;</span> <span class="token operator">></span> <span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/shutdown_log <span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/shutdown_err
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token variable">$?</span>
        <span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$RETVAL</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
            remove_pid
            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$LOCK_FILE</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> FAILED - check <span class="token variable">$&#123;INIT_LOG_DIR&#125;</span>/shutdown_log, _err
        <span class="token keyword">fi</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> RabbitMQ is not running
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">status_rabbitmq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">set</span> +e
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">!=</span> <span class="token string">"quiet"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token variable">$CONTROL</span> status <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
    <span class="token keyword">else</span>
        <span class="token variable">$CONTROL</span> status <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
    <span class="token keyword">fi</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">3</span>
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">rotate_logs_rabbitmq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">set</span> +e
    <span class="token variable">$CONTROL</span> rotate_logs <span class="token variable">$&#123;ROTATE_SUFFIX&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">1</span>
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">restart_running_rabbitmq</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    status_rabbitmq quiet
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$RETVAL</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        restart_rabbitmq
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> RabbitMQ is not runnning
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">restart_rabbitmq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    stop_rabbitmq
    start_rabbitmq
<span class="token punctuation">&#125;</span>
<span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
    start<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Starting <span class="token variable">$DESC</span>: "</span>
        start_rabbitmq
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$NAME</span>."</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    stop<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Stopping <span class="token variable">$DESC</span>: "</span>
        stop_rabbitmq
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$NAME</span>."</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    status<span class="token punctuation">)</span>
        status_rabbitmq
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    rotate-logs<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Rotating log files for <span class="token variable">$DESC</span>: "</span>
        rotate_logs_rabbitmq
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    force-reload<span class="token operator">|</span>reload<span class="token operator">|</span>restart<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Restarting <span class="token variable">$DESC</span>: "</span>
        restart_rabbitmq
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$NAME</span>."</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    try-restart<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"Restarting <span class="token variable">$DESC</span>: "</span>
        restart_running_rabbitmq
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$NAME</span>."</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> &#123;start|stop|status|rotate-logs|restart|condrestart|try-restart|reload|force-reload&#125;"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>
        <span class="token assign-left variable">RETVAL</span><span class="token operator">=</span><span class="token number">1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
<span class="token builtin class-name">exit</span> <span class="token variable">$RETVAL</span></code></pre>

<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><p>在Work目录下运行这个脚本的时候可以正常使用，但是在&#x2F;etc&#x2F;init.d&#x2F;目录下不正常？ 报错如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> rabbitmq-server status  
Status of <span class="token function">node</span> rabbit@<span class="token environment constant">HOSTNAME</span> <span class="token punctuation">..</span>.  
Error: unable to perform an operation on <span class="token function">node</span> <span class="token string">'rabbit@HOSTNAME'</span><span class="token builtin class-name">.</span> Please see diagnostics information and suggestions below.  
  
Most common reasons <span class="token keyword">for</span> this are:  
  
 * Target <span class="token function">node</span> is unreachable <span class="token punctuation">(</span>e.g. due to <span class="token function">hostname</span> resolution, TCP connection or firewall issues<span class="token punctuation">)</span>  
 * CLI tool fails to authenticate with the server <span class="token punctuation">(</span>e.g. due to CLI tool<span class="token string">'s Erlang cookie not matching that of the server)  
 * Target node is not running  
  
In addition to the diagnostics info below:  
  
 * See the CLI, clustering and networking guides on http://rabbitmq.com/documentation.html to learn more  
 * Consult server logs on node rabbit@HOSTNAME 
  
DIAGNOSTICS  
===========  
  
attempted to contact: ['</span>rabbit@<span class="token environment constant">HOSTNAME</span><span class="token string">']  
  
rabbit@HOSTNAME:  
  * connected to epmd (port 4369) on HOSTNAME  
  * epmd reports node '</span>rabbit<span class="token string">' uses port 25672 for inter-node and CLI tool traffic  
  * TCP connection succeeded but Erlang distribution failed  
  
  * Authentication failed (rejected by the remote node), please check the Erlang cookie 
  
  
Current node details:  
 * node name: '</span>rabbitmq@<span class="token environment constant">HOSTNAME</span><span class="token string">'  
 * effective user'</span>s home directory: /data/rabbitmq-<span class="token variable">$version</span>  
 * Erlang cookie hash: fhaluhadgahlfhlashdfag </code></pre>

<p>因为RabbitMQ的认证是通过文件 ： <code>.erlang.cookie</code>这个文件，但是这个文件不是在系统的一个位置有，如果使用find命令查找的话会发现两个目录都有这个文件，我的查找结果一个是在root的家目录下，还有一个是在安装目录，也就是程序的$HOME下。<br>需要自行判断程序使用的是那个目录下在Erlangcookie文件进行的认证及通信，在SysV脚本中，export $HOME到正确的文件目录下，就可以正常使用service命令了。  </p>
<h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h3><p>使用service rabbitmq-server status 的时候， 提示$HOME 需要被设置，就在SysV脚本里面直接export就可以了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Application, RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_Ranger_Usage</title>
    <url>/2021/08/26/Linux/Linux_RangerUsage/</url>
    <content><![CDATA[<p>ranger 备忘</p>
<pre><code class="bash">g/ Go root 
gh Go home
gg Go to top 
G  Go bottom



# 文件操作 复制、剪切、删除、粘贴 （针对当前文件或则选择的内容）
yy 复制
dd 剪切
pp 粘贴
F5 复制
F5 剪贴
F8 删除
Delete 删除

# 书签
mX 把当前目录做一个书签 (X 表示任何字符)
&#39;X 跳到X书签代表的目录

# 标签 不同标签可以复制、粘贴、移动
gn 新建一个标签
Alt+N 跳转到N号标签 (代表一个数字)
gt,gT 跳转到前个标签，后个标签

# 排序 对文件和目录列表进行排序，以便查看。
ot 根据后缀名进行排序 (Type)
oa 根据访问时间进行排序 (Access Time 访问文件自身数据的时间)
oc 根据改变时间进行排序 (Change Time 文件的权限组别和文件自身数据被修改的时间)
om 根据修改进行排序 (Modify time 文件自身内容被修改的时间)
ob 根据文件名进行排序 (basename)
on 这个好像和basename差不多(natural)
os 根据文件大小进行排序(Size)

# 重命名 修改文件名有两种模式：当前文件和批量改名
cw 新文件名 -- 修改当前文件名
A -- 在当前文件名后追加文字
I -- 在当前文件名前追加文字
:bulkrename --针对mark过的文件批量改名

# 执行shell命令
! -- 进入命令模式执行shell命令
s -- 同上
# -- 同！，但结果输出到一个pager。相当于 cmd | less
@ -- 同！，但会把选择的文件作为参数放在最后。
S -- 进入一个新的shell。exit后回到当前的ranger
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Ranger</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Redhat 9 oom不触发</title>
    <url>/2023/07/12/Linux/Linux_Redhat-9-MySQL%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>Amazon AMI ID: ami-0e54fe8afeb8fa59a</p>
<p>Operating System: Red Hat Enterprise Linux 9.2 (Plow)</p>
<p>Kernel: Linux 5.14.0-284.11.1.el9_2.x86_64</p>
<p>MySQL Version:  Ver 8.0.33 for Linux on x86_64 (MySQL Community Server - GPL)</p>
<h2 id="测试步骤："><a href="#测试步骤：" class="headerlink" title="测试步骤："></a>测试步骤：</h2><ol>
<li><p>使用上面的AMI启动一个新的实例， 在实例启动之后ssh连接进去。</p>
</li>
<li><p>按照MySQL官方的 repo 安装一个社区的版本。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># https://dev.mysql.com/downloads/repo/yum/ </span>
<span class="token comment"># (mysql80-community-release-el9-1.noarch.rpm)</span>

<span class="token function">wget</span> https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm

dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> ./mysql80-community-release-el9-1.noarch.rpm

dnf makecache <span class="token parameter variable">-y</span> 

dnf update <span class="token parameter variable">-y</span>

<span class="token comment"># Refer this doc to install mysql-community packages.</span>
<span class="token comment"># https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html</span>
dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> mysql-community-server

<span class="token comment"># Check the installation success.</span>
systemctl status mysqld</code></pre>
</li>
<li><p>编辑MySQL配置文件， 添加如下的参数:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/my.cnf
<span class="token comment">#设置buffer pool 的参数大于物理内存。 例如 os 本身由可用的内存是 16G， 那么设置一个更大的值即可。</span>
innodb_buffer_pool_size <span class="token operator">=</span> 40G

<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> mysqld

<span class="token function">sudo</span> systemctl status mysqld

<span class="token comment"># 获取root用户的临时初始化密码： </span>
<span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log

<span class="token comment"># 使用root用户登录， 并查看配置已经生效。</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>

MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show variables like <span class="token string">"%buffer_pool_size%"</span><span class="token punctuation">;</span>
+-------------------------+-------------+
<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> Value       <span class="token operator">|</span>
+-------------------------+-------------+
<span class="token operator">|</span> innodb_buffer_pool_size <span class="token operator">|</span> <span class="token number">42949672960</span> <span class="token operator">|</span>
+-------------------------+-------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.005</span> sec<span class="token punctuation">)</span></code></pre>
</li>
<li><p>创建database 以及 table：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">create database test;

CREATE TABLE tt1(
id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
person_id tinyint not null ,
person_name1 VARCHAR(3000) ,
person_name2 VARCHAR(3000) ,
person_name3 VARCHAR(3000) ,
person_name4 VARCHAR(3000) ,
person_name5 VARCHAR(3000) ,
gmt_create datetime ,
gmt_modified datetime
) ;	

insert into tt1 (person_id, person_name1, person_name2, person_name3, person_name4, person_name5, gmt_create, gmt_modified)
values (1, lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), lpad(&#39;&#39;,3000,&#39;*&#39;), now(), now());

# 反复执行这个命令， 复制全表的数据， 大概执行 10 次左右。
insert into tt1 (person_id, person_name1, person_name2, person_name3, person_name4, person_name5, gmt_create, gmt_modified)
select person_id, person_name1, person_name2, person_name3, person_name4, person_name5, now(), now() from tt1;


# 查看当前table的信息 ，确认一下数据量。 
show table status like &#39;tt1&#39;\G</code></pre>
</li>
<li><p>在另一个机器上面 select 这个表格。</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from tt1;</code></pre>
</li>
<li><p>如果数据量足够大的话， 那么就会占用超过物理内存的空间，导致OOM。</p>
</li>
</ol>
<hr>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>其他版本的os上面都会触发oom， 然后MySQL会被干掉重启， 只有Redhat 9 这个版本的os是不会触发的。</p>
<p>测试了Ubuntu 22， amazonlinux2， amazonlinux2023 都没由这个问题， 他们的内核都是 5.10+ 。</p>
<p>Redhat 9 这个版本的表现是， 在接近物理内存容量极限的时候， os 开始非常频繁的扫描并尝试回收内存的空间， 导致命令的响应变慢，我开了sar的监控命令，返回数据的速度也会便的比较慢， 大部分的进程会慢慢变成 Uninterreptable状态， 并且数量越来越多， 最终会导致实例的网络子系统不工作， 完全不响应任何的网络报文，实例的健康检查失败。CPU使用率依旧还在， EBS的监控显示这个卷满速度读取输出， 并且非常平稳, 响应时间以及队列的长度也没有异常。</p>
<p>如果这个时候尝试取手动触发oom， 是可以成功的， 在杀掉Mysqld之后， os就恢复了正常。</p>
<h2 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h2><p>可以确定的是 磁盘的工作是正常的， CPU使用率慢慢增长但是也是正常的。 这部分的工作没有问题。 </p>
<p>在发生问题的时候因为网络无法正常的工作，ssh已经断开， 无法确定当时的情况。 </p>
<p>初步判断是内存的问题， 但是具体的差异是哪里。</p>
<h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p>sar命令中的记录</p>
<h3 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h3><p>尝试对比与行为正常的os的差异， 获取sysctl -a 并记录到文件中。 </p>
<p>对比完关于内存部分的参数， 完全没有任何的差别， 不是设置或者配置文件导致的这个问题。</p>
<p>min 水位的设置是默认的， 与其他的发行版本一直， 测试的时候用的相同的规格， 所以不存在这类的差异。</p>
<h3 id="第三"><a href="#第三" class="headerlink" title="第三"></a>第三</h3><p>触发一个kdump 看看网络不相应的时候 os 当时的状态，  这个不太会。</p>
<h3 id="第四"><a href="#第四" class="headerlink" title="第四"></a>第四</h3><p>查看内核的编译选项， 看看有什么不同。</p>
<h3 id="第五"><a href="#第五" class="headerlink" title="第五"></a>第五</h3><p>学习os 内存的部分， 看看具体这个版本的内核如何进行内存的回收的， 或者触发oom的条件有哪些。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Memory, Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本处理目录或者文件名中的空格</title>
    <url>/2022/04/15/Linux/Linux_Shell-Script-Process-Space/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>问题是： 罗列指定的目录下面的文件， 符合要求的文件保留， 未匹配的删除。</p>
<h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>简单的Bash脚本， 使用ls拿文件名， 使用For + IF判断即可。<br>但是文件的目录中有的文件名是带有空格的， 而Shell 使用空格做分隔符，因此无法正确的处理完整的文件名。<br>解决方案有特别多， 只记录一个我最后使用的方案：<br>使用IFS变量来定义Shell 的默认分隔符， 将空格替换成\n\b. </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#</span>
<span class="token assign-left variable">SAVEIFS</span><span class="token operator">=</span><span class="token environment constant">$IFS</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\b">\b</span>"</span><span class="token variable">)</span></span>

<span class="token keyword">for</span> <span class="token for-or-select variable">number</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">&#125;</span>
<span class="token keyword">do</span>
  <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> <span class="token string">"dir <span class="token variable">$number</span>"</span>
<span class="token keyword">done</span>

tree

<span class="token assign-left variable">FILE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span>

<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$FILE</span><span class="token punctuation">;</span>
<span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">"The DirName: <span class="token variable">$i</span>"</span>
<span class="token keyword">done</span>

<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable">$SAVEIFS</span></code></pre>

<hr>
<p>这样就可以拿到名称为dir 1的完整目录名字了，否则会默认吧空格分割的文件名称作为两个目录提取。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">⚡ ./delete.sh
<span class="token builtin class-name">.</span>
├── delete.sh
├── <span class="token function">dir</span> <span class="token number">1</span>
├── <span class="token function">dir</span> <span class="token number">10</span>
├── <span class="token function">dir</span> <span class="token number">2</span>
├── <span class="token function">dir</span> <span class="token number">3</span>
├── <span class="token function">dir</span> <span class="token number">4</span>
├── <span class="token function">dir</span> <span class="token number">5</span>
├── <span class="token function">dir</span> <span class="token number">6</span>
├── <span class="token function">dir</span> <span class="token number">7</span>
├── <span class="token function">dir</span> <span class="token number">8</span>
└── <span class="token function">dir</span> <span class="token number">9</span>

<span class="token number">10</span> directories, <span class="token number">1</span> <span class="token function">file</span>
The DirName: delete.sh
The DirName: <span class="token function">dir</span> <span class="token number">1</span>
The DirName: <span class="token function">dir</span> <span class="token number">10</span>
The DirName: <span class="token function">dir</span> <span class="token number">2</span>
The DirName: <span class="token function">dir</span> <span class="token number">3</span>
The DirName: <span class="token function">dir</span> <span class="token number">4</span>
The DirName: <span class="token function">dir</span> <span class="token number">5</span>
The DirName: <span class="token function">dir</span> <span class="token number">6</span>
The DirName: <span class="token function">dir</span> <span class="token number">7</span>
The DirName: <span class="token function">dir</span> <span class="token number">8</span>
The DirName: <span class="token function">dir</span> <span class="token number">9</span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Sysctl 云平台参数的收集以及一部分解释</title>
    <url>/2022/04/19/Linux/Linux_Sysctl/</url>
    <content><![CDATA[<p>一些关于sysctl参数设置的收集和解释。</p>
<h1 id="x2F-etc-x2F-sysctl-d-x2F-00-defaults-conf"><a href="#x2F-etc-x2F-sysctl-d-x2F-00-defaults-conf" class="headerlink" title="&#x2F;etc&#x2F;sysctl.d&#x2F;00-defaults.conf"></a>&#x2F;etc&#x2F;sysctl.d&#x2F;00-defaults.conf</h1><h2 id="kernel-printk"><a href="#kernel-printk" class="headerlink" title="kernel.printk"></a>kernel.printk</h2><p>输出内核日志信息的级别。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 映射到的proc文件系统位置 - /proc/sys/kernel/printk</span>
<span class="token comment"># Maximize console logging level for kernel printk messages</span>
kernel.printk <span class="token operator">=</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">7</span>

<span class="token comment"># (1) 控制台日志级别：优先级高于该值的消息将被打印至控制台。</span>
<span class="token comment"># (2) 缺省的消息日志级别：将用该值来打印没有优先级的消息。</span>
<span class="token comment"># (3) 最低的控制台日志级别：控制台日志级别可能被设置的最小值。</span>
<span class="token comment"># (4) 缺省的控制台：控制台日志级别的缺省值。</span></code></pre>
<p>内核中共提供了八种不同的日志级别，在 linux&#x2F;kernel.h 中有相应的宏对应。</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#define KERN_EMERG  &quot;&lt;0&gt;&quot;   &#x2F;* systemis unusable *&#x2F;
#define KERN_ALERT  &quot;&lt;1&gt;&quot;   &#x2F;* actionmust be taken immediately *&#x2F;
#define KERN_CRIT    &quot;&lt;2&gt;&quot;   &#x2F;*critical conditions *&#x2F;
#define KERN_ERR     &quot;&lt;3&gt;&quot;   &#x2F;* errorconditions *&#x2F;
#define KERN_WARNING &quot;&lt;4&gt;&quot;   &#x2F;* warning conditions *&#x2F;
#define KERN_NOTICE  &quot;&lt;5&gt;&quot;   &#x2F;* normalbut significant *&#x2F;
#define KERN_INFO    &quot;&lt;6&gt;&quot;   &#x2F;*informational *&#x2F;
#define KERN_DEBUG   &quot;&lt;7&gt;&quot;   &#x2F;*debug-level messages *&#x2F;</code></pre>
<h2 id="kernel-panic"><a href="#kernel-panic" class="headerlink" title="kernel.panic"></a>kernel.panic</h2><p>设置内核的Panic之后自动重启</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Wait 30 seconds and then reboot</span>
kernel.panic <span class="token operator">=</span> <span class="token number">30</span></code></pre>
<h2 id="neigh-default-gc"><a href="#neigh-default-gc" class="headerlink" title="neigh.default.gc"></a>neigh.default.gc</h2><p>设置arp缓存相关的参数<br><a href="https://zhuanlan.zhihu.com/p/94413312">https://zhuanlan.zhihu.com/p/94413312</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Allow neighbor cache entries to expire even when the cache is not full</span>
net.ipv4.neigh.default.gc_thresh1 <span class="token operator">=</span> <span class="token number">0</span>
net.ipv6.neigh.default.gc_thresh1 <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment"># Avoid neighbor table contention in large subnets</span>
net.ipv4.neigh.default.gc_thresh2 <span class="token operator">=</span> <span class="token number">15360</span>
net.ipv6.neigh.default.gc_thresh2 <span class="token operator">=</span> <span class="token number">15360</span>
net.ipv4.neigh.default.gc_thresh3 <span class="token operator">=</span> <span class="token number">16384</span>
net.ipv6.neigh.default.gc_thresh3 <span class="token operator">=</span> <span class="token number">16384</span>

<span class="token comment"># gc_thresh1</span>
存在于ARP高速缓存中的最少层数，如果少于这个数，
垃圾收集器将不会运行。
缺省值是128。
<span class="token comment"># gc_thresh2</span>
保存在 ARP 高速缓存中的最多的记录软限制。
垃圾收集器在开始收集前，允许记录数超过这个数字 <span class="token number">5</span> 秒。
缺省值是 <span class="token number">512</span>。
<span class="token comment"># gc_thresh3</span>
保存在 ARP 高速缓存中的最多记录的硬限制，
一旦高速缓存中的数目高于此，
垃圾收集器将马上运行。
缺省值是1024。</code></pre>

<h1 id="x2F-etc-x2F-sysctl-d-x2F-99-amazon-conf"><a href="#x2F-etc-x2F-sysctl-d-x2F-99-amazon-conf" class="headerlink" title="&#x2F;etc&#x2F;sysctl.d&#x2F;99-amazon.conf"></a>&#x2F;etc&#x2F;sysctl.d&#x2F;99-amazon.conf</h1><h2 id="sched-autogroup-enabled"><a href="#sched-autogroup-enabled" class="headerlink" title="sched_autogroup_enabled"></a>sched_autogroup_enabled</h2><p>通过CFS分组提高了桌面环境的性能表现。这个小小的补丁仅为 Linux Kernel 增加了 233 行代码，却将高负荷下桌面响应最大延迟降低到原先的十分之一，平均延迟降低到六十分之一！该补丁的作用是为每个 TTY 动态地创建任务分组。(<a href="https://linuxtoy.org/archives/small-patch-but-huge-improvement.html">https://linuxtoy.org/archives/small-patch-but-huge-improvement.html</a>)</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># https://cateee.net/lkddb/web-lkddb/SCHED_AUTOGROUP.html</span>
<span class="token comment"># https://www.postgresql.org/message-id/50E4AAB1.9040902@optionshouse.com</span>
<span class="token comment"># This setting enables better interactivity for desktop workloads and not</span>
<span class="token comment"># suitable for many server workloads.</span>
<span class="token comment"># 启用后，内核会创建任务组来优化桌面程序的调度。它将把占用大量资源的应用程序放在它们自己的任务组，根据PostgreSQL的测试， 关闭这个选项会将数据库的性能提高30%（上面的Link）。 在后台的服务进程中是提高性能的选项。</span>
<span class="token comment"># 0：禁止</span>
<span class="token comment"># 1：开启</span>

<span class="token assign-left variable">kernel.sched_autogroup_enabled</span><span class="token operator">=</span><span class="token number">0</span></code></pre>

<h1 id="x2F-usr-x2F-lib-x2F-sysctl-d-x2F-00-system-conf"><a href="#x2F-usr-x2F-lib-x2F-sysctl-d-x2F-00-system-conf" class="headerlink" title="&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;00-system.conf"></a>&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;00-system.conf</h1><h2 id="Bridge-nf-call-iptables"><a href="#Bridge-nf-call-iptables" class="headerlink" title="Bridge-nf-call-iptables"></a>Bridge-nf-call-iptables</h2><p>网桥设备关闭netfilter模块，开关需要按需求来指定。<br>关闭这个模块会在网桥2层可以转发的时候直接转发， 不会走三层进行数据传输，也就是说不会过Iptables。<br>Kubernetes需要开启这个参数的原因是： <a href="https://imroc.cc/post/202105/why-enable-bridge-nf-call-iptables/%EF%BC%8C">https://imroc.cc/post/202105/why-enable-bridge-nf-call-iptables/，</a> 修复了Coredns不定期解析失败的问题。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Disable netfilter on bridges.</span>
net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">0</span>
net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">0</span>
net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">0</span></code></pre>

<h1 id="x2F-usr-x2F-lib-x2F-sysctl-d-x2F-10-default-yama-scope-conf"><a href="#x2F-usr-x2F-lib-x2F-sysctl-d-x2F-10-default-yama-scope-conf" class="headerlink" title="&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;10-default-yama-scope.conf"></a>&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;10-default-yama-scope.conf</h1><h2 id="Yama"><a href="#Yama" class="headerlink" title="Yama"></a>Yama</h2><p>Yama is a Linux Security Module that collects system-wide DAC security protections that are not handled by the core kernel itself. This is selectable at build-time with CONFIG_SECURITY_YAMA, and can be controlled at run-time through sysctls in &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama  </p>
<p><a href="https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html">https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html</a> </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-11-235 sysctl.d<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token number">10</span>-default-yama-scope.conf
<span class="token comment"># When yama is enabled in the kernel it might be used to filter any user</span>
<span class="token comment"># space access which requires PTRACE_MODE_ATTACH like ptrace attach, access</span>
<span class="token comment"># to /proc/PID/&#123;mem,personality,stack,syscall&#125;, and the syscalls</span>
<span class="token comment"># process_vm_readv and process_vm_writev which are used for interprocess</span>
<span class="token comment"># services, communication and introspection (like synchronisation, signaling,</span>
<span class="token comment"># debugging, tracing and profiling) of processes.</span>
<span class="token comment">#</span>
<span class="token comment"># Usage of ptrace attach is restricted by normal user permissions. Normal</span>
<span class="token comment"># unprivileged processes cannot interact through ptrace with processes</span>
<span class="token comment"># that they cannot send signals to or processes that are running set-uid</span>
<span class="token comment"># or set-gid.</span>
<span class="token comment">#</span>
<span class="token comment"># yama ptrace scope can be used to reduce these permissions even more.</span>
<span class="token comment"># This should normally not be done because it will break various programs</span>
<span class="token comment"># relying on the default ptrace security restrictions. But can be used</span>
<span class="token comment"># if you don't have any other way to separate processes in their own</span>
<span class="token comment"># domains. A different way to restrict ptrace is to set the selinux</span>
<span class="token comment"># deny_ptrace boolean. Both mechanisms will break some programs relying</span>
<span class="token comment"># on the ptrace system call and might force users to elevate their</span>
<span class="token comment"># priviliges to root to do their work.</span>
<span class="token comment">#</span>
<span class="token comment"># For more information see Documentation/security/Yama.txt in the kernel</span>
<span class="token comment"># sources. Which also describes the defaults when CONFIG_SECURITY_YAMA</span>
<span class="token comment"># is enabled in a kernel build (currently 1 for ptrace_scope).</span>
<span class="token comment">#</span>
<span class="token comment"># This runtime kernel parameter can be set to the following options:</span>
<span class="token comment"># (Note that setting this to anything except zero will break programs!)</span>
<span class="token comment">#</span>
<span class="token comment"># 0 - Default attach security permissions.</span>
<span class="token comment"># 1 - Restricted attach. Only child processes plus normal permissions.</span>
<span class="token comment"># 2 - Admin-only attach. Only executables with CAP_SYS_PTRACE.</span>
<span class="token comment"># 3 - No attach. No process may call ptrace at all. Irrevocable.</span>
<span class="token comment">#</span>
kernel.yama.ptrace_scope <span class="token operator">=</span> <span class="token number">0</span></code></pre>

<h1 id="x2F-usr-x2F-lib-x2F-sysctl-d-x2F-50-default-conf"><a href="#x2F-usr-x2F-lib-x2F-sysctl-d-x2F-50-default-conf" class="headerlink" title="&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;50-default.conf"></a>&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;50-default.conf</h1><h2 id="Sysrq"><a href="#Sysrq" class="headerlink" title="Sysrq"></a>Sysrq</h2><p>是一个Magic Key的设置，无论内核当前在做什么都会立刻响应这个MagicKey。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">
<span class="token comment">#  This file is part of systemd.</span>
<span class="token comment">#</span>
<span class="token comment">#  systemd is free software; you can redistribute it and/or modify it</span>
<span class="token comment">#  under the terms of the GNU Lesser General Public License as published by</span>
<span class="token comment">#  the Free Software Foundation; either version 2.1 of the License, or</span>
<span class="token comment">#  (at your option) any later version.</span>

<span class="token comment"># See sysctl.d(5) and core(5) for for documentation.</span>

<span class="token comment"># To override settings in this file, create a local file in /etc</span>
<span class="token comment"># (e.g. /etc/sysctl.d/90-override.conf), and put any assignments</span>
<span class="token comment"># there.</span>

<span class="token comment"># System Request functionality of the kernel (SYNC)</span>
<span class="token comment">#</span>
<span class="token comment"># Use kernel.sysrq = 1 to allow all keys.</span>
<span class="token comment"># See http://fedoraproject.org/wiki/QA/Sysrq for a list of values and keys.</span>
kernel.sysrq <span class="token operator">=</span> <span class="token number">16</span>

When running a kernel with SysRq compiled in, /proc/sys/kernel/sysrq controls the functions allowed to be invoked via the SysRq key. Here is the list of possible values <span class="token keyword">in</span> /proc/sys/kernel/sysrq:

    <span class="token number">0</span> - disable sysrq completely
    <span class="token number">1</span> - <span class="token builtin class-name">enable</span> all functions of sysrq
    <span class="token operator">></span><span class="token number">1</span> - bitmask of allowed sysrq functions <span class="token punctuation">(</span>see below <span class="token keyword">for</span> detailed <span class="token keyword">function</span> description<span class="token punctuation">)</span>:
        <span class="token number">2</span> - <span class="token builtin class-name">enable</span> control of console logging level
        <span class="token number">4</span> - <span class="token builtin class-name">enable</span> control of keyboard <span class="token punctuation">(</span>SAK, unraw<span class="token punctuation">)</span>
        <span class="token number">8</span> - <span class="token builtin class-name">enable</span> debugging dumps of processes etc.
        <span class="token number">16</span> - <span class="token builtin class-name">enable</span> <span class="token function">sync</span> <span class="token builtin class-name">command</span>
        <span class="token number">32</span> - <span class="token builtin class-name">enable</span> remount read-only
        <span class="token number">64</span> - <span class="token builtin class-name">enable</span> signalling of processes <span class="token punctuation">(</span>term, kill, oom-kill<span class="token punctuation">)</span>
        <span class="token number">128</span> - allow reboot/poweroff
        <span class="token number">256</span> - allow nicing of all RT tasks
<span class="token comment"># 触发的方式</span>
- <span class="token builtin class-name">echo</span> t <span class="token operator">></span> /proc/sysrq-trigger
- You press the key combo Alt+SysRq+<span class="token operator">&lt;</span>command key<span class="token operator">></span>.</code></pre>

<h2 id="core-uses-pid"><a href="#core-uses-pid" class="headerlink" title="core_uses_pid"></a>core_uses_pid</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Append the PID to the core filename</span>
<span class="token comment"># DEBUG相关的功能，如果这个文件的内容被配置成1，即使core_pattern中没有设置%p，最后生成的core dump文件名仍会加上进程ID。 </span>
kernel.core_uses_pid <span class="token operator">=</span> <span class="token number">1</span></code></pre>

<h2 id="kptr-restrict"><a href="#kptr-restrict" class="headerlink" title="kptr_restrict"></a>kptr_restrict</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看内核地址符号的命令： cat /proc/kallsyms</span>
<span class="token comment"># https://bugzilla.redhat.com/show_bug.cgi?id=1689344</span>
kernel.kptr_restrict <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 0 所有用户都可以查看内核的地址空间输出信息</span>
<span class="token comment"># 1 只有root用户可以，其他用户看到的都是0</span>
<span class="token comment"># 2 所有的用户都不可以，输出的结果都是0</span>

<span class="token comment"># Other Link: https://blog.csdn.net/qq1602382784/article/details/80066847</span></code></pre>

<h2 id="rp-filter"><a href="#rp-filter" class="headerlink" title="rp_filter"></a>rp_filter</h2><p>rp_filter参数用于控制系统是否开启对数据包源地址的校验。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Source route verification</span>
net.ipv4.conf.default.rp_filter <span class="token operator">=</span> <span class="token number">1</span>
net.ipv4.conf.all.rp_filter <span class="token operator">=</span> <span class="token number">1</span>
两个参数之中有一个是1， 那么这个功能就是启用的
- <span class="token number">0</span>：不开启源地址校验。
- <span class="token number">1</span>：开启严格的反向路径校验。对每个进来的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包。
- <span class="token number">2</span>：开启松散的反向路径校验。对每个进来的数据包，校验其源地址是否可达，即反向路径是否能通（通过任意网口），如果反向路径不同，则直接丢弃该数据包。</code></pre>

<h2 id="accept-source-route"><a href="#accept-source-route" class="headerlink" title="accept_source_route"></a>accept_source_route</h2><p>指允许数据包的发送者指定数据包的发送路径，以及返回给发送者的数据包所走的路径。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Do not accept source routing</span>
net.ipv4.conf.default.accept_source_route <span class="token operator">=</span> <span class="token number">0</span>
net.ipv4.conf.all.accept_source_route <span class="token operator">=</span> <span class="token number">0</span></code></pre>

<h2 id="promote-secondaries"><a href="#promote-secondaries" class="headerlink" title="promote_secondaries"></a>promote_secondaries</h2><p>down掉所属某个子网的primary ip的时候， 所有相关的secondary ip也会down掉,启用的时候，当primary ip宕掉时可以将secondary ip提升为primary ip。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Promote secondary addresses when the primary address is removed</span>
net.ipv4.conf.default.promote_secondaries <span class="token operator">=</span> <span class="token number">1</span>
net.ipv4.conf.all.promote_secondaries <span class="token operator">=</span> <span class="token number">1</span></code></pre>

<h2 id="protected-links"><a href="#protected-links" class="headerlink" title="protected_links"></a>protected_links</h2><p>fs.protected_hardlinks 	用于限制普通用户建立硬链接  </p>
<ul>
<li>0：不限制用户建立硬链接  </li>
<li>1：限制，如果文件不属于用户，或者用户对此用户没有读写权限，则不能建立硬链接</li>
</ul>
<p>fs.protected_symlinks 	用于限制普通用户建立软链接  </p>
<ul>
<li>0：不限制用户建立软链接  </li>
<li>1：限制，允许用户建立软连接的情况是 软连接所在目录是全局可读写目录或者软连接的uid与跟从者的uid匹配，又或者目录所有者与软连接所有者匹配  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Enable hard and soft link protection</span>
fs.protected_hardlinks <span class="token operator">=</span> <span class="token number">1</span>
fs.protected_symlinks <span class="token operator">=</span> <span class="token number">1</span></code></pre></li>
</ul>
<h1 id="x2F-usr-x2F-lib-x2F-sysctl-d-x2F-9-ipv6-conf"><a href="#x2F-usr-x2F-lib-x2F-sysctl-d-x2F-9-ipv6-conf" class="headerlink" title="&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;9-ipv6.conf"></a>&#x2F;usr&#x2F;lib&#x2F;sysctl.d&#x2F;9-ipv6.conf</h1><p>关于IPv6地址重复的问题。<br>In case DAD does find a duplicate address, the address we tried to set is deleted (and in the syslog you see a message like this: “eth0: duplicate address detected!”). In such a case, a sysadmin needs to configure an address manually.</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">net.ipv6.conf.all.accept_dad</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">net.ipv6.conf.default.accept_dad</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">net.ipv6.conf.eth0.accept_dad</span><span class="token operator">=</span><span class="token number">0</span></code></pre>
<h2 id="Case-Update"><a href="#Case-Update" class="headerlink" title="Case Update"></a>Case Update</h2><ol>
<li><p>[[Linux_内核参数笔记#net.ipv4.tcp_tw_recycle|tcp_tw_recycle（Before 4.12 available)]]<br>net.ipv4.tcp_timestamps 这个参数开启的时候， 才会生效，可以快速回收处于TIME_WAIT状态的socket。当tcp_tw_recycle开启时（tcp_timestamps同时开启，快速回收socket的效果达到），对于位于NAT设备后面的Client来说，是一场灾难。<br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4396e46187ca5070219b81773c4e65088dac50cc">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4396e46187ca5070219b81773c4e65088dac50cc</a><br>这个参数在2017年之后的内核已经不存在了， 开发者的Blog <a href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux">https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux</a><br>内核彻底移除这个参数的版本是 4.12 ， 如果内核的版本是4.12 之后，这个问题就不存在了。<br>对于NAT后端的多个实例之间，如果有时间的差距会导致另一个实例收到的报文的Timestamp是之前一个时间点的，这个时候会认为这个请求是来自之前的某个请求的返回。 然而其<br>实是因为时间的原因， 并且这个请求是一个新的请求，由于时间的原因被识别成了旧的请求。<br>这个配置对 Incomming 和 Outgoing的tcp连接都会生效。由于网络的设计是默认不相信可靠的， 所以在TCP的最后进行等待，这样会导致大量的TIME_WAIT， 而这些TIME_WAIT其实是已经不用的， 但是由于无法获得ACK因此无法释放。</p>
</li>
<li><p>[[Linux_内核参数笔记#net.ipv4.tcp_tw_reuse|tcp_tw_reuse]]<br> <a href="http://lxr.linux.no/#linux+v3.2.8/Documentation/networking/ip-sysctl.txt#L464">http://lxr.linux.no/#linux+v3.2.8/Documentation/networking/ip-sysctl.txt#L464</a><br> 这个配置只是对客户端生效。也就是说， 客户端发起了FIN之后， 只要客户端收到服务端的FIN， 后续的网络报文已经不再继续关注了。 这样客户端的TIME_WAIT就会下降， 提高了客户端的Timewait的利用率，减少了客户端TW连接的数量。可以提高客户端的并发请求数量。<br> 这个配置参数只对 Outgoing 的参数生效。<br> NOTE： 现在这个选项支持3个参数，0 关闭， 1 开启 ，2 只对回环开启。</p>
</li>
</ol>
<h3 id="Other-Memory-and-OOM-Controll"><a href="#Other-Memory-and-OOM-Controll" class="headerlink" title="Other Memory and OOM Controll"></a>Other Memory and OOM Controll</h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>通过systemd管理软件和服务</title>
    <url>/2019/09/17/Linux/Linux_Systemctl-ManageService/</url>
    <content><![CDATA[<p>通过systemctl 来管理系统的服务和软件，但是如果是自己安装的软件就没有办法使用了。其实是可以自己定义systemd的管理脚本的，类似与之前的SysV风格的管理脚本。</p>
<h2 id="Systemd是什么"><a href="#Systemd是什么" class="headerlink" title="Systemd是什么"></a>Systemd是什么</h2><blockquote>
<p>systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system. systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points, and implements an elaborate transactional dependency-based service control logic. systemd supports SysV and LSB init scripts and works as a replacement for sysvinit. Other parts include a logging daemon, utilities to control basic system configuration like the hostname, date, locale, maintain a list of logged-in users and running containers and virtual machines, system accounts, runtime directories and settings, and daemons to manage simple network configuration, network time synchronization, log forwarding, and name resolution.</p>
</blockquote>
<p>管得还是挺多的，主要是启动PID为1的进程并启动其他的程序，并行执行，维护挂载点及自动挂载，服务之间的依赖关系，日志进程，</p>
<h2 id="Systemd的Units文件"><a href="#Systemd的Units文件" class="headerlink" title="Systemd的Units文件"></a>Systemd的Units文件</h2><p>Systemd默认的文件配置路径有：<br>    - &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*<br>    - &#x2F;run&#x2F;systemd&#x2F;system&#x2F;*<br>    - &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;*</p>
<h2 id="Systemd-Unit-File-的模板"><a href="#Systemd-Unit-File-的模板" class="headerlink" title="Systemd Unit File 的模板"></a>Systemd Unit File 的模板</h2><p>有这样的几个模块：</p>
<ol>
<li>[Unit]</li>
<li>[Service]</li>
<li>[Install]</li>
</ol>
<h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>Unit的作用是记录文件的通用信息。</p>
<ol>
<li>Descripition – 对软件或服务的描述。</li>
<li>Before OR After – 定义启动的顺序，在某些服务 启动之前 OR 启动之后 ，在启动这个服务。其中还定义了服务的依赖关系，先后顺序。常用的值有 <code>network.target, Multi-User.target, network.service</code> 等等。</li>
<li>Requires – 并行启动所指定的其他服务。</li>
<li>RequireOverrideable – 类似与require，但是不同的是手动启动的时候不会报错。</li>
<li>Requisite – 只要启动失败了就直接报错停止，强硬版本的requires。</li>
<li>Wants – 启动依赖单元的常用选项，在启动的同时调起其他的Unit，如果其他单元启动失败了也不会影响当前定义的Unit的启动。</li>
<li>Conflicts – 冲突单元，启动的时候发现了Conflict中定义的其他单元就会尝试终止Unit。</li>
</ol>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><ol>
<li>Type – 对服务类型的定义，通常有如下三种：<br>- simple 默认的类型，启动就启动，停止就结束了。<br>- forking 守护进程的类型，把必要的启动之后留下守护进程。<br>- oneshot 一次性的服务，启动后就结束了。</li>
<li>ExecStart – 启动的时候执行的命令， 这条命令就是服务的主体。</li>
<li>ExecStartPre OR ExecStartPost – ExecStart执行前后的动作。</li>
<li>ExecStop – 指定服务结束的动作，如果未指定直接kill。</li>
<li>Restart – 定义了重启的条件和动作，常用的参数有： <code>no, on-sucess, on-failure, on-watchdog, on-abort</code>。</li>
<li>SuccessExitStatus – ExecStart的返回值。 <code>SuccessExitStatus=1 2 8 SIGKILL</code></li>
</ol>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ol>
<li>WantedBy – 定义启动的情景，几种不同的target: <code>multi-user.target | poweroff.target | rescue.target | graphical.target | reboot.target</code></li>
<li>Alias – 别名的设置在这里定义。</li>
</ol>
<h2 id="标准配置文件-Libvirtd"><a href="#标准配置文件-Libvirtd" class="headerlink" title="标准配置文件 - Libvirtd"></a>标准配置文件 - Libvirtd</h2><pre class="language-none"><code class="language-none">[Unit]
Description&#x3D;Virtualization daemon
Requires&#x3D;virtlogd.socket
Requires&#x3D;virtlockd.socket
Wants&#x3D;systemd-machined.service
Before&#x3D;libvirt-guests.service
After&#x3D;network.target
After&#x3D;dbus.service
After&#x3D;iscsid.service
After&#x3D;apparmor.service
After&#x3D;local-fs.target
After&#x3D;remote-fs.target
After&#x3D;systemd-logind.service
After&#x3D;systemd-machined.service
Documentation&#x3D;man:libvirtd(8)
Documentation&#x3D;https:&#x2F;&#x2F;libvirt.org

[Service]
Type&#x3D;simple
EnvironmentFile&#x3D;-&#x2F;etc&#x2F;conf.d&#x2F;libvirtd
ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;libvirtd $LIBVIRTD_ARGS
ExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPID
KillMode&#x3D;process
Restart&#x3D;on-failure
# At least 1 FD per guest, often 2 (eg qemu monitor + qemu agent).
# eg if we want to support 4096 guests, we&#39;ll typically need 8192 FDs
# If changing this, also consider virtlogd.service &amp; virtlockd.service
# limits which are also related to number of guests
LimitNOFILE&#x3D;8192
# The cgroups pids controller can limit the number of tasks started by
# the daemon, which can limit the number of domains for some hypervisors.
# A conservative default of 8 tasks per guest results in a TasksMax of
# 32k to support 4096 guests.
TasksMax&#x3D;32768

[Install]
WantedBy&#x3D;multi-user.target
Also&#x3D;virtlockd.socket
Also&#x3D;virtlogd.socket</code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 内核编译初试</title>
    <url>/2021/07/01/Linux/Linux_Ubuntu-kernel-Complie/</url>
    <content><![CDATA[<p>Ubuntu 18.04 上编译内核，生成deb安装包的过程和遇到的问题。<br>使用工具： Linux-tkg<br>系统版本： Ubuntu18.04<br>内核版本： 5.12-muqss-6ms-skylake</p>
<h1 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h1><p>看到B站大佬的教学视频， 使用Linuxtkg进行内核的编译打包和添加muqssCPU调度器， 想自己尝试一下， 同时熟悉一下Ubuntu常见的工具链，所以就开始做了这个事情。</p>
<ol>
<li><p>首先是需要对系统进行初始化， 需要一些底层的工具包。 在Ubuntu上面还是有些问题的， 这个坑自己踩了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> zstd <span class="token function">git</span> <span class="token function">wget</span> <span class="token function">sudo</span> <span class="token function">bc</span> <span class="token function">rsync</span> kmod cpio libelf-dev build-essential fakeroot libncurse5-dev libssl-dev ccache bison flex qtbase5-dev kernel-package</code></pre>

<p>NOTE: 这里面我遇到少了pkg但是没有明确报错的是：<strong>zstd &amp; kernel-package</strong> ，这两个如果没有正确的安装报错是比较模糊的， 完全不能定向到问题是缺少了这两个包。 （而官方的手册中也没有写需要安装kernel-package就比较坑爹</p>
</li>
<li><p>之后就是下载Linux-tkg ，建议直接从Github下载， <a href="https://github.com/Frogging-Family/linux-tkg">Linux-tkg official address</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">git</span> clone https://github.com/Frogging-Family/linux-tkg.git</code></pre>
</li>
<li><p>在clone完成之后， 执行下面的.&#x2F;install.sh config, 按照提示回答相关的问题。 </p>
</li>
<li><p>或者可以直接编辑其中的customization.cfg来设置默认的参数。（这个文件中都是有说明的，还算是比较详细， 一般可以直接看懂。 </p>
</li>
<li><p>回答完成问题之后会生成对应的config文件。</p>
</li>
<li><p>执行.&#x2F;install.sh install， 之后会有几个不同的发行版的选择， 只需要选择自己需要的即可， 如果是Deb系的会自动启动编译命令 make -j32 deb-pkg ,自动生成的软件包在.&#x2F;DEBS&#x2F;*.deb.直接安装即可。如果是rpm也会生成RPMS。</p>
</li>
<li><p>如果中途报错 ， 我也不知道具体的处理方式。目前发现的问题如下：</p>
<ol>
<li>不同版本的ubuntu 表现是不同的， 震惊！ 同样的设置参数 ，同样的内核代码和补丁，在Ubuntu 18.04 和 20.04 ， 20.04 会成功。</li>
<li>不同环境的结果是不同的， 在一台服务器上面 起Docker容器进行初始化之后编译 会成功的。 在笔记本上不一定会成功。 </li>
<li>目前没有总结出任何的相关规律， 太任性了只能说。 </li>
<li>如果是不打包成deb，目前的成功率是100%（包括直接将文件释放到系统中， 和打成rpm）。</li>
</ol>
</li>
</ol>
<hr>
<p>现在能想到的差不多这些吧 ， 反正编译出错就是dpkg-package ERROR 2 ， 我现在满脑子都是ERROR 2了， 告辞。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>vim笔记</title>
    <url>/2019/07/08/Linux/Linux_VIM-note/</url>
    <content><![CDATA[<p>vim的常用的命令速记。  </p>
<span id="more"></span>
<p>可在~&#x2F;.vimrc中进行vim的的默认配置，echo ‘:set nu’ &gt; ~&#x2F;.vimrc即可设置vim默认显示行号。<br><a href="https://www.w3cschool.cn/regex_rmjc/">30分钟正则表达式入门教程</a></p>
<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><p>一种模式化的编辑器，具有多种不同的模式。  </p>
<ol>
<li>编辑模式，命令模式</li>
<li>插入模式</li>
<li>末行模式<br> 内置的命令行接口</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> +12 test.sh
<span class="token function">vim</span> +/PATTERN test.sh 打开自动定位到匹配模式的第一个结果的行首。
<span class="token function">vim</span> + test.sh 直接出现在文件末尾  </code></pre>
<h2 id="切换模式的说明"><a href="#切换模式的说明" class="headerlink" title="切换模式的说明"></a>切换模式的说明</h2><p>i – 直接在当前光标的位置输入<br>a – 在光标字符的后面输入<br>o – 在光标下面直接新建一行，开始输入<br>I – 在光标所在行的行首输入<br>O – 在光标所在的上面直接新建一行，开始输入<br>A – 在光所所在行的行尾输入</p>
<p>编辑模式到末行模式 使用符号 ：<br>:10，100d<br>:set nu<br>:set nonu<br>:s&#x2F;dhcp&#x2F;static&#x2F;g</p>
<p>关闭文件：<br>    编辑模式下 连续ZZ，表示保存退出<br>    :q 表示直接退出，类似的常用还有 :wq :wq! :q! :w! :w<br>    :x 保存退出<br>    :w [PATHTOFILE]</p>
<p>光标调整:<br>字符间<br>hjkl 左 下 上 右 10l 右侧10个字符<br>w 下一个单词的词首<br>b 前一个单词的词首<br>e 下一个单词的词尾</p>
<p>行首行尾<br>^ 调至行首第一个非空白字符<br>0 调至行首<br>$ 调至行尾</p>
<p>HIJK 行间<br>G 直接到最后一行<br>句间<br>段间</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim 全 Lua 配置</title>
    <url>/2023/08/05/Linux/Linux_VIM_Neovim-Lua-from-scratch/</url>
    <content><![CDATA[<p>写这个是为了记录一下我新的VIM配置和VIM的快捷键，看起来lua的版本比之前的scripts要好的多， 无论是使用的方式还是启动的速度， 都比之前快。 </p>
<h2 id="我的需求："><a href="#我的需求：" class="headerlink" title="我的需求："></a>我的需求：</h2><ul>
<li>打开代码， 会显示代码高亮。 </li>
<li>vim可以默认满足的要求， 尽可能少的使用鼠标。</li>
<li>代码错误提示 LSP ， 挂了Language Server. ( Already Config, but not work. Thinking About this.</li>
<li>主题， 目前使用的是 catppuccin-frappe</li>
<li>Markdown Preview （ Pending….</li>
<li>代码补全（Already Done.</li>
</ul>
<h2 id="我的快捷键清单："><a href="#我的快捷键清单：" class="headerlink" title="我的快捷键清单："></a>我的快捷键清单：</h2><table>
<thead>
<tr>
<th align="right">Mappings</th>
<th>Actions</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><code> &lt;Leader-1&gt;</code></td>
<td>高亮第 1 列， 高亮列， 首字母缩进检查</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-2&gt;</code></td>
<td>高亮第 3 列， 高亮列， 双空格缩进检查</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-3&gt;</code></td>
<td>高亮第 5 列， 高亮列， 4空格缩进检查</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-4&gt;</code></td>
<td>高亮第 9 列， 高亮列， 8空格缩进检查</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-a&gt;</code></td>
<td>搭配Visual block mode 进行bash shell 的注释，行首添加#</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-x&gt;</code></td>
<td>同上，删除注释。</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-r&gt;</code></td>
<td>KubeApply (Fixed, Ready to use.)</td>
</tr>
<tr>
<td align="right"><code> &lt;Leader-e&gt;</code></td>
<td>KubeDelete (Fixed, Ready to use.)</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-dr&gt;</code></td>
<td>KubeApplyDIr (Fixed, Ready to use.)</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-de&gt;</code></td>
<td>KubeDeleteDir (Fixed, Ready to use.)</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-ff&gt;</code></td>
<td>Telescope Find FIles 查找文件</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-fg&gt;</code></td>
<td>Telescope Find Live grep 过滤文件中的关键字</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-fb&gt;</code></td>
<td>Telescope Find Buffer 查看Buffer中的数据。VIMbuffer</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-fh&gt;</code></td>
<td>Telescope Find Help（ Maybe not use， Just record</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-ps&gt;</code></td>
<td>This is Alias for :PackerSync.</td>
</tr>
<tr>
<td align="right"><code>&lt;Leader-ms&gt;</code></td>
<td>This is Alias for :Mason.</td>
</tr>
<tr>
<td align="right"><code>&lt;C-n&gt;</code></td>
<td>Telescope PageDown 在Insert模式下面的上下移动。</td>
</tr>
<tr>
<td align="right"><code>&lt;C-p&gt;</code></td>
<td>Telescope PageUp 在Insert模式下面的上下移动。</td>
</tr>
<tr>
<td align="right"><code>&lt;j / k&gt;</code></td>
<td>Telescope NORMAL Up&#x2F;Down Normal模式下的上下移动。</td>
</tr>
<tr>
<td align="right"><code>&lt;C-x&gt;</code></td>
<td>Telescope Go to file selection as a split 找到的文件直接水平开新窗口（下方</td>
</tr>
<tr>
<td align="right"><code>&lt;C-v&gt;</code></td>
<td>Telescope Go to file selection as a vsplit 找到的文件直接垂直开新窗口（右侧</td>
</tr>
<tr>
<td align="right"><code>&lt;C-t&gt;</code></td>
<td>Telescope Go to a file in a new tab 找到的文件开新的VIM tab， 感觉不是非常的好用，垂直会经常被用到。</td>
</tr>
<tr>
<td align="right"><code>&lt;C-/&gt;</code></td>
<td>Telescope Show mappings for picker actions (insert mode)  帮助</td>
</tr>
<tr>
<td align="right"><code>?</code></td>
<td>Telescope Show mappings for picker actions (normal mode) 帮助</td>
</tr>
<tr>
<td align="right"><code>&lt;M-f&gt;</code></td>
<td>Scroll left in results window</td>
</tr>
<tr>
<td align="right"><code>&lt;M-b&gt;</code></td>
<td>Scroll right in results window</td>
</tr>
<tr>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"></td>
<td></td>
</tr>
</tbody></table>
<p>其他的还在配置和学习中， 先这样把。。 之前用的功能不太多， 有时间继续看。。。。</p>
<h2 id="About-NerdFonts"><a href="#About-NerdFonts" class="headerlink" title="About NerdFonts."></a>About NerdFonts.</h2><p>Nerd 类型的字体实际代表了 带有Icon字符集的字体。<br><a href="https://www.nerdfonts.com/#home">https://www.nerdfonts.com/#home</a></p>
<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><ol>
<li><p>不换行显示文本或者代码</p>
<pre class="language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">nowrap</span></code></pre></li>
<li><p>直接grep文本的内容并替换当前buffer中的内容.<br>是的，当前打开的文件在VIM里面其实是叫buffer， 因为并未完成实际的写入。</p>
<pre class="language-vim" data-language="vim"><code class="language-vim"><span class="token punctuation">:</span><span class="token operator">%</span><span class="token operator">!</span> <span class="token keyword">grep</span> KEYWORD </code></pre></li>
<li><p>粘贴的时候保留格式。 </p>
<pre class="language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">paste</span>
<span class="token keyword">set</span> <span class="token builtin">nopaste</span></code></pre>
<p>或者是关闭autoindent</p>
<pre class="language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">ai</span>
<span class="token keyword">set</span> <span class="token builtin">noai</span></code></pre>
</li>
<li><p>压缩多个空格为一个</p>
<pre class="language-none"><code class="language-none">:%s@  *@ @g</code></pre></li>
<li><p>替换所有的空格 为 tab </p>
<pre class="language-none"><code class="language-none">:% s@ @\t@g</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VIM, Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux及vim的技巧</title>
    <url>/2019/10/10/Linux/Linux_VIM_tricks/</url>
    <content><![CDATA[<p>Linux的使用技巧已经vim的常用设置及插件。</p>
<span id="more"></span>

<h3 id="1-删除目录下的所有文件夹，但是保留所有文件"><a href="#1-删除目录下的所有文件夹，但是保留所有文件" class="headerlink" title="1. 删除目录下的所有文件夹，但是保留所有文件"></a>1. 删除目录下的所有文件夹，但是保留所有文件</h3><pre class="language-none"><code class="language-none">find .&#x2F; -type d ! -name . | xargs rm -rf</code></pre>
<h3 id="2-设置vim的个性化设置"><a href="#2-设置vim的个性化设置" class="headerlink" title="2. 设置vim的个性化设置"></a>2. 设置vim的个性化设置</h3><p>设置自动显示行号，设置VIM自动将tab转化为4个空格</p>
<pre class="language-none"><code class="language-none">:set nu
:set tabstop&#x3D;4
:set softtabstop&#x3D;4
:set shiftwidth&#x3D;4
:set expandtab</code></pre>

<h3 id="3-已经编辑的文件进行tab空格转换："><a href="#3-已经编辑的文件进行tab空格转换：" class="headerlink" title="3. 已经编辑的文件进行tab空格转换："></a>3. 已经编辑的文件进行tab空格转换：</h3><ul>
<li>TAB替换为空格：<pre class="language-bash" data-language="bash"><code class="language-bash">:set <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span>
:set expandtab
:%retab<span class="token operator">!</span></code></pre></li>
<li>空格替换为TAB：<pre class="language-bash" data-language="bash"><code class="language-bash">:set <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span>
:set noexpandtab
:%retab<span class="token operator">!</span></code></pre></li>
</ul>
<h3 id="4-vim的个性化配置及插件"><a href="#4-vim的个性化配置及插件" class="headerlink" title="4. vim的个性化配置及插件"></a>4. vim的个性化配置及插件</h3><ul>
<li><p>自动换行</p>
<p>set wrap</p>
</li>
<li><p>输入命令时自动提示补完</p>
<p>set showcmd</p>
</li>
<li><p>显示行号</p>
<p>set nu</p>
</li>
<li><p>显示当前行号及关联前后行号</p>
<p>set relativenumber</p>
</li>
<li><p>语法高亮</p>
<p>syntax on </p>
</li>
<li><p>光标所在的行高亮</p>
<p>set cursorline</p>
</li>
<li><p>前后滚动时保留最前和最后的5行</p>
<p>set scrolloff&#x3D;5</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM中windows7虚拟机时间问题</title>
    <url>/2019/06/25/Linux/Linux_VM-timer/</url>
    <content><![CDATA[<p>在KVM虚拟机中，安装Windows7的虚拟机，安装完成启动的时候发现虚拟机的时间与外部时间的速度不一致。记录问题的原因及解决方法。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="查看虚拟机的配置文件"><a href="#查看虚拟机的配置文件" class="headerlink" title="查看虚拟机的配置文件"></a>查看虚拟机的配置文件</h3><p>观察运行的效果类似于GBA模拟器的加速设定，动画速度变快了，windows7的系统时间也被加速了。  首先怀疑的是虚拟机的运行速度是不是被加速了，没有相关的设置。<br>其次是查看配置文件中时间的相关定义，发现我的配置文件中，时间的定义是这样的：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clock</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>localtime<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>rtc<span class="token punctuation">'</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>catchup<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>pit<span class="token punctuation">'</span></span> <span class="token attr-name">tickpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>delay<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>hpet<span class="token punctuation">'</span></span> <span class="token attr-name">present</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>no<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>hypervclock<span class="token punctuation">'</span></span> <span class="token attr-name">present</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>yes<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clock</span><span class="token punctuation">></span></span></code></pre>
<p>怀疑这几个timer是有问题的，一般来说配置文件中只有简单的 clock offset&#x3D;’localtime’ 的字段其实就够用了。<br>在删除了第一个timer之后，系统的时间和运行速度就正常了。</p>
<h3 id="在fedora-wiki找到的说明页面"><a href="#在fedora-wiki找到的说明页面" class="headerlink" title="在fedora-wiki找到的说明页面"></a>在fedora-wiki找到的说明页面</h3><p><a href="https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Virtualization_Deployment_and_Administration_Guide/sect-Virtualization-Tips_and_tricks-Libvirt_Managed_Timers.html">Libvirt_Managed_Timers页面链接</a><br>在字段中‘rtc’并不是主要的问题，主要问题是后面的tickpolicy&#x3D;’catchcup’。fedora wiki给出的答案是catchup–Deliver at a higher rate to catch up.<br>所以这就是为什么我们删除了这个timer之后系统正常的原因。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>X11 通过 ssh 转发图形化界面</title>
    <url>/2023/08/16/Linux/Linux_X11Forward/</url>
    <content><![CDATA[<h2 id="Ssh-转发-X11"><a href="#Ssh-转发-X11" class="headerlink" title="Ssh 转发 X11"></a>Ssh 转发 X11</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> xorg-x11-xauth xorg-x11-fonts-* xorg-x11-font-utils xorg-x11-fonts-Type1 xclock

<span class="token function">vim</span> /etc/ssh/sshd_config
  X11Forwarding <span class="token function">yes</span>
  X11UseLocalhost no</code></pre>
<p>运行图形化的命令 , 自动捕获请求， 查看mobexterm是否已经正常的启动了一个临时的窗口来进行数据的转发即可 。</p>
<h2 id="Ssh-转发连接到远端"><a href="#Ssh-转发连接到远端" class="headerlink" title="Ssh 转发连接到远端"></a>Ssh 转发连接到远端</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-L</span> local-port:target-host:target-port tunnel-host
<span class="token function">ssh</span> <span class="token parameter variable">-vvv</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-N</span> <span class="token parameter variable">-D</span> <span class="token number">0.0</span>.0.0:30890 hayden@localhost</code></pre>
<h2 id="Ssh-转发命令参数说明"><a href="#Ssh-转发命令参数说明" class="headerlink" title="Ssh 转发命令参数说明"></a>Ssh 转发命令参数说明</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-L</span> listen-port:host:port 指派本地的 port 到达端机器地址上的 port
    建立本地SSH隧道<span class="token punctuation">(</span>本地客户端建立监听端口<span class="token punctuation">)</span>
    将本地机<span class="token punctuation">(</span>客户机<span class="token punctuation">)</span>的某个端口转发到远端指定机器的指定端口.

<span class="token parameter variable">-R</span> listen-port:host:port 指派远程上的 port 到本地地址上的 port
    建立远程SSH隧道<span class="token punctuation">(</span>隧道服务端建立监听端口<span class="token punctuation">)</span>
    将远程主机<span class="token punctuation">(</span>服务器<span class="token punctuation">)</span>的某个端口转发到本地端指定机器的指定端口.

<span class="token parameter variable">-D</span> port 指定一个本地机器 <span class="token string">"动态的"</span> 应用程序端口转发.</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>bpftrace 使用tracepoint 追踪 tcp 状态变化</title>
    <url>/2023/03/19/Linux/Linux_bpftrace/</url>
    <content><![CDATA[<h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><p>大佬的博客， 入门教程： <a href="http://arthurchiao.art/blog/bpf-advanced-notes-1-zh/">http://arthurchiao.art/blog/bpf-advanced-notes-1-zh/</a></p>
<h2 id="记录基础的bpftrace使用方法"><a href="#记录基础的bpftrace使用方法" class="headerlink" title="记录基础的bpftrace使用方法"></a>记录基础的bpftrace使用方法</h2><p>单行程序的使用方法</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost-live ~<span class="token punctuation">]</span><span class="token comment"># bpftrace -e 'tracepoint:syscalls:sys_enter_execve &#123; printf("%s %s\n", comm, str(args->filename));&#125;'</span></code></pre>

<h2 id="Tracepoint如何获取可用参数的解释"><a href="#Tracepoint如何获取可用参数的解释" class="headerlink" title="Tracepoint如何获取可用参数的解释"></a>Tracepoint如何获取可用参数的解释</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost-live sys_enter_execve<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/sys/kernel/tracing/events/syscalls/sys_enter_execve
<span class="token punctuation">[</span>root@localhost-live sys_enter_execve<span class="token punctuation">]</span><span class="token comment"># grep -ri .</span>
format:name: sys_enter_execve
format:ID: <span class="token number">742</span>
format:format:
format:	field:unsigned short common_type<span class="token punctuation">;</span>	offset:0<span class="token punctuation">;</span>	size:2<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:	field:unsigned char common_flags<span class="token punctuation">;</span>	offset:2<span class="token punctuation">;</span>	size:1<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:	field:unsigned char common_preempt_count<span class="token punctuation">;</span>	offset:3<span class="token punctuation">;</span>	size:1<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:	field:int common_pid<span class="token punctuation">;</span>	offset:4<span class="token punctuation">;</span>	size:4<span class="token punctuation">;</span>	signed:1<span class="token punctuation">;</span>
format:	field:int __syscall_nr<span class="token punctuation">;</span>	offset:8<span class="token punctuation">;</span>	size:4<span class="token punctuation">;</span>	signed:1<span class="token punctuation">;</span>
format:	field:const char * filename<span class="token punctuation">;</span>	offset:16<span class="token punctuation">;</span>	size:8<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:	field:const char *const * argv<span class="token punctuation">;</span>	offset:24<span class="token punctuation">;</span>	size:8<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:	field:const char *const * envp<span class="token punctuation">;</span>	offset:32<span class="token punctuation">;</span>	size:8<span class="token punctuation">;</span>	signed:0<span class="token punctuation">;</span>
format:print fmt: <span class="token string">"filename: 0x%08lx, argv: 0x%08lx, envp: 0x%08lx"</span>, <span class="token variable"><span class="token punctuation">((</span>unsigned long<span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-</span><span class="token operator">></span>filename<span class="token punctuation">))</span></span>, <span class="token variable"><span class="token punctuation">((</span>unsigned long<span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-</span><span class="token operator">></span>argv<span class="token punctuation">))</span></span>, <span class="token variable"><span class="token punctuation">((</span>unsigned long<span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-</span><span class="token operator">></span>envp<span class="token punctuation">))</span></span>
trigger:<span class="token comment"># Available triggers:</span>
trigger:<span class="token comment"># traceon traceoff snapshot stacktrace enable_event disable_event enable_hist disable_hist hist</span>
filter:none
id:742
enable:0</code></pre>

<h2 id="记录尝试追踪tcp状态变化的方法"><a href="#记录尝试追踪tcp状态变化的方法" class="headerlink" title="记录尝试追踪tcp状态变化的方法"></a>记录尝试追踪tcp状态变化的方法</h2><p>关于bpftrace追踪的总结, 追踪tcp状态的方法， 通过使用特定的tracepoint的来获取tcp状态的变化： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">~$ bpftrace <span class="token parameter variable">-e</span> <span class="token string">'tracepoint:sock:inet_sock_set_state &#123; printf("%s %d %d\n", comm, pid, args->newstate); &#125;'</span>
~$ bpftrace <span class="token parameter variable">-e</span> <span class="token string">'tracepoint:sock:inet_sock_set_state &#123; printf("%s - %d -> %d - %d - %s\n",strftime("%H:%M:%S.%L", nsecs), args->oldstate, args->newstate, pid, comm); &#125;'</span></code></pre>

<p>关于返回值的说明： </p>
<blockquote>
<p><a href="https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9/-/blob/main/include/net/tcp_states.h">https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9/-/blob/main/include/net/tcp_states.h</a>  </p>
</blockquote>
<p>tcp_set_state 是一个内核函数，用于设置 TCP 套接字的状态。它有 12 个可能的返回值，分别对应 TCP 协议中定义的 12 种状态1。这些状态是：</p>
<blockquote>
<p>1 TCP_ESTABLISHED：连接已建立<br>2 TCP_SYN_SENT：主动打开连接，已发送 SYN 包<br>3 TCP_SYN_RECV：被动打开连接，已收到 SYN 包<br>4 TCP_FIN_WAIT1：主动关闭连接，已发送 FIN 包<br>5 TCP_FIN_WAIT2：主动关闭连接，已收到对方的 ACK 包<br>6 TCP_TIME_WAIT：主动关闭连接，等待一段时间以确保对方收到最后一个 ACK 包<br>7 TCP_CLOSE：连接已关闭<br>8 TCP_CLOSE_WAIT：被动关闭连接，已收到 FIN 包<br>9 TCP_LAST_ACK：被动关闭连接，已发送最后一个 ACK 包<br>10 TCP_LISTEN：监听状态，等待被动打开连接<br>11 TCP_CLOSING：双方同时关闭连接，交换 FIN 和 ACK 包的过程中<br>12 TCP_NEW_SYN_RECV：临时状态，用于处理 SYN 队列溢出的情况</p>
</blockquote>
<p>追踪点理解起来还是比较简单的， 查看追踪点可用的参数，在这个部分可以看。 </p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">~</span>$ cat <span class="token operator">/</span>sys<span class="token operator">/</span>kernel<span class="token operator">/</span>debug<span class="token operator">/</span>tracing<span class="token operator">/</span>events<span class="token operator">/</span>syscalls<span class="token operator">/</span>sys_enter_sendmsg<span class="token operator">/</span>format
name<span class="token operator">:</span> sys_enter_sendmsg
ID<span class="token operator">:</span> <span class="token number">1252</span>
format<span class="token operator">:</span>
        field<span class="token operator">:</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> common_type<span class="token punctuation">;</span>       offset<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>       size<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> common_flags<span class="token punctuation">;</span>       offset<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>       size<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> common_preempt_count<span class="token punctuation">;</span>       offset<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span>       size<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">int</span> common_pid<span class="token punctuation">;</span>   offset<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>       size<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> common_preempt_lazy_count<span class="token punctuation">;</span>  offset<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span>       size<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>

        field<span class="token operator">:</span><span class="token keyword">int</span> __syscall_nr<span class="token punctuation">;</span> offset<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">;</span>      size<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span>   offset<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">;</span>      size<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">user_msghdr</span> <span class="token operator">*</span> msg<span class="token punctuation">;</span> offset<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">;</span>      size<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        field<span class="token operator">:</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">;</span>       offset<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">;</span>      size<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span> <span class="token keyword">signed</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>

print fmt<span class="token operator">:</span> <span class="token string">"fd: 0x%08lx, msg: 0x%08lx, flags: 0x%08lx"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-></span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>REC<span class="token operator">-></span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>如果是使用 kprobe 的话， 不能使用 args， 需要使用确定的arg0 - argN， 这个部分还在摸索， 目前尝试用这个参数还是失败。 取到对应的得值， 但是print不出来。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, BPF</tag>
      </tags>
  </entry>
  <entry>
    <title>关于BTRFS的一些测试</title>
    <url>/2022/04/19/Linux/Linux_btrfs/</url>
    <content><![CDATA[<h2 id="创建BTRFS卷"><a href="#创建BTRFS卷" class="headerlink" title="创建BTRFS卷"></a>创建BTRFS卷</h2><pre><code>mkfs.btrfs -d single -m raid1 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1 
</code></pre>
<h2 id="更改btrfs的元数据冗余"><a href="#更改btrfs的元数据冗余" class="headerlink" title="更改btrfs的元数据冗余"></a>更改btrfs的元数据冗余</h2><p>  这里最好的办法当然是创建的时候就规划和指定好。<br>    btrfs balance start -dconvert&#x3D;raid1 -mconvert&#x3D;raid1 &#x2F;mnt</p>
<h2 id="创建轻量副本文件"><a href="#创建轻量副本文件" class="headerlink" title="创建轻量副本文件"></a>创建轻量副本文件</h2><pre><code>cp --reflink source dest 
</code></pre>
<p>记录测试结果：</p>
<ol>
<li>如果是 -d raid0 -m raid1 可以直接将三个EBS IO1 3000IOPS的卷吃满， 直接到9000</li>
<li>如果是 -d raid1 -m raid1 只能达到3000IOPS， 但是容量会有冗余。</li>
</ol>
<h2 id="Randread"><a href="#Randread" class="headerlink" title="Randread"></a>Randread</h2><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">directory</span><span class="token punctuation">=</span><span class="token value attr-value">/mnt</span>
<span class="token key attr-name">ioengine</span><span class="token punctuation">=</span><span class="token value attr-value">libaio</span>
<span class="token key attr-name">direct</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">randread</span>
<span class="token key attr-name">bs</span><span class="token punctuation">=</span><span class="token value attr-value">16M</span>
<span class="token key attr-name">size</span><span class="token punctuation">=</span><span class="token value attr-value">64M</span>
time_based
<span class="token key attr-name">runtime</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
group_reporting
norandommap
<span class="token key attr-name">numjobs</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
thread

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job1</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">iodepth</span><span class="token punctuation">=</span><span class="token value attr-value">2</span></code></pre>

<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-10-64 fio<span class="token punctuation">]</span><span class="token comment"># fio ./job1</span>
job1: <span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token assign-left variable">rw</span><span class="token operator">=</span>randread, <span class="token assign-left variable">bs</span><span class="token operator">=</span>16M-16M/16M-16M/16M-16M, <span class="token assign-left variable">ioengine</span><span class="token operator">=</span>libaio, <span class="token assign-left variable">iodepth</span><span class="token operator">=</span><span class="token number">2</span>
fio-2.14
Starting <span class="token number">1</span> thread
job1: Laying out IO file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span> file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> / 64MB<span class="token punctuation">)</span>
Jobs: <span class="token number">1</span> <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token punctuation">[</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">100.0</span>% done<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">256</span>.0MB/0KB/0KB /s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">16</span>/0/0 iops<span class="token punctuation">]</span> <span class="token punctuation">[</span>eta 00m:00s<span class="token punctuation">]</span>
job1: <span class="token punctuation">(</span>groupid<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token assign-left variable">err</span><span class="token operator">=</span> <span class="token number">0</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">26359</span>: Thu Nov <span class="token number">18</span> 07:59:17 <span class="token number">2021</span>
  <span class="token builtin class-name">read</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">5232</span>.0MB, <span class="token assign-left variable">bw</span><span class="token operator">=</span>266745KB/s, <span class="token assign-left variable">iops</span><span class="token operator">=</span><span class="token number">16</span>, <span class="token assign-left variable">runt</span><span class="token operator">=</span> 20085msec
    slat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">70</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">21.39</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">23.43</span>
    clat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">130</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">101.29</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">31.01</span>
     lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">139</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">122.68</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">24.96</span>
    clat percentiles <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>:
     <span class="token operator">|</span>  <span class="token assign-left variable">1.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token number">7</span><span class="token punctuation">]</span>,  <span class="token assign-left variable">5.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">60</span><span class="token punctuation">]</span>, <span class="token assign-left variable">10.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">63</span><span class="token punctuation">]</span>, <span class="token assign-left variable">20.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">66</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">30.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">93</span><span class="token punctuation">]</span>, <span class="token assign-left variable">40.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">110</span><span class="token punctuation">]</span>, <span class="token assign-left variable">50.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">118</span><span class="token punctuation">]</span>, <span class="token assign-left variable">60.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">120</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">70.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">122</span><span class="token punctuation">]</span>, <span class="token assign-left variable">80.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>, <span class="token assign-left variable">90.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">127</span><span class="token punctuation">]</span>, <span class="token assign-left variable">95.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">128</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">130</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.50th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.90th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.95th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.99th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>
    lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">0.31</span>%, <span class="token assign-left variable">10</span><span class="token operator">=</span><span class="token number">3.36</span>%, <span class="token assign-left variable">20</span><span class="token operator">=</span><span class="token number">0.92</span>%, <span class="token assign-left variable">50</span><span class="token operator">=</span><span class="token number">0.31</span>%, <span class="token assign-left variable">100</span><span class="token operator">=</span><span class="token number">28.75</span>%
    lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">250</span><span class="token operator">=</span><span class="token number">66.36</span>%
  cpu          <span class="token builtin class-name">:</span> <span class="token assign-left variable">usr</span><span class="token operator">=</span><span class="token number">0.04</span>%, <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">3.80</span>%, <span class="token assign-left variable">ctx</span><span class="token operator">=</span><span class="token number">994</span>, <span class="token assign-left variable">majf</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">minf</span><span class="token operator">=</span><span class="token number">8193</span>
  IO depths    <span class="token builtin class-name">:</span> <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">0.3</span>%, <span class="token assign-left variable">2</span><span class="token operator">=</span><span class="token number">99.7</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     submit    <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     complete  <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     issued    <span class="token builtin class-name">:</span> <span class="token assign-left variable">total</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">327</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">short</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">drop</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>
     latency   <span class="token builtin class-name">:</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">window</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">percentile</span><span class="token operator">=</span><span class="token number">100.00</span>%, <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token number">2</span>

Run status group <span class="token number">0</span> <span class="token punctuation">(</span>all <span class="token function">jobs</span><span class="token punctuation">)</span>:
   READ: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">5232</span>.0MB, <span class="token assign-left variable">aggrb</span><span class="token operator">=</span>266744KB/s, <span class="token assign-left variable">minb</span><span class="token operator">=</span>266744KB/s, <span class="token assign-left variable">maxb</span><span class="token operator">=</span>266744KB/s, <span class="token assign-left variable">mint</span><span class="token operator">=</span>20085msec, <span class="token assign-left variable">maxt</span><span class="token operator">=</span>20085msec</code></pre>

<h2 id="Randwrite"><a href="#Randwrite" class="headerlink" title="Randwrite"></a>Randwrite</h2><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">directory</span><span class="token punctuation">=</span><span class="token value attr-value">/mnt</span>
<span class="token key attr-name">ioengine</span><span class="token punctuation">=</span><span class="token value attr-value">libaio</span>
<span class="token key attr-name">direct</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">randread</span>
<span class="token key attr-name">bs</span><span class="token punctuation">=</span><span class="token value attr-value">16M</span>
<span class="token key attr-name">size</span><span class="token punctuation">=</span><span class="token value attr-value">64M</span>
time_based
<span class="token key attr-name">runtime</span><span class="token punctuation">=</span><span class="token value attr-value">20</span>
group_reporting
norandommap
<span class="token key attr-name">numjobs</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
thread

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job1</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">iodepth</span><span class="token punctuation">=</span><span class="token value attr-value">2</span></code></pre>
<h2 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-10-64 fio<span class="token punctuation">]</span><span class="token comment"># fio ./job1</span>
job1: <span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token assign-left variable">rw</span><span class="token operator">=</span>randwrite, <span class="token assign-left variable">bs</span><span class="token operator">=</span>16M-16M/16M-16M/16M-16M, <span class="token assign-left variable">ioengine</span><span class="token operator">=</span>libaio, <span class="token assign-left variable">iodepth</span><span class="token operator">=</span><span class="token number">2</span>
fio-2.14
Starting <span class="token number">1</span> thread
Jobs: <span class="token number">1</span> <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token punctuation">[</span>w<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">100.0</span>% done<span class="token punctuation">]</span> <span class="token punctuation">[</span>0KB/256.0MB/0KB /s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span>/16/0 iops<span class="token punctuation">]</span> <span class="token punctuation">[</span>eta 00m:00s<span class="token punctuation">]</span>
job1: <span class="token punctuation">(</span>groupid<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token assign-left variable">err</span><span class="token operator">=</span> <span class="token number">0</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">26385</span>: Thu Nov <span class="token number">18</span> 08:00:56 <span class="token number">2021</span>
  write: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">5248</span>.0MB, <span class="token assign-left variable">bw</span><span class="token operator">=</span>267987KB/s, <span class="token assign-left variable">iops</span><span class="token operator">=</span><span class="token number">16</span>, <span class="token assign-left variable">runt</span><span class="token operator">=</span> 20053msec
    slat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">67</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">12.64</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">21.62</span>
    clat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">12</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">141</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">109.45</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">31.98</span>
     lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">18</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">142</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">122.10</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">25.25</span>
    clat percentiles <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>:
     <span class="token operator">|</span>  <span class="token assign-left variable">1.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">16</span><span class="token punctuation">]</span>,  <span class="token assign-left variable">5.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">23</span><span class="token punctuation">]</span>, <span class="token assign-left variable">10.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">66</span><span class="token punctuation">]</span>, <span class="token assign-left variable">20.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">72</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">30.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">120</span><span class="token punctuation">]</span>, <span class="token assign-left variable">40.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">124</span><span class="token punctuation">]</span>, <span class="token assign-left variable">50.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>, <span class="token assign-left variable">60.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">127</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">70.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">128</span><span class="token punctuation">]</span>, <span class="token assign-left variable">80.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">130</span><span class="token punctuation">]</span>, <span class="token assign-left variable">90.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">133</span><span class="token punctuation">]</span>, <span class="token assign-left variable">95.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">135</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">139</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.50th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">139</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.90th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">141</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.95th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">141</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.99th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">141</span><span class="token punctuation">]</span>
    lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">20</span><span class="token operator">=</span><span class="token number">4.57</span>%, <span class="token assign-left variable">50</span><span class="token operator">=</span><span class="token number">0.91</span>%, <span class="token assign-left variable">100</span><span class="token operator">=</span><span class="token number">19.21</span>%, <span class="token assign-left variable">250</span><span class="token operator">=</span><span class="token number">75.30</span>%
  cpu          <span class="token builtin class-name">:</span> <span class="token assign-left variable">usr</span><span class="token operator">=</span><span class="token number">1.51</span>%, <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.82</span>%, <span class="token assign-left variable">ctx</span><span class="token operator">=</span><span class="token number">720</span>, <span class="token assign-left variable">majf</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">minf</span><span class="token operator">=</span><span class="token number">1</span>
  IO depths    <span class="token builtin class-name">:</span> <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">0.3</span>%, <span class="token assign-left variable">2</span><span class="token operator">=</span><span class="token number">99.7</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     submit    <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     complete  <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     issued    <span class="token builtin class-name">:</span> <span class="token assign-left variable">total</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">328</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">short</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">drop</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>
     latency   <span class="token builtin class-name">:</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">window</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">percentile</span><span class="token operator">=</span><span class="token number">100.00</span>%, <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token number">2</span>

Run status group <span class="token number">0</span> <span class="token punctuation">(</span>all <span class="token function">jobs</span><span class="token punctuation">)</span>:
  WRITE: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">5248</span>.0MB, <span class="token assign-left variable">aggrb</span><span class="token operator">=</span>267987KB/s, <span class="token assign-left variable">minb</span><span class="token operator">=</span>267987KB/s, <span class="token assign-left variable">maxb</span><span class="token operator">=</span>267987KB/s, <span class="token assign-left variable">mint</span><span class="token operator">=</span>20053msec, <span class="token assign-left variable">maxt</span><span class="token operator">=</span>20053msec</code></pre>

<h2 id="Xfs-单独磁盘"><a href="#Xfs-单独磁盘" class="headerlink" title="Xfs 单独磁盘"></a>Xfs 单独磁盘</h2><h3 id="Randwrite-1"><a href="#Randwrite-1" class="headerlink" title="Randwrite"></a>Randwrite</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-10-64 fio<span class="token punctuation">]</span><span class="token comment"># fio ./job1</span>
job1: <span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token assign-left variable">rw</span><span class="token operator">=</span>randwrite, <span class="token assign-left variable">bs</span><span class="token operator">=</span>16M-16M/16M-16M/16M-16M, <span class="token assign-left variable">ioengine</span><span class="token operator">=</span>libaio, <span class="token assign-left variable">iodepth</span><span class="token operator">=</span><span class="token number">2</span>
fio-2.14
Starting <span class="token number">1</span> thread
job1: Laying out IO file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span> file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> / 64MB<span class="token punctuation">)</span>
Jobs: <span class="token number">1</span> <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token punctuation">[</span>w<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">100.0</span>% done<span class="token punctuation">]</span> <span class="token punctuation">[</span>0KB/128.0MB/0KB /s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span>/8/0 iops<span class="token punctuation">]</span> <span class="token punctuation">[</span>eta 00m:00s<span class="token punctuation">]</span>
job1: <span class="token punctuation">(</span>groupid<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token assign-left variable">err</span><span class="token operator">=</span> <span class="token number">0</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">26541</span>: Thu Nov <span class="token number">18</span> 08:04:01 <span class="token number">2021</span>
  write: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">2704</span>.0MB, <span class="token assign-left variable">bw</span><span class="token operator">=</span>137688KB/s, <span class="token assign-left variable">iops</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">runt</span><span class="token operator">=</span> 20110msec
    slat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">12</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">130</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">118.63</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">24.61</span>
    clat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">12</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">130</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">118.91</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">23.73</span>
     lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">34</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">255</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">237.54</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">47.53</span>
    clat percentiles <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>:
     <span class="token operator">|</span>  <span class="token assign-left variable">1.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">14</span><span class="token punctuation">]</span>,  <span class="token assign-left variable">5.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">32</span><span class="token punctuation">]</span>, <span class="token assign-left variable">10.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">125</span><span class="token punctuation">]</span>, <span class="token assign-left variable">20.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">125</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">30.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">125</span><span class="token punctuation">]</span>, <span class="token assign-left variable">40.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">125</span><span class="token punctuation">]</span>, <span class="token assign-left variable">50.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">125</span><span class="token punctuation">]</span>, <span class="token assign-left variable">60.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">70.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>, <span class="token assign-left variable">80.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>, <span class="token assign-left variable">90.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>, <span class="token assign-left variable">95.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">126</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">129</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.50th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.90th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.95th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.99th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>
    lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">20</span><span class="token operator">=</span><span class="token number">1.78</span>%, <span class="token assign-left variable">50</span><span class="token operator">=</span><span class="token number">3.55</span>%, <span class="token assign-left variable">100</span><span class="token operator">=</span><span class="token number">0.59</span>%, <span class="token assign-left variable">250</span><span class="token operator">=</span><span class="token number">94.08</span>%
  cpu          <span class="token builtin class-name">:</span> <span class="token assign-left variable">usr</span><span class="token operator">=</span><span class="token number">0.74</span>%, <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.49</span>%, <span class="token assign-left variable">ctx</span><span class="token operator">=</span><span class="token number">2132</span>, <span class="token assign-left variable">majf</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">minf</span><span class="token operator">=</span><span class="token number">1</span>
  IO depths    <span class="token builtin class-name">:</span> <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">0.6</span>%, <span class="token assign-left variable">2</span><span class="token operator">=</span><span class="token number">99.4</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     submit    <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     complete  <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     issued    <span class="token builtin class-name">:</span> <span class="token assign-left variable">total</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">169</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">short</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">drop</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>
     latency   <span class="token builtin class-name">:</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">window</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">percentile</span><span class="token operator">=</span><span class="token number">100.00</span>%, <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token number">2</span>

Run status group <span class="token number">0</span> <span class="token punctuation">(</span>all <span class="token function">jobs</span><span class="token punctuation">)</span>:
  WRITE: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">2704</span>.0MB, <span class="token assign-left variable">aggrb</span><span class="token operator">=</span>137687KB/s, <span class="token assign-left variable">minb</span><span class="token operator">=</span>137687KB/s, <span class="token assign-left variable">maxb</span><span class="token operator">=</span>137687KB/s, <span class="token assign-left variable">mint</span><span class="token operator">=</span>20110msec, <span class="token assign-left variable">maxt</span><span class="token operator">=</span>20110msec

Disk stats <span class="token punctuation">(</span>read/write<span class="token punctuation">)</span>:
  nvme4n1: <span class="token assign-left variable">ios</span><span class="token operator">=</span><span class="token number">0</span>/10699, <span class="token assign-left variable">merge</span><span class="token operator">=</span><span class="token number">0</span>/0, <span class="token assign-left variable">ticks</span><span class="token operator">=</span><span class="token number">0</span>/720588, <span class="token assign-left variable">in_queue</span><span class="token operator">=</span><span class="token number">702508</span>, <span class="token assign-left variable">util</span><span class="token operator">=</span><span class="token number">99.40</span>%</code></pre>
<h3 id="Randread-1"><a href="#Randread-1" class="headerlink" title="Randread"></a>Randread</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-10-64 fio<span class="token punctuation">]</span><span class="token comment"># fio ./job1</span>
job1: <span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token assign-left variable">rw</span><span class="token operator">=</span>randread, <span class="token assign-left variable">bs</span><span class="token operator">=</span>16M-16M/16M-16M/16M-16M, <span class="token assign-left variable">ioengine</span><span class="token operator">=</span>libaio, <span class="token assign-left variable">iodepth</span><span class="token operator">=</span><span class="token number">2</span>
fio-2.14
Starting <span class="token number">1</span> thread
Jobs: <span class="token number">1</span> <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token punctuation">[</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">100.0</span>% done<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">128</span>.0MB/0KB/0KB /s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">8</span>/0/0 iops<span class="token punctuation">]</span> <span class="token punctuation">[</span>eta 00m:00s<span class="token punctuation">]</span>
job1: <span class="token punctuation">(</span>groupid<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token assign-left variable">err</span><span class="token operator">=</span> <span class="token number">0</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">26570</span>: Thu Nov <span class="token number">18</span> 08:05:27 <span class="token number">2021</span>
  <span class="token builtin class-name">read</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">2704</span>.0MB, <span class="token assign-left variable">bw</span><span class="token operator">=</span>137694KB/s, <span class="token assign-left variable">iops</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">runt</span><span class="token operator">=</span> 20109msec
    slat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">9</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">165</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">118.64</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">25.59</span>
    clat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">165</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">118.93</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">24.65</span>
     lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>: <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token number">25</span>, <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token number">288</span>, <span class="token assign-left variable">avg</span><span class="token operator">=</span><span class="token number">237.57</span>, <span class="token assign-left variable">stdev</span><span class="token operator">=</span><span class="token number">46.62</span>
    clat percentiles <span class="token punctuation">(</span>msec<span class="token punctuation">)</span>:
     <span class="token operator">|</span>  <span class="token assign-left variable">1.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">16</span><span class="token punctuation">]</span>,  <span class="token assign-left variable">5.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token number">57</span><span class="token punctuation">]</span>, <span class="token assign-left variable">10.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">123</span><span class="token punctuation">]</span>, <span class="token assign-left variable">20.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">123</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">30.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">124</span><span class="token punctuation">]</span>, <span class="token assign-left variable">40.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">124</span><span class="token punctuation">]</span>, <span class="token assign-left variable">50.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">124</span><span class="token punctuation">]</span>, <span class="token assign-left variable">60.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">124</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">70.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">129</span><span class="token punctuation">]</span>, <span class="token assign-left variable">80.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">129</span><span class="token punctuation">]</span>, <span class="token assign-left variable">90.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">129</span><span class="token punctuation">]</span>, <span class="token assign-left variable">95.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">129</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.00th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">131</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.50th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">165</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.90th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">165</span><span class="token punctuation">]</span>, <span class="token assign-left variable">99.95th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">165</span><span class="token punctuation">]</span>,
     <span class="token operator">|</span> <span class="token assign-left variable">99.99th</span><span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token number">165</span><span class="token punctuation">]</span>
    lat <span class="token punctuation">(</span>msec<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token assign-left variable">20</span><span class="token operator">=</span><span class="token number">4.73</span>%, <span class="token assign-left variable">100</span><span class="token operator">=</span><span class="token number">1.78</span>%, <span class="token assign-left variable">250</span><span class="token operator">=</span><span class="token number">93.49</span>%
  cpu          <span class="token builtin class-name">:</span> <span class="token assign-left variable">usr</span><span class="token operator">=</span><span class="token number">0.00</span>%, <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.59</span>%, <span class="token assign-left variable">ctx</span><span class="token operator">=</span><span class="token number">3558</span>, <span class="token assign-left variable">majf</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">minf</span><span class="token operator">=</span><span class="token number">8193</span>
  IO depths    <span class="token builtin class-name">:</span> <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">0.6</span>%, <span class="token assign-left variable">2</span><span class="token operator">=</span><span class="token number">99.4</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     submit    <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     complete  <span class="token builtin class-name">:</span> <span class="token assign-left variable">0</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">4</span><span class="token operator">=</span><span class="token number">100.0</span>%, <span class="token assign-left variable">8</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">16</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">32</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token assign-left variable">64</span><span class="token operator">=</span><span class="token number">0.0</span>%, <span class="token operator">>=</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">0.0</span>%
     issued    <span class="token builtin class-name">:</span> <span class="token assign-left variable">total</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">169</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">short</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">drop</span><span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span>/w<span class="token operator">=</span><span class="token number">0</span>/d<span class="token operator">=</span><span class="token number">0</span>
     latency   <span class="token builtin class-name">:</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">window</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">percentile</span><span class="token operator">=</span><span class="token number">100.00</span>%, <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token number">2</span>

Run status group <span class="token number">0</span> <span class="token punctuation">(</span>all <span class="token function">jobs</span><span class="token punctuation">)</span>:
   READ: <span class="token assign-left variable">io</span><span class="token operator">=</span><span class="token number">2704</span>.0MB, <span class="token assign-left variable">aggrb</span><span class="token operator">=</span>137694KB/s, <span class="token assign-left variable">minb</span><span class="token operator">=</span>137694KB/s, <span class="token assign-left variable">maxb</span><span class="token operator">=</span>137694KB/s, <span class="token assign-left variable">mint</span><span class="token operator">=</span>20109msec, <span class="token assign-left variable">maxt</span><span class="token operator">=</span>20109msec

Disk stats <span class="token punctuation">(</span>read/write<span class="token punctuation">)</span>:
  nvme4n1: <span class="token assign-left variable">ios</span><span class="token operator">=</span><span class="token number">10711</span>/1, <span class="token assign-left variable">merge</span><span class="token operator">=</span><span class="token number">0</span>/0, <span class="token assign-left variable">ticks</span><span class="token operator">=</span><span class="token number">598336</span>/56, <span class="token assign-left variable">in_queue</span><span class="token operator">=</span><span class="token number">579492</span>, <span class="token assign-left variable">util</span><span class="token operator">=</span><span class="token number">99.49</span>%</code></pre>

<p>slat 表示submission latency，也就是发送这个IO给内核处理的提交时间花费。  （请求抵达内核的时间）<br>clat 是提交IO请求给内核之后到IO完成之间的时间，不包括submission latency。 （内核到块设备 ——&gt; 请求处理完成的时间）<br>bw Bandwidth  带宽<br>READ: 读取的速率</p>
<p>关于fio 几个参数的测试， 这是我目前见到测试最完整的一个：<br><a href="https://blog.csdn.net/get_set/article/details/108001674">https://blog.csdn.net/get_set/article/details/108001674</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, IO, FileSystem</tag>
      </tags>
  </entry>
  <entry>
    <title>快速启动一个 prometheus 和 grafana</title>
    <url>/2023/05/25/Linux/Linux_fast-create-prometheus-and-grafana/</url>
    <content><![CDATA[<p>快速创建一个可用的 prometheus 和 grafana 进行测试， 并将数据保留在当前的目录中， 在重启之后数据不会丢失： </p>
<ol>
<li><p>创建一个目录.</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/monitor
<span class="token function">mkdir</span> /opt/monitor/grafana
<span class="token function">mkdir</span> /opt/monitor/grafana_data
<span class="token function">mkdir</span> /opt/monitor/prometheus
<span class="token function">mkdir</span> /opt/monitor/prometheus_data
<span class="token function">touch</span> /opt/monitor/docker-compose.yaml</code></pre>
</li>
<li><p>创建docker-compose 文件</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">prometheus</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> prometheus
    <span class="token key atrule">image</span><span class="token punctuation">:</span> reg.liarlee.site/docker.io/prom/prometheus<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token comment"># - /opt/monitor/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml</span>
      <span class="token punctuation">-</span> /opt/monitor/prometheus_data<span class="token punctuation">:</span>/prometheus
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'--config.file=/etc/prometheus/prometheus.yml'</span>
      <span class="token punctuation">-</span> <span class="token string">'--storage.tsdb.path=/prometheus'</span>
      <span class="token punctuation">-</span> <span class="token string">'--web.console.libraries=/usr/share/prometheus/console_libraries'</span>
      <span class="token punctuation">-</span> <span class="token string">'--web.console.templates=/usr/share/prometheus/consoles'</span>
      <span class="token punctuation">-</span> <span class="token string">'--storage.tsdb.retention.time=90d'</span>
  <span class="token key atrule">grafana</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> grafana
    <span class="token key atrule">image</span><span class="token punctuation">:</span> reg.liarlee.site/docker.io/grafana/grafana<span class="token punctuation">-</span>oss<span class="token punctuation">:</span>main<span class="token punctuation">-</span>ubuntu
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /opt/monitor/grafana_data<span class="token punctuation">:</span>/var/lib/grafana
      <span class="token punctuation">-</span> /opt/monitor/grafana/datasource<span class="token punctuation">:</span>/etc/grafana/provisioning/datasources
      <span class="token comment"># - /opt/monitor/grafana/grafana.ini:/etc/grafana/grafana.ini</span>
      <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro
    <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">'472'</span></code></pre>
</li>
<li><p>准备基础配置文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> 
<span class="token function">docker</span> <span class="token function">cp</span> grafana:/etc/grafana/grafana.ini /opt/monitor/grafana/grafana.ini
<span class="token function">docker</span> <span class="token function">cp</span> prometheus:/etc/prometheus/prometheus.yml /opt/monitor/prometheus/prometheus.yaml

<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">472</span>:472 /opt/monitor/grafana_data
<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">472</span>:472 /opt/monitor/grafana

<span class="token function">chown</span> <span class="token parameter variable">-R</span> nobody:nobody /opt/monitor/prometheus_data
<span class="token function">chown</span> <span class="token parameter variable">-R</span> nobody:nobody /opt/monitor/prometheus

<span class="token function">docker</span> compose down --remove-orphans</code></pre>
</li>
<li><p>准备prometheus 作为默认的Datasource</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">touch /opt/monitor/grafana/datasource/datasource.yml
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token key atrule">datasources</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Prometheus
  <span class="token key atrule">type</span><span class="token punctuation">:</span> prometheus
  <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9090</span> 
  <span class="token key atrule">isDefault</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">access</span><span class="token punctuation">:</span> proxy
  <span class="token key atrule">editable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
</li>
<li><p>修改配置文件中需要的参数, 取消配置文件中的注释， 然后重启即可。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose down --remove-orphans <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> compose up <span class="token parameter variable">-d</span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker, Application, Prometheus, Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Fio 命令使用的说明</title>
    <url>/2022/04/19/Linux/Linux_fio_blktrace/</url>
    <content><![CDATA[<p>Fio 一些测试和思考， fio ，blktrace等等。</p>
<h3 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h3><p>  <a href="https://github.com/axboe/fio">https://github.com/axboe/fio</a><br>  <a href="https://tobert.github.io/post/2014-04-17-fio-output-explained.html">https://tobert.github.io/post/2014-04-17-fio-output-explained.html</a><br>  <a href="http://xiaqunfeng.cc/2017/07/12/fio-test-ceph/">http://xiaqunfeng.cc/2017/07/12/fio-test-ceph/</a><br>  <a href="https://fio.readthedocs.io/en/latest/fio_doc.html">https://fio.readthedocs.io/en/latest/fio_doc.html</a><br>  <a href="http://linuxperf.com/?p=156">http://linuxperf.com/?p=156</a></p>
<h3 id="命令和说明"><a href="#命令和说明" class="headerlink" title="命令和说明"></a>命令和说明</h3><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># fio test file defination</span>
<span class="token comment"># ini file format </span>
 <span class="token comment">; -- start job file --</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">size</span><span class="token punctuation">=</span><span class="token value attr-value">1G # 设置测试文件的大小</span>
<span class="token key attr-name">runtime</span><span class="token punctuation">=</span><span class="token value attr-value">30 # 设定运行时间， 如果运行时间之内已经完成了文件大小的写入则会保持文件大小和负载继续写。</span>
<span class="token key attr-name">bs</span><span class="token punctuation">=</span><span class="token value attr-value">4k # 块大小</span>
<span class="token key attr-name">numjobs</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 定义测试的进程数量 默认是1</span>
<span class="token key attr-name">direct</span><span class="token punctuation">=</span><span class="token value attr-value">1 # 是否绕过操作系统的Buffer缓冲区， 1 Enable</span>
<span class="token key attr-name">ioengine</span><span class="token punctuation">=</span><span class="token value attr-value">libaio # io引擎使用libaio模式, 查看可用IO引擎的命令</span> 
group_reporting # 汇总信息显示
thread # 使用单进程多线程的模型， 默认是使用多进程模型。
time_based # 用运行时间为基准， 如果时间没有到达指定的值就继续执行相同的操作， 直接到时间满足要求。

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job1</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">write</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job2</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">read</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job3</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">randwrite</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job4</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">randread</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">job5</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">rw</span><span class="token punctuation">=</span><span class="token value attr-value">randrw</span>
<span class="token comment">; -- end job file --</span></code></pre>

<h2 id="关于硬盘性能-Iostat"><a href="#关于硬盘性能-Iostat" class="headerlink" title="关于硬盘性能 Iostat"></a>关于硬盘性能 Iostat</h2><p>首先， 在man iostat的时候已经明确的提示了，iostat 的 svctm （也就是硬盘的servicetime）是一个不准确的值， 会在后续的版本中移除， 因为他所依赖的数据来源（&#x2F;proc&#x2F;diskstats）中，是从Block Level 出发来进行计算的， 所以svctm其实并不是IO控制器所需要的准确时间， 那么出现了两个问题， 我们能观察的数据是那个？ 以及背后的含义是什么?  </p>
<h3 id="调度算法-和-读写请求的合并"><a href="#调度算法-和-读写请求的合并" class="headerlink" title="调度算法 和 读写请求的合并"></a>调度算法 和 读写请求的合并</h3><p>内核会对IO的请求进行合并， 但是这个合并不是一直存在的， 反映到IOstat的指标是 rrqm&#x2F;s &amp; wrqm&#x2F;s,  这两个表示对于硬盘的读写请求中， 每秒合并的请求数量； 如果你去查看IO的调度算法， none 算法是完全不合并的， 所以这两列一直都是0.  </p>
<h3 id="队列的等待时间"><a href="#队列的等待时间" class="headerlink" title="队列的等待时间"></a>队列的等待时间</h3><p>iostat中的await一列， 表示请求的等待时间，正常的情况下应该比较低，那么究竟什么情况下才是性能不佳的表现？<br>await 每个I&#x2F;O的平均耗时是用await表示(blktrace command results: Q2C – 整个IO请求所消耗的时间(Q2I + I2D + D2C &#x3D; Q2C)，相当于iostat的await。)，包括了 IO请求在Kernel中的等待时间 + IO请求从内核出发处理完成回到内核的时间，也就是IO time + Service Time。<br>await 一般情况下应该小于10ms ， 如果没有或者比较大的情况下 ， 应该考虑负载的类型， 来衡量硬盘的负载水平。  </p>
<h3 id="Blktrace"><a href="#Blktrace" class="headerlink" title="Blktrace"></a>Blktrace</h3><p>一个I&#x2F;O请求进入block layer之后，可能会经历下面的过程：</p>
<pre><code>Q Remap: 可能被DM(Device Mapper)或MD(Multiple Device, Software RAID) remap到其它设备
G Split: 可能会因为I/O请求与扇区边界未对齐、或者size太大而被分拆(split)成多个物理I/O
I Merge: 可能会因为与其它I/O请求的物理位置相邻而合并(merge)成一个I/O
D 被IO Scheduler依照调度策略发送给driver
C 被driver提交给硬件，经过HBA、电缆（光纤、网线等）、交换机（SAN或网络）、最后到达存储设备，设备完成IO请求之后再把结果发回。
</code></pre>
<p>常见的状态切换 Q–G–I–D–C </p>
<pre class="language-r" data-language="r"><code class="language-r"><span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">2</span>     <span class="token number">0.000001080</span>  <span class="token number">7134</span>  Q   W <span class="token number">756856</span> <span class="token operator">+</span> <span class="token number">800</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">3</span>     <span class="token number">0.000004247</span>  <span class="token number">7134</span>  X   W <span class="token number">756856</span> <span class="token operator">/</span> <span class="token number">757368</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">4</span>     <span class="token number">0.000005806</span>  <span class="token number">7134</span>  G   W <span class="token number">756856</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">5</span>     <span class="token number">0.000008792</span>  <span class="token number">7134</span>  I   W <span class="token number">756856</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">6</span>     <span class="token number">0.000012844</span>  <span class="token number">7134</span>  G   W <span class="token number">757368</span> <span class="token operator">+</span> <span class="token number">288</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">7</span>     <span class="token number">0.000013202</span>  <span class="token number">7134</span>  I   W <span class="token number">757368</span> <span class="token operator">+</span> <span class="token number">288</span> <span class="token punctuation">[</span>dd<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">8</span>     <span class="token number">0.000031708</span>  <span class="token number">1830</span>  D   W <span class="token number">756856</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token punctuation">[</span>kworker<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span>H<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>        <span class="token number">9</span>     <span class="token number">0.000034250</span>  <span class="token number">1830</span>  D   W <span class="token number">757368</span> <span class="token operator">+</span> <span class="token number">288</span> <span class="token punctuation">[</span>kworker<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span>H<span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>       <span class="token number">10</span>     <span class="token number">0.001598439</span>  <span class="token number">7135</span>  C   W <span class="token number">756856</span> <span class="token operator">+</span> <span class="token number">512</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">259</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token number">0</span>       <span class="token number">11</span>     <span class="token number">0.001689880</span>  <span class="token number">7135</span>  C   W <span class="token number">757368</span> <span class="token operator">+</span> <span class="token number">288</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment"># 主，从设备号 ， 起始Sector 为0 ， 写几个， 时间 ， pid ， 状态 ， R/W ， 未知</span></code></pre>

<p>保留blktrace的结果为bin文件</p>
<pre class="language-r" data-language="r"><code class="language-r">blktrace <span class="token operator">-</span>d <span class="token operator">/</span>dev<span class="token operator">/</span>sdb</code></pre>

<p>使用blkparse 分析已经有的记录</p>
<pre class="language-r" data-language="r"><code class="language-r"><span class="token comment"># 记录性能数据 到 文件。</span>
root<span class="token operator">@</span>ip<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">235</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">|</span>⇒  blktrace <span class="token operator">-</span>d <span class="token operator">/</span>dev<span class="token operator">/</span>nvme0n1p1
<span class="token operator">^</span>C<span class="token operator">==</span><span class="token operator">=</span> nvme0n1p1 <span class="token operator">==</span><span class="token operator">=</span>
  CPU  <span class="token number">0</span><span class="token operator">:</span>                    <span class="token number">1</span> events<span class="token punctuation">,</span>        <span class="token number">1</span> KiB data
  CPU  <span class="token number">1</span><span class="token operator">:</span>                    <span class="token number">0</span> events<span class="token punctuation">,</span>        <span class="token number">0</span> KiB data
  Total<span class="token operator">:</span>                     <span class="token number">1</span> events <span class="token punctuation">(</span>dropped <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span> KiB data
<span class="token comment"># 每个cpu设备每个设备存储一个单独的文件。</span>
root<span class="token operator">@</span>ip<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">235</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">|</span>⇒  ll
total <span class="token number">4.0</span>K
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root <span class="token number">56</span> Nov  <span class="token number">4</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">55</span> nvme0n1p1.blktrace.<span class="token number">0</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root  <span class="token number">0</span> Nov  <span class="token number">4</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">55</span> nvme0n1p1.blktrace.<span class="token number">1</span>

root<span class="token operator">@</span>ip<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">235</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">|</span>⇒  blkparse <span class="token operator">-</span>i nvme0n1p1.blktrace.<span class="token number">0</span>
<span class="token comment"># 格式化分析的数据为bin。</span>
root<span class="token operator">@</span>ip<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">235</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">|</span>⇒  blkparse <span class="token operator">-</span>i nvme0n1p1 <span class="token operator">-</span>d nvme0n1p1.blktrace.bin
<span class="token comment"># 使用一个简易的图形方式分析结果。</span>
root<span class="token operator">@</span>ip<span class="token operator">-</span><span class="token number">172</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">235</span><span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">|</span>⇒  btt <span class="token operator">-</span>i nvme0n1p1.blktrace.bin</code></pre>

<h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><blockquote>
<p>mdadm 已经不怎么更新和开发了<br>默认推荐使用LVM<br>LVM 和 mdadm 在操作系统都是使用的Raid驱动（内核模块）。</p>
<p>其实也是可以使用btrfs ， 这个测试的结果是 btrfs 的实现和管理成本比 LVM 要少的多。 </p>
</blockquote>
<h2 id="相关的问题"><a href="#相关的问题" class="headerlink" title="相关的问题"></a>相关的问题</h2><p>如果说有一个性能的问题， IOPS达不到指定的数值， 思路？<br>首先查看队列深度是不是足够，看svctm时间长不长，看队列长度 </p>
<p>&#x2F;sys&#x2F;block&#x2F;sda&#x2F;nr_requests </p>
<h2 id="Iostat命令的理解"><a href="#Iostat命令的理解" class="headerlink" title="Iostat命令的理解"></a>Iostat命令的理解</h2><p>iostat -xkt 1<br>rrqm&#x2F;s wrqm&#x2F;s  - 读写请求的合并数量<br>r&#x2F;s w&#x2F;s - 读写请求数量<br>avgrq - 队列长度<br>await - 时延<br>util - 时间度量 ， 时间周期之内进行IO操作所占的比例。例如 1 秒的时间之内， 取样的点中有多少是在执行IO操作。</p>
<p>一个例子 ， 如果采样的周期为1s， 那么采样的范围之内 ， 前面的0.5秒有执行IO的操作， 后面的0.5秒没有执行任何的操作， 那么 最后 Util 现在的结果就是50% 。avgrq也是一直平均值， 在采样周期之内如果前后的状况不一致 也会进行平均。</p>
<p>一般情况下这个参数是准确的，但是大部分指标都是取决于监控取样周期的。</p>
<p>操作系统默认输出的块大小是 ： 256 ， 参数可见 ：<br>╰─# cat &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;max_sectors_kb<br>256</p>
<p>max_segments表示设备能够允许的最大段的数目。    – 这应该是一个内存或者buffer的分段指标。 （待定）<br>max_sectors_kb表示设备允许的最大请求大小。      – 可改 。<br>max_hw_sectors_kb表示单个请求所能处理的最大KB（硬约束） – 这个是上一个参数的Limit。  </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, EBS, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>buffer/cache 无法释放</title>
    <url>/2023/05/12/Linux/Linux_free-command-issue/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>看到了一个案例， 这个案例的问题是： 为什么我的buffer&#x2F;cache在echo 3 之后， 还是不能回收， 内存的占用很大。</p>
<p>命令如下： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-47-174 ~<span class="token comment"># free -h</span>
               total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:           <span class="token number">7</span>.5Gi       <span class="token number">1</span>.3Gi       <span class="token number">3</span>.5Gi       <span class="token number">2</span>.1Gi       <span class="token number">2</span>.6Gi       <span class="token number">3</span>.8Gi
Swap:             0B          0B          0B
root@ip-172-31-47-174 ~<span class="token comment"># echo 3 > /proc/sys/vm/drop_caches</span>
root@ip-172-31-47-174 ~<span class="token comment"># free -h</span>
               total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:           <span class="token number">7</span>.5Gi       <span class="token number">1</span>.3Gi       <span class="token number">3</span>.7Gi       <span class="token number">2</span>.1Gi       <span class="token number">2</span>.4Gi       <span class="token number">3</span>.9Gi
Swap:             0B          0B          0B
root@ip-172-31-47-174 ~<span class="token comment"># free</span>
               total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:         <span class="token number">7833520</span>     <span class="token number">1376608</span>     <span class="token number">3917368</span>     <span class="token number">2160524</span>     <span class="token number">2539544</span>     <span class="token number">4059944</span>
Swap:              <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span></code></pre>

<h2 id="分析和答案"><a href="#分析和答案" class="headerlink" title="分析和答案"></a>分析和答案</h2><p><strong>分析：</strong> 开始的时候我并没有发现具体有什么问题， 认为是应用程序确实无法回收cache的空间，因为正在使用。</p>
<p>例如Firefox启动的时候就会使用Cache的空间来进行数据的存储。  </p>
<p><strong>答案：</strong> 第二天看到了大佬的更新， 这个问题的原因是： <strong>内核会将 shared 的空间， 一并统计在 buffer&#x2F;cache</strong> 中， 所以free命令的输出是正常的， 实际cache已经释放了一部分，没有大幅度变化的原因是因为那部分是 shmem的空间， 所以。。。释放不掉。  </p>
<hr>
<p>初见这个结论是有些震惊的， 我一直都认为 shared 字段里面统计的内存是独立的， 仔细看看上面的命令， 确实 shared空间基本上与 buffer&#x2F;cache的空间是差不多的。  </p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>一部分信息：   </p>
<ul>
<li><p>OS: Arch Linux x86_64  </p>
</li>
<li><p>Kernel: 6.3.1-arch2-1</p>
</li>
</ul>
<ul>
<li>Software Version: free from procps-ng 3.3.17</li>
</ul>
<p>测试的方法， 我只是尝试证明free命令的统计方式变化， 所以直接简化了， 直接扩大ShareMemory。  </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接创建一个临时的目录</span>
<span class="token comment"># 其实直接使用 /dev/shm 也行， 但是可用空间会被限制到 物理内存的一半。</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /mnt/tmpfs/ 

<span class="token comment"># 挂载到 /mnt/tmpfs/</span>
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs <span class="token parameter variable">-o</span> <span class="token assign-left variable">size</span><span class="token operator">=</span>5000m shared /mnt/tmpfs/

<span class="token comment"># 创建一个文件占用那个部分的内存。</span>
<span class="token function">sudo</span> fallocate <span class="token parameter variable">-l</span> 4G /mnt/tmpfs/file</code></pre>

<p>按照上面的步骤测试， 可以发现 share memory 确实也同时被统计在了 buffer&#x2F;cache 里面， 与客户的现象完全一致。这个命令确实就是这样工作的。  </p>
<p>按照这个思路应该看看meminfo 以及 内核的文档，Mark一下准备开始走一遍这个思路。   </p>
<p>立刻查看free命令的manpage， 发现果然没有更新， 说明摘要： </p>
<blockquote>
<p>shared<br>Memory used (mostly) by tmpfs (Shmem in &#x2F;proc&#x2F;meminfo)</p>
<p>buffers<br>Memory used by kernel buffers (Buffers in &#x2F;proc&#x2F;meminfo)</p>
<p>cache<br>Memory  used  by  the  page  cache  and  slabs  (Cached  and SReclaimable in &#x2F;proc&#x2F;meminfo)</p>
<p>buff&#x2F;cache<br>Sum of buffers and cache</p>
</blockquote>
<p>看 &#x2F;proc&#x2F;meminfo ， 发现确实是取值取到了 shmem， 这个值是对的， 现在的问题就是为什么内核提供了这样的一个值。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ei</span> <span class="token string">"mem|cache|buffer|active"</span>
MemTotal:        <span class="token number">7833520</span> kB
MemFree:         <span class="token number">4417692</span> kB
MemAvailable:    <span class="token number">4615060</span> kB
Buffers:               <span class="token number">0</span> kB
Cached:          <span class="token number">2550368</span> kB  <span class="token comment"># 这个的统计就。。。。 free是对的</span>
SwapCached:            <span class="token number">0</span> kB
Active:           <span class="token number">830560</span> kB
Inactive:        <span class="token number">2397160</span> kB
Active<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:     <span class="token number">444220</span> kB
Inactive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:  <span class="token number">2385016</span> kB
Active<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:     <span class="token number">386340</span> kB
Inactive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:    <span class="token number">12144</span> kB
Shmem:           <span class="token number">2151884</span> kB  <span class="token comment"># 这个是创建的文件大小，转换成文件的大小， 差不多是 2G 左右。</span></code></pre>

<p>现在的问题变成， 具体是什么时候 meminfo里面的值变更了统计方式呢？ 为什么这样统计呢？ </p>
<p>不会找具体是什么时候commit的变更， 直接看代码吧。 希望我看的是对的。 </p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// https://elixir.bootlin.com/linux/latest/source/fs/proc/meminfo.c</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">meminfo_proc_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">seq_file</span> <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  cached <span class="token operator">=</span> <span class="token function">global_node_page_state</span><span class="token punctuation">(</span>NR_FILE_PAGES<span class="token punctuation">)</span> <span class="token operator">-</span>
              <span class="token function">total_swapcache_pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">.</span>bufferram<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        cached <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"MemTotal:       "</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>totalram<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"MemFree:        "</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>freeram<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"MemAvailable:   "</span><span class="token punctuation">,</span> available<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Buffers:        "</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>bufferram<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Cached:         "</span><span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"SwapCached:     "</span><span class="token punctuation">,</span> <span class="token function">total_swapcache_pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Active:         "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_ACTIVE_ANON<span class="token punctuation">]</span> <span class="token operator">+</span>
             pages<span class="token punctuation">[</span>LRU_ACTIVE_FILE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Inactive:       "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_INACTIVE_ANON<span class="token punctuation">]</span> <span class="token operator">+</span>
             pages<span class="token punctuation">[</span>LRU_INACTIVE_FILE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Active(anon):   "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_ACTIVE_ANON<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Inactive(anon): "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_INACTIVE_ANON<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Active(file):   "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_ACTIVE_FILE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Inactive(file): "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_INACTIVE_FILE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Unevictable:    "</span><span class="token punctuation">,</span> pages<span class="token punctuation">[</span>LRU_UNEVICTABLE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">show_val_kb</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Mlocked:        "</span><span class="token punctuation">,</span> <span class="token function">global_zone_page_state</span><span class="token punctuation">(</span>NR_MLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>

<p>可以看到从一个sysinfo 的 struct 取出, 然后进行计算， 存储在cached 变量里面，然后输出： </p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; https:&#x2F;&#x2F;elixir.bootlin.com&#x2F;linux&#x2F;latest&#x2F;source&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;sysinfo.h#L14

  __kernel_ulong_t bufferram;	&#x2F;* Memory used by buffers *&#x2F;</code></pre>

<p>好了 我看不动了，Cached 的最后结果： os所有可用的文件页面 - SwapCached的数值 - Buffers的数值，大概应该是这个意思， 按照这么算的话， 确实会加入 shmem 的部分，<a href="https://lore.kernel.org/all/YS0Eq+tNe4Pr7O0X@casper.infradead.org/T/">邮件归档以及解释</a></p>
<blockquote>
<p>That’s a reasonable position to take.</p>
<p>Another point of view is that everything in tmpfs is part of the page cache and can be written out to swap, so keeping it as part of Cached is not misleading.</p>
<p>I can see it both ways, and personally, I’d lean towards clarifying<br>the documentation about how shmem is accounted rather than changing how the memory usage is reported.</p>
</blockquote>
<p>这是上面的邮件链接中的一部分， 解释了为什么将 shmem 计算到 Cached 中的原因，看起来现在应该由一个新的指标数值来处理这个了。</p>
<p>更多的部分看参考链接吧，我顺便看了讲解，大佬讲的清楚。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/586107891">https://zhuanlan.zhihu.com/p/586107891</a></p>
<p><a href="https://www.cnblogs.com/tsecer/p/16290025.html">https://www.cnblogs.com/tsecer/p/16290025.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(1)</title>
    <url>/2019/07/21/Linux/Linux_k8s-basic-1/</url>
    <content><![CDATA[<p>Kubernetes基础知识及笔记。</p>
<h1 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h1><p>容器的出现以及容器编排引擎出现的原因。</p>
<h2 id="容器编排工具"><a href="#容器编排工具" class="headerlink" title="容器编排工具"></a>容器编排工具</h2><p>容器最早的模型时LXC+Linux Namespace。容器的出现导致了我们需要对容器进行管理，单机的管理不能满足业务的需要，于是快速衍生出了多种不同的容器编排工具。<br>Docker提供的工具：</p>
<ol>
<li>docker compose</li>
<li>docker swarm </li>
<li>docker machine</li>
</ol>
<p>IDC的操作系统：</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Apache_Mesos">mesos(资源分配工具)</a>, <a href="https://en.wikipedia.org/wiki/Apache_Mesos#Marathon">marathron(面向容器编排的框架)</a></li>
</ol>
<p>Google的工具：</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Kubernetes">Kubernetes</a></li>
</ol>
<p>当一个产品可以占据35%以上的份额就已属于自然垄断。k8s现在已经处于垄断地位。<br>透过容器所产生的衍生概念有: DevOps, MicroServices, BlockChain.<br>开发模式的开发：<a href="https://zh.wikipedia.org/wiki/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B">瀑布模型</a>，进化到了敏捷开发，精益开发，到现在的DevOps.<br>发布线上的做法：<a href="https://www.jianshu.com/p/022685baba7d">蓝绿部署，灰度部署，金丝雀(canary)</a><br>DevOps几个简单的名词解释：</p>
<ul>
<li><p>CI： 持续集成 - 持续集成通俗一些就是<strong>快速提交代码，快速变更需求，快速合并代码</strong>。</p>
</li>
<li><p>CD： 持续部署 - 持续部署是指在代码提交变更之后，快速进行部署及测试；传统的代码在提交后需要运维人员手动部署，持续部署其实<strong>就是缩短的部署所需要的步骤和周期，尽可能将部署操作交由自动化完成。</strong></p>
</li>
<li><p>CD： 持续交付 - 让软件产品的<strong>产出过程在一个短周期内完成</strong>，以保证软件可以稳定、持续的保持在随时可以发布的状态。</p>
<p>有时候，持续交付也与持续部署混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。</p>
</li>
</ul>
<h2 id="云原生的概念"><a href="#云原生的概念" class="headerlink" title="云原生的概念"></a>云原生的概念</h2><p><a href="https://en.wikipedia.org/wiki/Native_cloud_application">Native Cloud Application</a> To Wikipedia.</p>
<blockquote>
<p> A <strong>native cloud application</strong> (NCA) is a type of computer software that natively utilizes services and infrastructure from cloud computing providers.</p>
</blockquote>
<p>例如：当容器中的nginx需要变更项目文件的时候，容器的环境已经决定了不太容易对项目的变更,早期的程序设计使用配置文件进行定义。因此，最好的办法是可以通过传递宿主机环境变量的方式对镜像进行设置，当项目有变更的时候直接通过读取环境变量的方式对容器内项目的数据进行配置和更改。基于这种思路设计出来的容器或者软件，叫做云原生应用(Native Cloud Application)。</p>
<h2 id="K8s的前世"><a href="#K8s的前世" class="headerlink" title="K8s的前世"></a>K8s的前世</h2><p>k8s本来开始是Google内部的Brog系统，Google在Docker被发现了之后，快速的使用Go语言重写了Brog系统，借鉴了Brog的逻辑和设计，所有的代码进行了全面的重构。</p>
<p><a href="https://github.com/kubernetes/kubernetes">Kubernetes项目的Github页面</a></p>
<h2 id="K8s的特点"><a href="#K8s的特点" class="headerlink" title="K8s的特点"></a>K8s的特点</h2><ul>
<li>自动装箱</li>
<li>自我修复</li>
<li>水平扩展</li>
<li>服务发现与负载均衡</li>
<li>自动发布和回滚</li>
<li>密钥的配置和管理 – 将配置定义在k8s的对象中，通过k8s在容器启动的时候自动传递环境变量到容器中。<ul>
<li>存储编排 – 可自动创建存储卷供容器需要的自动管理及使用</li>
</ul>
</li>
<li>批量处理执行</li>
</ul>
<h2 id="K8s的工作流程及逻辑"><a href="#K8s的工作流程及逻辑" class="headerlink" title="K8s的工作流程及逻辑"></a>K8s的工作流程及逻辑</h2><ol>
<li>Kubernetes组合多台主机的资源，<strong>整合成资源池</strong>，并<strong>统一对外提供计算、存储等能力</strong>的集群。k8s的集群是Master\Node模型，具有<strong>角色分类</strong>，需要部署master节点及node节点。master节点一般有三个，node节点理论上可以无限增加。</li>
<li>k8s的简要工作流程： 收到请求后，<em>Master节点</em>上的<strong>Scheduler</strong>用来收集<em>所有Node</em>上的可用资源信息，并通过<strong>API Server</strong>告知资源充足的<em>Node</em>启动相关的容器；<em>Node</em>收到请求会查找需要的镜像，如果本地不存在从<em>Docker Registery</em>上面拉取相应的镜像进行所请求容器的启动。</li>
<li>k8s可将 <em>Master节点 + Node节点 + Registery节点</em> 同时托管在k8s自身的环境中，也就是直接托管在docker虚拟化层上，因此我们可以通过kubeadm等相关的工具将所有的组件使用容器的方式进行管理和调度。</li>
</ol>
<h1 id="Master上的主要组件及服务"><a href="#Master上的主要组件及服务" class="headerlink" title="Master上的主要组件及服务"></a>Master上的主要组件及服务</h1><ul>
<li><p>API Server # 负责<strong>提供对外的及对内的服务接口</strong></p>
</li>
<li><p>Scheduler # 选出适合部署容器的node节点，<strong>两级筛选</strong>：选出所有可以使用的node，在所有合规的node上进行最优选择，选择取决于调度算法。</p>
</li>
<li><p>Controller-Manager # <strong>检测容器的状态</strong>，如果出现异常或不符合定义的状态，就向API申请重新部署相关容器。</p>
</li>
</ul>
<h1 id="Node上的主要服务及组件"><a href="#Node上的主要服务及组件" class="headerlink" title="Node上的主要服务及组件"></a>Node上的主要服务及组件</h1><ol>
<li>Kube-Proxy</li>
<li>容器引擎，docker</li>
<li>Kubelet</li>
<li>Flannel</li>
</ol>
<h2 id="逻辑组件：Pod"><a href="#逻辑组件：Pod" class="headerlink" title="逻辑组件：Pod"></a>逻辑组件：Pod</h2><p>Node上可以运行及调度逻辑单元pod，pod是k8s的一个逻辑概念，真实运行起来的还是Container，只是k8s为了方便管理，将一个或多个Container封装了成了逻辑上的Pod，打上了相应的标签，使得可以通过Seletor对不同的Pod进行分类管理和选择。Pod是模拟了传统的虚拟机模式(相同主机上的Pod可以使用宿主机的lo进行网络通信),使得可以构建精细的模型。</p>
<p>一个pod中可以有多个容器，共享底层名称空间<strong>net,UTS,IPC</strong>,另外三个互相隔离<strong>user,mnt,pid</strong>. </p>
<h4 id="Sidecar的概念"><a href="#Sidecar的概念" class="headerlink" title="Sidecar的概念"></a>Sidecar的概念</h4><p>一般来讲,一个Pod只放入一个容器，如果我们需要放置多个容器，一般为一个主要的一个辅助的，辅助的叫做 sidecar.例如主程序运行在一个容器中，收集日志的程序放在sidecar中。 </p>
<h4 id="Pod的标签选择"><a href="#Pod的标签选择" class="headerlink" title="Pod的标签选择"></a>Pod的标签选择</h4><p>Pod已经被附加了一些<strong>元数据</strong>，创建完成的Pod可以通过<strong>标签的数值</strong>直接识别Pod的类别。k8s使用<strong>标签选择器selector</strong>来过滤符合条件的资源。所有的对象都可以通过标签选择器进行选择。</p>
<h3 id="Pod的不完全分类"><a href="#Pod的不完全分类" class="headerlink" title="Pod的不完全分类"></a>Pod的不完全分类</h3><ul>
<li><strong>自主式pod</strong> # 自行控制自己的生命周期</li>
<li><strong>控制器管理的pod</strong> # 通过管理器可管理生命周期的pod</li>
</ul>
<h3 id="k8s使用的pod的控制器"><a href="#k8s使用的pod的控制器" class="headerlink" title="k8s使用的pod的控制器"></a>k8s使用的pod的控制器</h3><ul>
<li>ReplicationController - 最早提供的组件，支持滚动更新和回滚，最早只有一个。<strong>现在已经不再使用。</strong></li>
<li>ReplicaSet - 新的工具替代了原始的控制器，但是不直接使用，直接使用的是Deployment来管理无状态的pod。</li>
<li>StatefulSet - 对有状态的Pod进行管理。</li>
<li>DaemonSet - 控制容器的进程为守护进程的控制器，每个Node上都会运行一个，无法指定副本的数量。一般用于信息和日志的收集。</li>
<li>Job, Cronjob - 作业管理， 周期性作业管理。</li>
<li>HPA - HorizontalPodAutoscaler</li>
</ul>
<h1 id="服务发现的概念"><a href="#服务发现的概念" class="headerlink" title="服务发现的概念"></a>服务发现的概念</h1><p>为了能快速管理新启动的pod，在pod和用户之间添加了<strong>逻辑的中间层</strong>，pod启动后需要在service中注册自己的信息,客户端需要相关的服务的时候从service取得相关的信息，完成服务的管理。service是<strong>逻辑组件</strong>，通过<strong>iptables的DNAT来实现</strong>相关的service的功能。</p>
<p>其实服务发现相当于消息中间件，有Pods(生产者)来注册，有用户(消费者)来消费，只是不会被消费掉。</p>
<h2 id="Kube-proxy的作用"><a href="#Kube-proxy的作用" class="headerlink" title="Kube-proxy的作用"></a>Kube-proxy的作用</h2><p>一旦发现了service的改变，反映到Iptables上，同时向API Server报告。 </p>
<h1 id="Kubernetes的安装部署"><a href="#Kubernetes的安装部署" class="headerlink" title="Kubernetes的安装部署"></a>Kubernetes的安装部署</h1><p>通过kubeadm工具进行安装及部署，部署的过程其实不复杂，只是镜像的拉取麻烦了一些，记录了一些简单的步骤和问题。<br>安装的时候启动了三个虚拟机，一台虚拟机作为Master节点，其他的两台作为Node节点，所有的机器都需要关闭firewalld，k8s会默认托管iptables的相关规则。安装采用k8s自托管的方式，结构如下，列出了在每个节点上必须运行的服务和容器：  </p>
<table>
<thead>
<tr>
<th>master</th>
<th>Node1</th>
<th>Node2</th>
</tr>
</thead>
<tbody><tr>
<td>Kubelet</td>
<td>Kubelet</td>
<td>Kubelet</td>
</tr>
<tr>
<td>Pause</td>
<td>Pause</td>
<td>Pause</td>
</tr>
<tr>
<td>Flannel</td>
<td>Flannel</td>
<td>Flannel</td>
</tr>
<tr>
<td>Kube-Proxy</td>
<td>Kube-Proxy</td>
<td>Kube-Proxy</td>
</tr>
<tr>
<td>API Server</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Schedular</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Controller-manager</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Coredns</td>
<td></td>
<td></td>
</tr>
<tr>
<td>etcd</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>机器的信息如下：  </p>
<table>
<thead>
<tr>
<th>IP-ADDRESS</th>
<th>HOSTNAME</th>
<th>ROLES</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.229.144</td>
<td>master.docker</td>
<td>master</td>
</tr>
<tr>
<td>192.168.229.145</td>
<td>node1.docker</td>
<td>node</td>
</tr>
<tr>
<td>192.168.229.146</td>
<td>node2.docker</td>
<td>node</td>
</tr>
</tbody></table>
<h2 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h2><p>这里记录一下所有机器都需要安装的环境及软件。</p>
<ol>
<li>编辑hostname<br> <code>vim /etc/hostname</code></li>
<li>关闭firewalld<br> <code>systemctl mask firewalld</code></li>
<li>关闭selinux<br> <code>sudo sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/&#39; /etc/selinux/config</code></li>
<li>关闭Swap分区, 注释掉swap的相关行，或者在安装的时候默认不分区即可。<br> <code>vim /etc/fstab </code></li>
<li>配置docker-ce，kubernetes相关软件源,从阿里云直接配置到本地的机器上。 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kubernetes部分</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo</span>
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF</span>

<span class="token comment"># docker -ce部分</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun</code></pre></li>
<li>同步镜像仓库，从docker-ce源安装docker-ce&#x2F;docker-cli&#x2F;containerd；其实可以关闭gpgcheck，并将其他同步失败的源关闭即可，我自己只是为了做学习用途，关闭了fedora的update源，总是同步失败耽误我的时间。 <pre class="language-bash" data-language="bash"><code class="language-bash">dnf makecache <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-cli containerd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
systemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> </code></pre></li>
<li>从kubernetes源安装kubeadm\kubectl\kubernetes-cni\kubelet四个组件。 <pre class="language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> - y kubeadm kubectl kubelet kubernetes-cni <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
systemctl start kubelet <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
systemctl <span class="token builtin class-name">enable</span> kubelet</code></pre>
 四个组件的用途分别是：<ol>
<li>kubeadm 用来进行所有节点的部署及初始化。</li>
<li>kubectl 集群的cli接口。</li>
<li>kubelet 每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况。</li>
<li>kubernetes-cni cni网络规范，通过cni的框架可以通过插件的方式对k8s集群间的网络进行管理，常见的是flannal。</li>
</ol>
</li>
<li>查看所有节点的时间是否一致<pre class="language-none"><code class="language-none">for i in master, node1, node2;do echo $i &amp;&amp; date;done &amp;&amp; hostname &amp;&amp; date</code></pre></li>
<li>接下来就是不同节点了，部署的方式也不同，分开说明。</li>
</ol>
<h2 id="Master的初始化"><a href="#Master的初始化" class="headerlink" title="Master的初始化"></a>Master的初始化</h2><ol>
<li><p>准备镜像,google镜像访问不到，所以我找到了一个使用阿里云的解决方案。可以先将镜像拉到本地，然后再对master节点进行初始化。镜像的版本是可以手动更改和指定的。</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 列出需要的镜像列表，记录下来。</span>
kubeadm config images list

<span class="token comment"># 2. 建立一个bash脚本</span>
<span class="token assign-left variable">images</span><span class="token operator">=</span><span class="token punctuation">(</span>  
  kube-apiserver:v1.12.1
  kube-controller-manager:v1.12.1
  kube-scheduler:v1.12.1
  kube-proxy:v1.12.1
  pause:3.1
  	etcd:3.2.24
coredns:1.2.2
 <span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">imageName</span> <span class="token keyword">in</span> <span class="token variable">$&#123;images<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="token variable">$imageName</span>
  <span class="token function">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="token variable">$imageName</span> k8s.gcr.io/<span class="token variable">$imageName</span>
  <span class="token function">docker</span> rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="token variable">$imageName</span>
<span class="token keyword">done</span>
<span class="token comment"># 3. 运行脚本，等待镜像导入本地的docker存储中。</span></code></pre>
</li>
<li><p>查看节点的所有image已经正确的拉取到了本地即可</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span>$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
k8s.gcr.io/kube-proxy                v1.15.0             d235b23c3570        <span class="token number">4</span> weeks ago         <span class="token number">82</span>.4MB
k8s.gcr.io/kube-apiserver            v1.15.0             201c7a840312        <span class="token number">4</span> weeks ago         207MB
k8s.gcr.io/kube-controller-manager   v1.15.0             8328bb49b652        <span class="token number">4</span> weeks ago         159MB
k8s.gcr.io/kube-scheduler            v1.15.0             2d3813851e87        <span class="token number">4</span> weeks ago         <span class="token number">81</span>.1MB
quay.io/coreos/flannel               v0.11.0-amd64       ff281650a721        <span class="token number">5</span> months ago        <span class="token number">52</span>.6MB
k8s.gcr.io/coredns                   <span class="token number">1.3</span>.1               eb516548c180        <span class="token number">6</span> months ago        <span class="token number">40</span>.3MB
k8s.gcr.io/etcd                      <span class="token number">3.3</span>.10              2c4adeb21b4f        <span class="token number">7</span> months ago        258MB
k8s.gcr.io/pause                     <span class="token number">3.1</span>                 da86e6ba6ca1        <span class="token number">19</span> months ago       742kB</code></pre>
</li>
<li><p>kubeadm init命令进行集群初始化</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm init --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16 --service-cidr<span class="token operator">=</span><span class="token number">10.96</span>.0.0/12 
<span class="token comment"># --pod-network-cidr 是指明了flannel的ip地址范围,这个是集群的Node网络，负责Node之间通信的网络。</span>
<span class="token comment"># --service-cidr=指明了容器建立时直接分配的ip地址，这个是集群的Pod网络，负责Pod之间通信的网络。</span></code></pre>
</li>
<li><p>使用命令查看集群节点的状态</p>
<p> 这个信息不是刚部署完成的信息，只是举个例子展示一下效果。</p>
<p> <code>kubectl get pods -n kube-system</code> 命令可以获取<strong>集群名称空间kube-system内</strong>的所有pod的信息；<br> <code>kubectl get nodes</code>和<code>kubectl get nodes -o wide</code> 可以显示所有节点的信息；</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash">  <span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n kube-system</span>
  NAME                                    READY   STATUS    RESTARTS   AGE
  coredns-5c98db65d4-m5gj8                <span class="token number">1</span>/1     Running   <span class="token number">12</span>         3d3h
  coredns-5c98db65d4-nmdzx                <span class="token number">1</span>/1     Running   <span class="token number">12</span>         3d3h
  etcd-master.docker                      <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  kube-apiserver-master.docker            <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  kube-controller-manager-master.docker   <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  kube-flannel-ds-amd64-fdcr9             <span class="token number">1</span>/1     Running   <span class="token number">3</span>          3d3h
  kube-flannel-ds-amd64-hqwtr             <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2d1h
  kube-flannel-ds-amd64-lqtjc             <span class="token number">1</span>/1     Running   <span class="token number">4</span>          3d3h
  kube-proxy-k8vcz                        <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  kube-proxy-m6j4m                        <span class="token number">1</span>/1     Running   <span class="token number">2</span>          2d1h
  kube-proxy-ww2z9                        <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  kube-scheduler-master.docker            <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3d3h
  
  <span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>
NAME            STATUS   ROLES    AGE    VERSION
  master.docker   Ready    master   3d3h   v1.15.0
  node1.docker    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   3d3h   v1.15.0
  node2.docker    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   2d1h   v1.15.1
  
  <span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes -o wide</span>
  NAME            STATUS   ROLES    AGE    VERSION   INTERNAL-IP       EXTERNAL-IP   OS-IMAGE                     KERNEL-VERSION          CONTAINER-RUNTIME
  master.docker   Ready    master   3d4h   v1.15.0   <span class="token number">192.168</span>.229.144   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Fedora <span class="token number">30</span> <span class="token punctuation">(</span>Server Edition<span class="token punctuation">)</span>   <span class="token number">5.0</span>.9-301.fc30.x86_64   docker://19.3.0
  node1.docker    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   3d3h   v1.15.0   <span class="token number">192.168</span>.229.145   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Fedora <span class="token number">30</span> <span class="token punctuation">(</span>Server Edition<span class="token punctuation">)</span>   <span class="token number">5.0</span>.9-301.fc30.x86_64   docker://19.3.0
  node2.docker    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   2d1h   v1.15.1   <span class="token number">192.168</span>.229.146   <span class="token operator">&lt;</span>none<span class="token operator">></span>        Fedora <span class="token number">30</span> <span class="token punctuation">(</span>Server Edition<span class="token punctuation">)</span>   <span class="token number">5.0</span>.9-301.fc30.x86_64   docker://19.3.0</code></pre></li>
</ol>
<h2 id="Node节点加入集群"><a href="#Node节点加入集群" class="headerlink" title="Node节点加入集群"></a>Node节点加入集群</h2><p>在Node节点上，将节点加入集群，将需要的镜像导入。</p>
<ol>
<li><p>kubeadm join将节点加入到集群中，同时在master上注册节点的信息。<br> 使用kubeadm join将节点注册到master上,给出master上生成的token，指定API Server的IP地址，指出ca证书的hash就可以将节点加入集群并初始化</p>
 <pre class="language-none"><code class="language-none">kubeadm join --token jj10e9.7robjkn1202au8a4 192.168.229.144:6443 --discovery-token-ca-cert-hash sha256:452775d08cca2523f36b1d41101856b3d90f469a39bf7ccdd5bf45150fbff94d</code></pre></li>
<li><p>使用docker save 在<em>master节点</em>上保存下来kube-proxy\kube-pause\flannel镜像</p>
<pre class="language-none"><code class="language-none">docker save &gt; .&#x2F;kube-proxy.tar 
docker save &gt; .&#x2F;kube-pause.tar
docker save &gt; .&#x2F;flannel.tar</code></pre></li>
<li><p>使用docker load 在<em>所有的node节点上</em>导入kube-proxy\kube-pause\flannel镜像</p>
<pre class="language-none"><code class="language-none">docker load &lt; .&#x2F;kube-proxy.tar
docker load &lt; .&#x2F;kube-pause.tar
docker load &lt; .&#x2F;flannel.tar</code></pre></li>
<li><p>重启每个节点上的kubelet服务，重启之后会自动加载并启动相关的image<br><code>systemctl restart kubelet.service</code></p>
</li>
<li><p>生成新的节点token</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">   <span class="token comment"># 生成新的token	</span>
   <span class="token comment"># kubeadm token create token的有效期只有24h，超过时间就需要重新生成。</span>
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubeadm token create</span>
jj10e9.7robjkn1202au8a4

<span class="token comment"># 查看所有可用的token</span>
<span class="token comment"># kubeadm token list命令用来查看现在节点的链接需要的认证信息</span>
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubeadm token list</span>
TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA <span class="token environment constant">GROUPS</span>
jj10e9.7robjkn1202au8a4   23h       <span class="token number">2019</span>-07-24T17:14:56+08:00   authentication,signing   <span class="token operator">&lt;</span>none<span class="token operator">></span>        system:bootstrappers:kubeadm:default-node-token</code></pre></li>
<li><p>重新查看节点的ID</p>
 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取ca证书sha256编码hash值</span>
<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span>$ openssl x509 <span class="token parameter variable">-pubkey</span> <span class="token parameter variable">-in</span> /etc/kubernetes/pki/ca.crt <span class="token operator">|</span> openssl rsa <span class="token parameter variable">-pubin</span> <span class="token parameter variable">-outform</span> der <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">|</span> openssl dgst <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-hex</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.* //'</span>
452775d08cca2523f36b1d41101856b3d90f469a39bf7ccdd5bf45150fbff94d</code></pre></li>
</ol>
<h1 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成"></a>部署完成</h1>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(2)</title>
    <url>/2019/07/23/Linux/Linux_k8s-basic-2/</url>
    <content><![CDATA[<p>Kubernetes的基本使用命令。</p>
<p>对控制命令进行分类整理：</p>
<h1 id="查看k8s整体状态的命令"><a href="#查看k8s整体状态的命令" class="headerlink" title="查看k8s整体状态的命令"></a>查看k8s整体状态的命令</h1><ol>
<li>kubectl describe node node1.docker<br> 查看node的详细信息</li>
<li>kubectl version<br> 查看kube的版本信息，同时显示客户端的版本及服务端的版本</li>
<li>kubectl cluster-info<br> 查看kube的集群信息，master节点的所在地址及kubeDNS的所在地址</li>
</ol>
<h1 id="手动运行Pods的命令"><a href="#手动运行Pods的命令" class="headerlink" title="手动运行Pods的命令"></a>手动运行Pods的命令</h1><ol start="4">
<li>kubectl run nginx –image&#x3D;nginx –replicas&#x3D;5<br> 启动5个nginx的pods</li>
<li>kubectl run nginx –image&#x3D;nginx –port:80 –replicas&#x3D;5 –dry-run&#x3D;true<br> 启动5个nginx的pod的测试，但不执行改变，并expose端口80</li>
</ol>
<h1 id="查看Pods的命令"><a href="#查看Pods的命令" class="headerlink" title="查看Pods的命令"></a>查看Pods的命令</h1><ol start="6">
<li>kubectl get pods<br> 列出所有节点正在运行的pod的状态信息</li>
<li>kubectl get deployment<br> 列出所有的deployment控制器的信息，<strong>所有的pod属于cni0桥，不属于docker桥</strong></li>
</ol>
<h1 id="删除单独一个Pods的命令"><a href="#删除单独一个Pods的命令" class="headerlink" title="删除单独一个Pods的命令"></a>删除单独一个Pods的命令</h1><ol start="8">
<li>kubectl delete pods hayden-nginx-6dd3ffd4c5-ww7mk<br>删除一个指定的pod</li>
</ol>
<h1 id="手动建立Pods并对外发布的命令"><a href="#手动建立Pods并对外发布的命令" class="headerlink" title="手动建立Pods并对外发布的命令"></a>手动建立Pods并对外发布的命令</h1><ol start="9">
<li>kubectl expose deployment hayden-nginx –type&#x3D;[{ClusterIP},NodePort,LoadBalancer,ExternalName]  –name&#x3D;nginx-service –target-port&#x3D;80 –protocol&#x3D;TCP<br>创建一个新的service，将内部的通信以service的形式对外交付</li>
</ol>
<h1 id="查看svc状态的命令"><a href="#查看svc状态的命令" class="headerlink" title="查看svc状态的命令"></a>查看svc状态的命令</h1><ol start="10">
<li>kubectl get svc<br>查看service的状态</li>
</ol>
<h1 id="查看属于某个名称空间的命令"><a href="#查看属于某个名称空间的命令" class="headerlink" title="查看属于某个名称空间的命令"></a>查看属于某个名称空间的命令</h1><ol start="11">
<li>kubectl get nodes -n kube-system -o wide<br>查看属于kube-system的节点的信息</li>
<li>kubectl get svc -n kube-system -o wide<br>查看属于kube-system的服务的信息</li>
</ol>
<h1 id="从不重启Pods的设置"><a href="#从不重启Pods的设置" class="headerlink" title="从不重启Pods的设置"></a>从不重启Pods的设置</h1><ol start="13">
<li>kubectl run t-centos –image&#x3D;centos -it –restart&#x3D;Never –replicas&#x3D;1<br>启动1个普通的容器作为客户端进行服务的访问</li>
<li>kubectl describe svc nginx-service<br>查看指定服务的详细信息</li>
<li>kubectl get nodes –show-labels<br>查看节点的标签</li>
</ol>
<h1 id="对svc进行编辑和修改"><a href="#对svc进行编辑和修改" class="headerlink" title="对svc进行编辑和修改"></a>对svc进行编辑和修改</h1><ol start="16">
<li>kubectl edit svc nginx-service<br>编辑一个service的属性，命令打开vim的编辑界面进行配置文件的更改</li>
<li>kubectl delete svc nginx-service<br>删除一个service</li>
<li>kubectl get deployment -w<br>长时间监控一个控制器的状态改变</li>
</ol>
<h1 id="对Pods的升级和回滚"><a href="#对Pods的升级和回滚" class="headerlink" title="对Pods的升级和回滚"></a>对Pods的升级和回滚</h1><ol start="19">
<li>kubectl set image deployment hayden-nginx hayden-nginx&#x3D;nginx:latest<br>对容器指定其他的镜像进行动态的升级及更新</li>
<li>kubectl rollout status deployment hayden-nginx<br>对容器版本的更新进行进度的查看</li>
</ol>
<h1 id="指定版本的回滚"><a href="#指定版本的回滚" class="headerlink" title="指定版本的回滚"></a>指定版本的回滚</h1><ol start="21">
<li>kubectl rollout undo deployment hayden-nginx<br>对升级的版本进行回滚，可指定回滚的版本，默认是上一个版本</li>
</ol>
<h1 id="Service发布到NodePort"><a href="#Service发布到NodePort" class="headerlink" title="Service发布到NodePort"></a>Service发布到NodePort</h1><p>外部访问到service的方法是定义type为NodePort，可在创建service的时候定义类型，或者使用kubectl edit svc nginx-service将type变更为NodePort 。</p>
<h1 id="创建资源的逻辑思路"><a href="#创建资源的逻辑思路" class="headerlink" title="创建资源的逻辑思路"></a>创建资源的逻辑思路</h1><p>刚从docker的管理思路过来的时候还是有些茫然， 不太知道该怎么用。其实从k8s的管理逻辑上，我们将之前的container 变更为 pod，将pod的管理交给一个deployment，将deployment已经启动的所有容器通过对外提供service的方式expose到外部。例如：我需要一个httpd服务，不需要直接去docker启动了，我直接在k8s上定义一个deployment-httpd，通过k8s的控制器去调度容器。如果需要控制容器对外提供服务，那就直接创建一个service，通过service去直接定义和管理对外的服务即可。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(3)</title>
    <url>/2019/09/24/Linux/Linux_k8s-basic-3/</url>
    <content><![CDATA[<p>k8s笔记YAML格式定义资源。</p>
<span id="more"></span>

<h1 id="通过YAML定义Pods"><a href="#通过YAML定义Pods" class="headerlink" title="通过YAML定义Pods"></a>通过YAML定义Pods</h1><h2 id="apiVersion"><a href="#apiVersion" class="headerlink" title="apiVersion"></a>apiVersion</h2><p>kubectl api-versions<br>查看所有可用的组名<br>apiVersion:[Group&#x2F;Version]</p>
<h2 id="Kind-资源类别"><a href="#Kind-资源类别" class="headerlink" title="Kind 资源类别"></a>Kind 资源类别</h2><h2 id="Metadata-元数据"><a href="#Metadata-元数据" class="headerlink" title="Metadata 元数据"></a>Metadata 元数据</h2><ol>
<li>name: uniq Key</li>
<li>namespace</li>
<li>labels Key-Value<ol>
<li>annotations </li>
<li>SelfLink: 资源引用的链接API格式：&#x2F;api&#x2F;group&#x2F;verison&#x2F;namespaces&#x2F;namespace&#x2F;type&#x2F;name</li>
</ol>
</li>
</ol>
<h2 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h2><p><code>kubectl explain pods.spec</code><br>可使用命令查看：定义用户期望的目标状态。</p>
<h2 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h2><p>自动维护即可 ，不需要更改。</p>
<h1 id="简单的YAML实例"><a href="#简单的YAML实例" class="headerlink" title="简单的YAML实例"></a>简单的YAML实例</h1><pre class="language-none"><code class="language-none">apiVersion: v1 
kind: Pod
metadata:
    name: myapp-pod
    labels:
        app: myapp
        version: v1
spec: 
    containers:
    - name: app
      image: nginx
   - name: php-fpm
      image: php-fpm</code></pre>

<h2 id="对Pods进行标签操作"><a href="#对Pods进行标签操作" class="headerlink" title="对Pods进行标签操作"></a>对Pods进行标签操作</h2><ol>
<li><p>查看标签<br>kubectl get pods –show-labels<br>kubectl get pods -l LABEL_NAME –show-labels</p>
</li>
<li><p>增加标签<br>kubectl label pods pod-demo KEY VALUE</p>
</li>
<li><p>修改标签<br>kubectl label pods pod-demo KEY VALUE –overwirte</p>
</li>
<li><p>指定selector选择标签 - 等值关系， 集合关系的标签选择器。<br>kubectl get pods -l release&#x3D;stable<br>kubectl get pods -l release!&#x3D;stable<br>kubectl get pods -l “release in (v1, v2, v3)”<br>kubectl get pods -l “release notin (v1, v2, v3)”</p>
<p>许多资源支持内嵌字段，matchLabels(直接给定键值) ， matchExporession(基于给出的表达式进行选择)。常用的操作符号，In ; Notin ； Exists；NotExists；</p>
</li>
</ol>
<h2 id="Pod的生命周期"><a href="#Pod的生命周期" class="headerlink" title="Pod的生命周期"></a>Pod的生命周期</h2><ul>
<li>初始化容器init c(初始化主容器的执行环境)，可以有多个，串行执行，直到最后一个init c执行结束。</li>
<li>main c在所有的初始化完成之后开始启动，在容器的运行时间与main c的执行时间基本一致；main c刚刚启动之后，可以手动执行Poststart；结束之前可以进行Prestop；</li>
<li>在Pod运行的过程中，提供Pod的Liveness probe； 提供Pod的Readiness probe。</li>
</ul>
<p>常见的Pod状态：</p>
<ol>
<li>Pending： 挂起，调度尚未完成；</li>
<li>Running： 运行状态；</li>
<li>Failed： 失败；</li>
<li>Succeeded： 成功；</li>
<li>Unknown: kubelet失去联络或者无法获取Pod信息时；</li>
</ol>
<p>创建Pod的阶段：</p>
<ol>
<li>创建提交请求给API server，目标状态保存到etcd;</li>
<li>API Server 请求 Schduler 进行Pod的调度；</li>
<li>API取得Pod的调度结果后，将信息记录到etcd；</li>
<li>Node节点获取到API server上的Pod状态更新后，开始按照调度的信息进行Pod的建立。</li>
</ol>
<p>Pod生命周期中的重要行为：</p>
<ol>
<li>初始化容器： init container ; </li>
<li>容器探测： liveness ,readiness;</li>
</ol>
<p>容器的重启策略： restartPolicy<br>Always, OnFailure, Never; 三种策略中默认的设置时Always.</p>
<p>Pod的终止过程：</p>
<ol>
<li>发送term信号， 默认等待30s，如果30s还未终止就强制终止。</li>
</ol>
<h2 id="存活检测"><a href="#存活检测" class="headerlink" title="存活检测"></a>存活检测</h2><p>可通过三种类型进行探测： ExecAction, TCPSocketAction, HTTPGetAction;</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(4)</title>
    <url>/2019/10/14/Linux/Linux_k8s-basic-4/</url>
    <content><![CDATA[<p>K8S Service资源的笔记以及Ingress资源的笔记。</p>
<h1 id="k8s的service"><a href="#k8s的service" class="headerlink" title="k8s的service"></a>k8s的service</h1><p>service的模型： userspace(kube-proxy), iptables, ipvs </p>
<h2 id="Service的类型"><a href="#Service的类型" class="headerlink" title="Service的类型"></a>Service的类型</h2><p>请求发送的过程：</p>
<ul>
<li>Client –&gt; Node’s IP:Node’s Port –&gt; Cluster’s IP:ServicePort –&gt; PodIP: ContainerPort</li>
</ul>
<p>Service的类型：</p>
<ul>
<li><p>ClusterIP是将提供服务的Pods统一建立一个集群内部的可访问接口，为集群内部的服务提供入口，PodsPort to ClusterIP:Port.</p>
</li>
<li><p>NodePort是将Node的端口映射出去的方式，每个节点各自对外提供一组IP:Port用来对外提供服务 - PodsPort to NodePort.</p>
</li>
<li><p>LoadBalancer使用LBaaS的方式对外提供服务，共有云环境可用，例如阿里云。</p>
</li>
<li><p>Externalname可将外部的服务引入到集群的内部，需要提供的字段是外部网络的真正的DNS服务的CNAME（FQDN）。</p>
</li>
<li><p>HeadlessService是不提供ClusterIP，可将ServiceName直接解析到PodsIP。</p>
</li>
</ul>
<p>上面的每一个类型的服务都是顺序增强的，也就是说，基础的模式是 ClusterIP 。</p>
<h3 id="HTTPS的处理和思路"><a href="#HTTPS的处理和思路" class="headerlink" title="HTTPS的处理和思路"></a>HTTPS的处理和思路</h3><ol>
<li><p>启动一个Pod对HTTPS进行卸载和LB</p>
<p>如果需要对HTTPS进行配置，Kubernetes本身提供的Service不能提供7层协议的卸载(将HTTPS卸载为HTTP与后端做通信以及数据交换),那么可行的方案是，建立一个新的Pod，例如nginx，由nginx-pod进行HTTPS的代理和卸载操作，但是这样的话就会有如下的流程： </p>
<p>User Request –&gt; LBaaS(LB) –&gt; Service - NodePort(LB) –&gt; Pod - nginx proxy(LB) –&gt; BackendPods</p>
<p>PROBLEM: 在这种情况下，用户的请求需要进行两次负载的转换才可以到达Pod，开销太大。</p>
</li>
<li><p>将Nginx的Pod与Node的Net名称空间进行共享</p>
<p>使得Nginx的Pod直接工作在Node的网卡级别上。免去了K8S的Service中间的一次转发。为了避免单点的故障，可将DeamonSet将Pod运行在一部分节点上。</p>
</li>
</ol>
<h2 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h2><p>可以用于处理和卸载HTTPS协议的负载均衡器Pod控制器。</p>
<p>K8S四个附件： DNS， DashBoard， Ingress Controller,  heasper。</p>
<p>如上的那种NginxPod，衍生为Ingress Controller， 独立运行的应用程序组成，不属于Controller Manager。通常由4种选择：HAProxy，Nginx，Envoy，Traefik。微服务使用更多的是Envoy。</p>
<h3 id="Ingress资源"><a href="#Ingress资源" class="headerlink" title="Ingress资源"></a>Ingress资源</h3><p>定义IngressController如何建立一个期望的前端（Nginx URL Rewrite），同时定义了期望的后端(Upstream servers)，更新后端负载Pod的信息。</p>
<h3 id="Ingress类型"><a href="#Ingress类型" class="headerlink" title="Ingress类型"></a>Ingress类型</h3><h3 id="Ingress资源的定义格式"><a href="#Ingress资源的定义格式" class="headerlink" title="Ingress资源的定义格式"></a>Ingress资源的定义格式</h3><p>使用NginxServer的方式进行配置IngressPod</p>
<pre class="language-YAML" data-language="YAML"><code class="language-YAML">apiVersion: Extensions&#x2F;v1beta1
kind: Ingress
metadata:
  name: ingress-nginx
  namespace: default
  annotations: 
    kubernetes.io&#x2F;ingress.class: &quot;nginx&quot;
spec:
  rules:
  - host: nginx.test.local
    http:
    	paths:
    	- path:
    	  backend:
    		serviceName: svc-nginx
    		servicePort: 80 		 	</code></pre>

]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(5)</title>
    <url>/2019/10/18/Linux/Linux_k8s-basic-5/</url>
    <content><![CDATA[<p>K8S集群的存储卷笔记。</p>
<p>整体的存储卷调用结构：</p>
<p>在k8s的集群中，Pod声明自己需要存储卷资源，同时创建自己的PVC，PVC绑定到集群中已经注册的PV资源，例如 已经建立的NFS网络空间。PV资源通过存储系统的分配，直接提供给Pod来使用。</p>
<p>PVC属于名称空间级别，PV属于集群资源。</p>
<h1 id="存储卷的类型"><a href="#存储卷的类型" class="headerlink" title="存储卷的类型"></a>存储卷的类型</h1><ol>
<li><p><strong>EmptyDir</strong>：只在Node上存在的存储卷，Pod删除的时候存储卷也会被移除，无法持久存储，叫做EmptyDir，做<strong>临时存储和缓存使用</strong>，可以使用<strong>Node的内存</strong>。</p>
</li>
<li><p><strong>HostPath</strong>： Docker的存储卷类型，<strong>Node节点上的目录</strong>。</p>
</li>
<li><p>网络存储： SAN， NAS; 分布式存储(Glusterfs，Cephfs，rbd); 云存储(EBS， Azure Disk，特定的托管在云上的服务)</p>
<pre class="language-none"><code class="language-none">kubectl explain pod.spec.volumes</code></pre>

<p> 可以查看支持那些存储。</p>
</li>
</ol>
<h2 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h2><p>对于用户来说，无法掌握所有的存储系统的知识和技能，因此，创建了PVC的逻辑层，在定义需要使用存储卷的Pod中只需定义需要的空间以及存储的类型，不需要详细的考虑后端存储的信息和配置。</p>
<p>PVC被定义在Pods的配置中，一个 PVC可以被多个Pod同时访问。</p>
<h2 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h2><p>存储类： Gold Storage Class, Sliver Storage Class, Bronze Stroage Class.三个不同级别的存储类。存储类直接接受PVC的内容并对PVC定义的容量等信息进行分配。</p>
<p>PV与存储服务的提供者直接绑定且需要在存储服务提供方配置完成。PV与PVC具有一一对应的关系。</p>
<h1 id="PersistentVolume"><a href="#PersistentVolume" class="headerlink" title="PersistentVolume"></a>PersistentVolume</h1><p>gitRepo仓库的使用：</p>
<p>gitRepo存储卷建立在EmptyDir的基础上，在Pod内建立空目录，同步Git的内容到空目录，Pod运行的过程中不会更改存储卷上的内容。也就是说，git同步是pod建立的时候同步的数据，不会对git项目的数据进行更改。Pod更改了存储卷中的数据不会自动推送到Git上（可以使用Sidecar进行推送和配置）。</p>
<h2 id="PV资源的定义"><a href="#PV资源的定义" class="headerlink" title="PV资源的定义"></a>PV资源的定义</h2><pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv001
  labels:
    name: pv001
spec:
  nfs:
    path: &#x2F;data&#x2F;volumes&#x2F;v1
    server: storage1.liarlee.com
  accessModes: [&quot;ReadWriteMany&quot;,&quot;ReadWriteOnce&quot;]
  capacity:
    storage: 20Gi</code></pre>

<p>使用apply命令进行应用即可。</p>
<p>查看所有的PV使用： <code>kubectl get pv </code>， 其中显示了PV的名称，大小，访问模式，回收策略，状态，建立时间等。</p>
<h1 id="PersistentVolumeClaim"><a href="#PersistentVolumeClaim" class="headerlink" title="PersistentVolumeClaim"></a>PersistentVolumeClaim</h1><p>使用的过程中，在Pod中定义PVC；PVC和PV是一一对应的，但是PVC可以被多个Pod调用和挂载。一个PV会Binding一个PVC，PVC在Pod中被定义。</p>
<p>PVC以及PV的状态，未绑定的状态叫做Pending，绑定后叫做Bound。</p>
<h2 id="PVC的定义"><a href="#PVC的定义" class="headerlink" title="PVC的定义"></a>PVC的定义</h2><pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc001
  namespace: default
spec:
  accessModes: [&quot;ReadWriteMany&quot;]
  resource:
    request:
      storage: 6Gi
  </code></pre>

<h1 id="ConfigMap资源"><a href="#ConfigMap资源" class="headerlink" title="ConfigMap资源"></a>ConfigMap资源</h1><p>configmap是明文资源，secret是base64的编码资源，因此安全程度提高了。configmap相当于外挂的配置文件，当Pods启动的时候直接挂载Configmap读取自己需要的配置内容。</p>
<h2 id="配置应用容器化的方式"><a href="#配置应用容器化的方式" class="headerlink" title="配置应用容器化的方式"></a>配置应用容器化的方式</h2><ol>
<li>自定义命令行参数</li>
<li>配置文件直接放入镜像中</li>
<li>通过环境变量进行配置</li>
<li>存储卷<ol>
<li>Cloud Native应用通过环境变量直接配置</li>
<li>通过EntryPoint脚本预处理环境变量作为配置问文件中的信息</li>
</ol>
</li>
<li>docker config命令行方式</li>
</ol>
<h2 id="Configmap的创建"><a href="#Configmap的创建" class="headerlink" title="Configmap的创建"></a>Configmap的创建</h2><p>configmap为了将配置文件中镜像中解耦，configmap可以直接注入到容器中直接使用，注入的方式可以使用存储卷，或者使用EntryPoint来处理。</p>
<p>通过命令直接传递键值：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kubectl create configmap cm-nginx --from-literal<span class="token operator">=</span>nginx_server_name<span class="token operator">=</span>nginx.liarlee.com --from-literal<span class="token operator">=</span>nginx_server_port<span class="token operator">=</span><span class="token number">80</span>
kubectl create configmap cm-nginx --from-file<span class="token operator">=</span>./nginx.conf <span class="token comment"># 直接传递文件到ConfigMap</span>
kubectl get cm cm-nginx <span class="token parameter variable">-o</span> yaml <span class="token comment"># 用YAML的格式查看ConfigMap</span></code></pre>

<p>通过YAML文件：</p>
<pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: ConfigMap
data: 
  nginx.conf................................
metadata:
  name: cm-nginx
  namespace: default</code></pre>

<p>创建Pod时ConfigMap使用<strong>环境变量</strong>方式：</p>
<pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: Pod
metadata:
  name: pod-nginx
  namespace: default
  labels:
    app: pods-nginx
    tier: frontend
  annotations:
    liarlee.com&#x2F;created-by: &quot;cluster admin&quot;
spec:
  containers:
  - name: pod-nginx
    image: nginx:latest
    ports:
    - name: http
      containerPort: 80
    env:
    - name: NGINX_SERVER_PORT
      valueFrom:
      	configMapKeyRef:
      		name: cm-nginx
      		key: nginx_port
    env:
    - name: NGINX_SERVER_NAME
    	valueFrom:
    		configMapKeyRef:
    			name: cm-nginx
    			key: nginx_server_name</code></pre>

<p>创建Pod的时候使用<strong>挂载卷</strong>的方式：</p>
<p>通过挂载的方式可以通过修改configmap的方式，同步修改容器内部的配置。</p>
<pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: Pod
metadata:
  name: pod-nginx
  namespace: default
  labels:
    app: pods-nginx
    tier: frontend
  annotations:
    liarlee.com&#x2F;created-by: &quot;cluster admin&quot;
spec:
  containers:
 	- name: pod-nginx
   	  image: nginx:latest
      ports:
      - name: http
      	containerPort: 80
 	  volumeMounts:
 	  - name: nginxconf
 	  	mountPath: &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;
 	  	readOnly: true
 	Volumes:
 	- name: nginxconf
 	  configMap: 
 	  	name: cm-nginx </code></pre>

<h2 id="创建Secret的类型"><a href="#创建Secret的类型" class="headerlink" title="创建Secret的类型"></a>创建Secret的类型</h2><p>kubectl create secret –help</p>
<ul>
<li>docker-registry – 连接到Docker私有仓库的密钥</li>
<li>generic – 通用的服务密钥</li>
<li>tls – 创建证书</li>
</ul>
<h1 id="StatefulSet的建立和使用"><a href="#StatefulSet的建立和使用" class="headerlink" title="StatefulSet的建立和使用"></a>StatefulSet的建立和使用</h1><p>在一定程度上实现了有状态的管理，但是依旧需要写成管理脚本，注入到Pod中。</p>
<p>CoreOS – 提供了 Operator相关的功能用来完善有状态的应用的部署。</p>
<p>两类不同的Pod</p>
<ol>
<li><p>Cattle</p>
</li>
<li><p>Pet</p>
</li>
</ol>
<p>最早叫做PetSet， 后面改成StatefulSet。</p>
<p>StatefulSet一般用于管理以下特性的组件：</p>
<ol>
<li><p>稳定且有唯一的网络标识符；必须保持Pod的名称和地址稳定持久有效；</p>
</li>
<li><p>稳定且持久的存储；</p>
</li>
<li><p>有序平滑(Graceful)的部署及扩展；启动的时候Pod1 - Pod8；</p>
</li>
<li><p>有序平滑(Graceful)的终止和删除；关闭的时候Pod8 - Pod1；</p>
</li>
<li><p>有序的滚动更新；有顺序的进行Pod的更新；</p>
</li>
</ol>
<p>有三个主要的部分；</p>
<pre><code>  1. Headless Service
     - 类似于Redis，提供一个headless的服务，来确保每一个请求直达后端的pod，可保持pod的接入点稳定且不发生变化。
  2. StatefulSet Controller
     - 需要一个控制器来进行Pod的管理和控制，保持Pod的生命周期，即使Pod被终止也需要在启动后保持和之前一样的Pod信息。
  3. Volume Claim Template
     - 由于有状态的服务不能同时使用同一个PV，所有的节点存储的数据各不相同，所以不能提供一个PVC&amp;PV。因此提供了申请PV的模板，每个Pod提供一个独立的存储卷用来做独立存储。
</code></pre>
<p>对于StatefulSet来说，确保所有的Pod名称稳定有效不可变动。大多数有状态的副本都会使用持久存储，多个Pod能不能共用同一个存储？ 不能，每个Pod必须使用不同的存储。</p>
<p> 所以，需要定义PV，定义PVC模板，定义Pod，定义Stateful控制器，定义headless服务这几种。</p>
<h2 id="定义StatefulSet的YAML文件"><a href="#定义StatefulSet的YAML文件" class="headerlink" title="定义StatefulSet的YAML文件"></a>定义StatefulSet的YAML文件</h2><pre class="language-YAML" data-language="YAML"><code class="language-YAML">---
apiVersion: v1
kind: Service 
metadata:
  name: sts-headless-svc
  labels:
    Service: sts-headless-svc
spec:
  ports:
  - port: 80
    name: sts-headless-svc
  clusterIP: None
  selector: 
    service: sts-headless-svc

---
apiVersion: app&#x2F;v1
kind: StatufulSet
metadata:
  name: sts
spec:
  serviceName: sts
  replicas: 3
  selector:
    matchlabels:
      service: sts-headless-svc
  template:
    metadata:
      labels:
        service: sts-headless-svc
   	spec: 
   		containers: 
   		- name: sts-container
   		  image: ikubernetes&#x2F;SOMEIMAGE&#39;SNAME
   		  ports:
   		  - containerPort: 80
   		    name: sts-headless-svc
   		  volumeMounts:
   		  - name: sts-pv
   		    mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
  volumeClainTempates:
  - metadata:
    name: sts-vct
  spec:
    accessModes: [ &quot;ReadWriteOnce&quot; ]
    resources:
      requests:
        storage: 5Gi
        
</code></pre>

<p>Pod的dns命名规则：</p>
<p>Pod_Name+Service_Name+NameSpace_Name.svc.cluster.local</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(6)</title>
    <url>/2019/11/06/Linux/Linux_k8s-basic-6/</url>
    <content><![CDATA[<p>K8S的认证部分， ServiceAccount以及RBAC 。</p>
<h1 id="授权插件"><a href="#授权插件" class="headerlink" title="授权插件"></a>授权插件</h1><ol>
<li>Node</li>
<li>ABAC</li>
<li>RBAC</li>
<li>Webhook</li>
</ol>
<p>常用的授权插件就是RBAC</p>
<h1 id="基于角色的授权和访问控制"><a href="#基于角色的授权和访问控制" class="headerlink" title="基于角色的授权和访问控制"></a>基于角色的授权和访问控制</h1><p>基于角色的访问控制，就是将权限授予Role，而不是User。 将权限的控制授予Role， 将User分配到Role。默认的是拒绝全部， 无法也无需定义拒绝权限，定义的Permission是许可访问的权限。</p>
<ol>
<li>角色，User Accouts OR Service Accounts.</li>
<li>许可， Permission分为两个部分：Operation 以及 Object.</li>
</ol>
<h2 id="角色以及角色绑定"><a href="#角色以及角色绑定" class="headerlink" title="角色以及角色绑定"></a>角色以及角色绑定</h2><p>Role – RoleBinding</p>
<p>Role 和 RoleBinding 是建立和控制 NameSpace 级别的权限。</p>
<h2 id="集群角色以及集群角色绑定"><a href="#集群角色以及集群角色绑定" class="headerlink" title="集群角色以及集群角色绑定"></a>集群角色以及集群角色绑定</h2><p>ClusterRole – ClusterRoleBinding</p>
<p>Cluster 和 ClusterBinding 是建立和控制 Cluster 级别的权限。</p>
<p>NOTE： 特殊的情况，可以对名称空间级别的</p>
<h2 id="特殊的绑定方式"><a href="#特殊的绑定方式" class="headerlink" title="特殊的绑定方式"></a>特殊的绑定方式</h2><p>ClusterRole – RoleBinding</p>
<p>可以使用 RoleBinding 绑定 ClusterRole， 那么这种情况下，Role只是具有NameSpace的权限。<strong>解释一下：</strong>雷在同一个Cluster中有多个不同的NameSpace，我需要对每个NameSpace都授权相同的权限，这种场景下:</p>
<ul>
<li><p>如果使用RoleBinding 去绑定一个Role，那么每一个NameSpace都需要建立各自的 RoleBinding，并且都要各自绑定到Role。</p>
</li>
<li><p>如果建立一个ClusterRole, 使用RoleBinding绑定到ClusterRole上面，那么我只需要定义一个即可在全部集群范围内生效这个权限。这样的就相当于批量的进行Role的授权。</p>
</li>
</ul>
<h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><p>命令不做过多的解释，所有的资源可以通过explain获取，主要是记录逻辑和思路。</p>
<pre class="language-Shell" data-language="Shell"><code class="language-Shell">~]$ kubectl create role testrole --verb&#x3D;get,list,watch --resources&#x3D;pods -o yaml
~]$ kubectl get role
~]$ kubectl describe role pods-reader
~]$ kubectl create rolebinding test-rolebinding --role&#x3D;testrole --user&#x3D;testuser -o yaml
~]$ kubectl explain rolebinding
~]$ kubectl config use-context USERNAME@kubernetes
~]$ kubectl create clusterrole test-clusterrole --verb&#x3D;get,list,watch --resource&#x3D;pods -o yaml 
~]$ kubectl explain clusterrole
~]$ kubectl get clusterrole
~]$ </code></pre>

<h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><p>在RBAC中可以存在三类组件：</p>
<ol>
<li>user</li>
<li>group</li>
<li>service account</li>
</ol>
<p>创建Pod的过程中可以指定一个值叫做ServiceAccountName，如果授权ServiceAccount高等级的权限，那么，Pod会以这个Account运行，那么Pod中的应用程序也会有ServiceAccount的权限。也就是提高了Pod应用程序的等级，使得Pod可以对K8S的相关资源进行管理和配置。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的学习笔记(7)</title>
    <url>/2019/11/06/Linux/Linux_k8s-basic-7/</url>
    <content><![CDATA[<p>Kubernetes的Dashboard 和 分级认证权限。</p>
<h1 id="Dashboard的简介"><a href="#Dashboard的简介" class="headerlink" title="Dashboard的简介"></a>Dashboard的简介</h1><p>Dashboard算是k8s的一个管理的web界面。不做具体的操作，登录的时候使用的是K8S提供的用户名和密码。</p>
<h2 id="Dashboard的部署"><a href="#Dashboard的部署" class="headerlink" title="Dashboard的部署"></a>Dashboard的部署</h2><p>只需要从github进行apply资源清单即可。</p>
<h2 id="Dashboard的登录"><a href="#Dashboard的登录" class="headerlink" title="Dashboard的登录"></a>Dashboard的登录</h2><h3 id="使用Token登录"><a href="#使用Token登录" class="headerlink" title="使用Token登录"></a>使用Token登录</h3><ol>
<li><p>获取系统中默认的admin的token，或者创建一个需要登录和管理的ServiceAccount，然后Binding到Role或者 ClusterRole,进行权限的控制</p>
</li>
<li><p>查看集群中自动创建的dashboard的secret， 系统部署完成之后自动创建了一个可管理全部集群的secret</p>
</li>
</ol>
   <pre class="language-Shell" data-language="Shell"><code class="language-Shell">~]$ kubectl get secret -n kube-system | grep dashboard
dashboard-admin-token-g85h7                      kubernetes.io&#x2F;service-account-token   3      109d</code></pre>

<ol start="3">
<li><p>在这个secret中有Token相关的信息</p>
<pre class="language-none"><code class="language-none">~]$ kubectl describe secret dashboard-admin-token-g85h7 -n kube-system</code></pre>
</li>
<li><p>其中的<strong>Token字段</strong>的内容就是可以用来登录的令牌。复制到dashboard中粘贴即可</p>
</li>
</ol>
<h3 id="使用config文件登录"><a href="#使用config文件登录" class="headerlink" title="使用config文件登录"></a>使用config文件登录</h3><ol>
<li>创建ServiceAccount，Binding到role</li>
<li>获取Secret，然后查看他的token</li>
<li>制作config文件</li>
<li>使用config文件登录</li>
</ol>
<h2 id="Kubernetes的管理方式"><a href="#Kubernetes的管理方式" class="headerlink" title="Kubernetes的管理方式"></a>Kubernetes的管理方式</h2><ol>
<li><p>命令</p>
<p>create , run ,expose , delete ,edit ….</p>
</li>
<li><p>命令式配置文件</p>
<p>create -f , delete -f , replace -f </p>
</li>
<li><p>声明式配置文件</p>
<p>apply -f , patch</p>
</li>
</ol>
<p>一般不混合使用，1.2 使用的是替换，但是3是立刻修改，立刻生效，所以还是比较危险的。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S将loop-lvm改为direct-lvm说明</title>
    <url>/2019/09/24/Linux/Linux_k8s-changelooplvm-directlvm/</url>
    <content><![CDATA[<p>对k8s集群进行存储驱动的调整，从loop-lvm 切换到direct-lvm。</p>
<h2 id="k8s的几种不同的存储驱动"><a href="#k8s的几种不同的存储驱动" class="headerlink" title="k8s的几种不同的存储驱动"></a>k8s的几种不同的存储驱动</h2><ol>
<li>AUFS - 这是一个经过时间检验的存储驱动</li>
<li>DeviceMapper - Redhat系默认的驱动，有loop和direct两种不同配置</li>
<li>Btrfs - 我…. 这个文件系统的快照真的是贼好用，但是性能什么的….我倒觉得都一般</li>
<li>ZFS - 还没用过</li>
<li>VFS - 还没用过</li>
<li>Overlay2 - 简单的接触了一下，docker目前推荐的存储驱动</li>
</ol>
<h2 id="关于存储驱动选择的相关博客及文章"><a href="#关于存储驱动选择的相关博客及文章" class="headerlink" title="关于存储驱动选择的相关博客及文章"></a>关于存储驱动选择的相关博客及文章</h2><blockquote>
<p><a href="https://www.jianshu.com/p/6bf1bc011ade">Docker引擎 - 选择存储驱动</a><br><a href="http://dockone.io/article/1513">Docker五种存储驱动原理及应用场景和性能测试对比</a><br><a href="https://www.cnblogs.com/Terry-Wu/p/7471476.html">Docker系统八：Docker的存储驱动</a> </p>
</blockquote>
<h2 id="Loop-lvm"><a href="#Loop-lvm" class="headerlink" title="Loop-lvm"></a>Loop-lvm</h2><p>这是docker默认安装之后的选择，因为这样可以out-of-box，但是据说稳定性不佳，我没遇到稳定性的问题，但是遇到了IO高导致的整个虚拟机运行缓慢。<br>Loop-LVM其实使用了linux中的使用loop设备<br>我之前安装的一套k8s默认是使用overlay2的存储，可能是内核的版本过低导致无法使用其他的存储驱动，所以我觉得默认使用了loop-lvm。</p>
<blockquote>
<p>loop-lvm的工作模式是，默认在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;devicemapper&#x2F;devicemapper&#x2F;目录下生成data&amp;metadata两个<strong>稀疏文件</strong>（我目前还不知道什么叫做稀疏文件），并将两个文件挂载为loop设备做为块设备来使用。<br>按照这个说法的话确实如果直接对裸设备的想能和稳定性都应该更强。所以下面可以动手啦~</p>
</blockquote>
<h2 id="Direct-lvm"><a href="#Direct-lvm" class="headerlink" title="Direct-lvm"></a>Direct-lvm</h2><p>这里直接放一个官方文档的链接好了。<br><a href="https://docs.docker.com/storage/storagedriver/device-mapper-driver/">Device-Mapper-driver</a></p>
<h3 id="切换loop-lvm到direct-lvm"><a href="#切换loop-lvm到direct-lvm" class="headerlink" title="切换loop-lvm到direct-lvm"></a>切换loop-lvm到direct-lvm</h3><p>想要切换的原因其实是已经安装好的这个k8s的master节点在跑了很久之后，总是被zabbix监控到报警，硬盘负载高；cpu进程数高。cpu的进程数量高可以理解，毕竟监控了如此多的容器。硬盘负载高这个报警在系统中发现是&#x2F;dev&#x2F;loop2这个设备。对应去查找 docker info中的信息，发现这是k8s的存储所使用的。进而搜索到了关于loop-lvm&amp;direct-lvm的相关问题，发现使用loop设备的方式应该实在性能上有影响的，k8s不推荐生产环境使用，所以考虑切换过来，今后毕竟还是要长期使用的。<strong>值得注意的是</strong>：切换一定会导致之前的容器无法使用。而且目前来看关键的数据是不能恢复的，所以最好是在之前已经做好了计划。</p>
<h4 id="自动托管配置"><a href="#自动托管配置" class="headerlink" title="自动托管配置"></a>自动托管配置</h4><p>自动托管的配置主要是两部分，首先是建立一个空的LVM，不需要挂载，只要系统识别到即可。之后是更改配置文件及重启docker服务。</p>
<ol>
<li>在虚拟机中加入一块新的硬盘，fdisk中识别为&#x2F;dev&#x2F;sdb；</li>
<li>关闭docker。systemctl stop docker.</li>
<li>在配置文件中加入如下的配置，注意格式不要错，不要丢下末尾的逗号：<pre class="language-none"><code class="language-none">&#123;
  &quot;storage-driver&quot;: &quot;devicemapper&quot;,   # 告诉docker应用使用的存储驱动
  &quot;storage-opts&quot;: [
    &quot;dm.directlvm_device&#x3D;&#x2F;dev&#x2F;sdb&quot;,	# 指定使用的块设备，不需要格式化，不需要分区。在这里指定了设备docker会自动完成创建LVM等等操作。
    &quot;dm.thinp_percent&#x3D;95&quot;,	# 指定Thinpool占用的百分比
    &quot;dm.thinp_metapercent&#x3D;1&quot;,	# 指定Thinpool Meta数据使用的百分比
    &quot;dm.thinp_autoextend_threshold&#x3D;80&quot;,	# 指定自动扩容的阈值
    &quot;dm.thinp_autoextend_percent&#x3D;20&quot;,	# 指定自动扩容的比例
    &quot;dm.directlvm_device_force&#x3D;false&quot;	# 是否强制格式化设备，默认是false。如果使用dockerd启动的时候出现了提供需要强行格式化设备的提示，就改为True。
  ]
&#125;</code></pre></li>
<li>重新启动docker服务。如果正常启动可通过docker info 查看是否已经切换过来。</li>
<li>如果没有能成功启动，尝试重启虚拟机；尝试使用dockerd命令直接启动，根据dockerd的日志信息进行相应的修改。</li>
<li>常见错误有：<pre class="language-none"><code class="language-none">Sep 23 18:38:03 k8s-master dockerd: time&#x3D;&quot;2019-09-23T18:38:03.931876136+08:00&quot; level&#x3D;warning msg&#x3D;&quot;[graphdriver] WARNING: the devicemapper storage-driver is deprecated, and will be removed in a future release&quot;
# 存储驱动将会在未来的版本被移除的警告。这不会导致docker无法运行。
Sep 23 18:25:52 localhost dockerd: Error starting daemon: error initializing graphdriver: &#x2F;dev&#x2F;sdb is already part of a volume group &quot;docker&quot;: must remove this device from any volume group or provide a different device
# 这个问题说明 docker 认为你的&#x2F;dev&#x2F;sdb上已经被创建了LVM，你需要手动指定，自动托管不会对这个设备进行操作。这会导致docker无法启动。
# 首先你需要把&#x2F;dev&#x2F;sdb这个设备从LVM里面移除，lvdelete,pvdelete,vgdelete, 将设备还原为默认的状态，之后重启docker，将设备的所有操作控制都交给docker来做，就不会有这个错误了。</code></pre></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在更换之后目前性能稳定，IO的负载也下来了。总体来看还是不错的。不过随着kubernetes的发展，我觉得这种问题应该会越来越少。还是推荐在安装的时候直接调整，不然数据的随时确实带来了一些麻烦。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s所有的NS删除的时候都进入Terminating状态</title>
    <url>/2019/10/09/Linux/Linux_k8s-namespace-delete-terminating/</url>
    <content><![CDATA[<p>集群无法删除Namespace解决方式。</p>
<h2 id="Namespace-无法删除-始终处于Teminating"><a href="#Namespace-无法删除-始终处于Teminating" class="headerlink" title="Namespace 无法删除 始终处于Teminating"></a>Namespace 无法删除 始终处于Teminating</h2><h3 id="强制删除的方法，临时方案。"><a href="#强制删除的方法，临时方案。" class="headerlink" title="强制删除的方法，临时方案。"></a>强制删除的方法，临时方案。</h3><ol>
<li><p>将名称空间的配置文件导出。<br><code>kubectl get namespace testtest -o json &gt; tmp.json</code></p>
</li>
<li><p>编辑这个临时文件。<br><code>vim tmp.json</code></p>
</li>
<li><p>删除spec字段中的值。</p>
<pre><code>&quot;spec&quot; : &#123;
        &quot;finalizers&quot; : [		# delete this line.
            &quot;kubernetes&quot;		# delete this line.
            ]		# delete this line.
        &#125;
``` 			
</code></pre>
</li>
<li><p>使用另一个terminal， 运行本地的proxy， 连接到API server。<br> <code>kubectl proxy --port=8888</code></p>
</li>
<li><p>通过ApiServer进行删除<br> <code>curl -k -H &quot;Content-Type: application/json&quot; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/[NEEDTODELETENS]/finalize;   </code></p>
<p> 这里面http的<strong>调用路径</strong>在 ： tmp.json的 api 字段中。</p>
</li>
<li><p>运行结果返回NameSpace的相关信息应该就是删除了。</p>
</li>
</ol>
<h2 id="Namespace删除卡住的原因"><a href="#Namespace删除卡住的原因" class="headerlink" title="Namespace删除卡住的原因"></a>Namespace删除卡住的原因</h2><blockquote>
<p>Solution From Github: <a href="https://github.com/kubernetes/kubernetes/issues/60807">https://github.com/kubernetes/kubernetes/issues/60807</a></p>
</blockquote>
<p>是某些服务的问题导致了无法删除掉相关的NS</p>
<ol>
<li>kubectl get apiservice | grep False</li>
<li>kubectl api-resources –verbs&#x3D;list –namespaced -o name | xargs -n 1 kubectl get -n [NEEDTODELETENS]</li>
<li>kubectl delete apiservice v1alpha3.kubevirt.io</li>
</ol>
<p>其实是这个apiservice影响的，他的状态不正常导致的NS删除的时候卡住，删除这个apiservice就可以了。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora防火墙关闭，如何开机运行脚本</title>
    <url>/2018/05/11/Linux/Linux_%E5%85%B3%E9%97%ADFedora%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p>这次的内容是两个部分，关闭Firewalld 和 启动rc.local的服务。  </p>
<p>如何彻底关闭Fedora27的Firewalld，防止每次重启自动开启。<br>我们都知道在很早之前就已经关闭了rc.local的使用，开机启动的内容完全由systemd进行管理，如果要使用rc.local需要自己配置。</p>
<h2 id="如何彻底关闭Fedora27的Firewalld"><a href="#如何彻底关闭Fedora27的Firewalld" class="headerlink" title="如何彻底关闭Fedora27的Firewalld"></a>如何彻底关闭Fedora27的Firewalld</h2><p>Fedora的Firewalld,每次重启都会自动启动，不会彻底关闭，我们需要特殊的方式来关闭。  </p>
<ol>
<li>直接移除   <pre class="language-none"><code class="language-none">dnf remove firewalld</code></pre></li>
<li>指向不存在的设备   <pre class="language-none"><code class="language-none">systemctl mask firewalld  -- 表示直接将这个服务指向了&#x2F;dev&#x2F;null,无法启动也无法被其他的程序直接调用。
systemctl disable firewalld -- 开机的时候不会自动启动，但是接受其他的服务调用并启动。</code></pre></li>
</ol>
<h2 id="配置rc-local服务"><a href="#配置rc-local服务" class="headerlink" title="配置rc.local服务"></a>配置rc.local服务</h2><ol>
<li>新建rc.local文件。   <pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;rc.d&#x2F;rc.local</code></pre></li>
<li>写入内容。   <pre class="language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash
&#x2F;usr&#x2F;sbin&#x2F;Orthanc
&#x2F;etc&#x2F;orthanc&#x2F;orthanc.json</code></pre></li>
<li>启动服务,配置开机自启。 <pre class="language-none"><code class="language-none">systemctl start rc-local.service
systemctl enable rc-local.service</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-内核参数笔记</title>
    <url>/2018/01/22/Linux/Linux_%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>记录内核参数的含义和调整的效果, 主要是记录这些参数的含义或者使用它们的方法， 什么场景下需要调整这个。</p>
<hr>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="net-ipv4-tcp-max-tw-buckets"><a href="#net-ipv4-tcp-max-tw-buckets" class="headerlink" title="net.ipv4.tcp_max_tw_buckets"></a>net.ipv4.tcp_max_tw_buckets</h3><p>  对于tcp连接，服务端和客户端通信完后状态变为timewait，假如某台服务器非常忙，连接数特别多的话，那么这个timewait数量就会越来越大。毕竟它也是会占用一定的资源，所以应该有一个最大值，当超过这个值，系统就会删除最早的连接，这样始终保持在一个数量级。<br>  这个数值就是由net.ipv4.tcp_max_tw_buckets这个参数来决定的。CentOS7系统，你可以使用sysctl -a |grep tw_buckets来查看它的值，默认为32768，你可以适当把它调低，比如调整到8000，毕竟这个状态的连接太多也是会消耗资源的。<br>  但你不要把它调到几十、几百这样，因为这种状态的tcp连接也是有用的，如果同样的客户端再次和服务端通信，就不用再次建立新的连接了，用这个旧的通道，省时省力。  </p>
<h3 id="net-ipv4-tcp-tw-recycle"><a href="#net-ipv4-tcp-tw-recycle" class="headerlink" title="net.ipv4.tcp_tw_recycle"></a>net.ipv4.tcp_tw_recycle</h3><p>  在最新版本的内核中， 这个已经被移除， 这个参数在具有nat网络结构和行为的时候会导致出现异常。</p>
<h3 id="net-ipv4-tcp-tw-reuse"><a href="#net-ipv4-tcp-tw-reuse" class="headerlink" title="net.ipv4.tcp_tw_reuse"></a>net.ipv4.tcp_tw_reuse</h3><p>  该参数设置为1，将timewait状态的连接重新用于新的TCP连接，这个参数本身其实开开启就可以了， 他可以快速的回收处于timewait的socket， 生效在客户端。</p>
<h3 id="net-ipv4-tcp-syncookies"><a href="#net-ipv4-tcp-syncookies" class="headerlink" title="net.ipv4.tcp_syncookies"></a>net.ipv4.tcp_syncookies</h3><p>  tcp三次握手中，客户端向服务端发起syn请求，服务端收到后，也会向客户端发起syn请求同时连带ack确认，假如客户端发送请求后直接断开和服务端的连接，不接收服务端发起的这个请求，服务端会重试多次。<br>  这个重试的过程会持续一段时间，当这种状态的连接数量非常大时，服务器会消耗很大的资源，从而造成瘫痪，正常的连接进不来，这种恶意的半连接行为其实叫做syn flood攻击。<br>  设置为1，是开启SYN Cookies，开启后可以避免发生上述的syn flood攻击。开启该参数后，服务端接收客户端的ack后，再向客户端发送ack+syn之前会要求client在短时间内回应一个序号，如果客户端不能提供序号或者提供的序号不对则认为该客户端不合法，于是不会发ack+syn给客户端，更涉及不到重试。  </p>
<h3 id="net-ipv4-tcp-max-syn-backlog"><a href="#net-ipv4-tcp-max-syn-backlog" class="headerlink" title="net.ipv4.tcp_max_syn_backlog"></a>net.ipv4.tcp_max_syn_backlog</h3><p>  该参数定义系统能接受的最大半连接状态的tcp连接数。客户端向服务端发送了syn包，服务端收到后，会记录一下，该参数决定最多能记录几个这样的连接。我的CentOS7系统，默认是256，当有syn flood攻击时，这个数值太小则很容易导致服务器瘫痪，实际上此时服务器并没有消耗太多资源（cpu、内存等），所以可以适当调大它，比如调整到30000。  </p>
<h3 id="net-ipv4-tcp-syn-retries"><a href="#net-ipv4-tcp-syn-retries" class="headerlink" title="net.ipv4.tcp_syn_retries"></a>net.ipv4.tcp_syn_retries</h3><p>  该参数适用于客户端，它定义发起syn的最大重试次数，默认为5，建议改为2。  </p>
<h3 id="net-ipv4-tcp-synack-retries"><a href="#net-ipv4-tcp-synack-retries" class="headerlink" title="net.ipv4.tcp_synack_retries"></a>net.ipv4.tcp_synack_retries</h3><p>  该参数适用于服务端，它定义发起syn+ack的最大重试次数，默认为5，建议改为2，可以适当预防syn flood攻击。  </p>
<h3 id="net-ipv4-ip-local-port-range"><a href="#net-ipv4-ip-local-port-range" class="headerlink" title="net.ipv4.ip_local_port_range"></a>net.ipv4.ip_local_port_range</h3><p>  该参数定义端口范围，系统默认保留端口为1024及以下，以上部分为自定义端口。这个参数适用于客户端，当客户端和服务端建立连接时，比如说访问服务端的80端口，客户端随机开启了一个端口和服务端发起连接，这个参数定义随机端口的范围。默认为32768    61000，建议调整为1025 61000。  </p>
<h3 id="net-ipv4-tcp-fin-timeout"><a href="#net-ipv4-tcp-fin-timeout" class="headerlink" title="net.ipv4.tcp_fin_timeout"></a>net.ipv4.tcp_fin_timeout</h3><p>  tcp连接的状态中，客户端上有一个是FIN-WAIT-2状态，它是状态变迁为timewait前一个状态。该参数定义不属于任何进程的该连接状态的超时时间，默认值为60，建议调整为6。  </p>
<h3 id="net-ipv4-tcp-keepalive-time"><a href="#net-ipv4-tcp-keepalive-time" class="headerlink" title="net.ipv4.tcp_keepalive_time"></a>net.ipv4.tcp_keepalive_time</h3><p>  tcp连接状态里，有一个是keepalived状态，只有在这个状态下，客户端和服务端才能通信。正常情况下，当通信完毕，客户端或服务端会告诉对方要关闭连接，此时状态就会变为timewait，如果客户端没有告诉服务端，并且服务端也没有告诉客户端关闭的话（例如，客户端那边断网了），此时需要该参数来判定。<br>    比如客户端已经断网了，但服务端上本次连接的状态依然是keepalived，服务端为了确认客户端是否断网，就需要每隔一段时间去发一个探测包去确认一下看看对方是否在线。这个时间就由该参数决定。它的默认值为7200（单位为秒），建议设置为30。</p>
<h3 id="net-ipv4-tcp-keepalive-intvl"><a href="#net-ipv4-tcp-keepalive-intvl" class="headerlink" title="net.ipv4.tcp_keepalive_intvl"></a>net.ipv4.tcp_keepalive_intvl</h3><p>  该参数和上面的参数是一起的，服务端在规定时间内发起了探测，查看客户端是否在线，如果客户端并没有确认，此时服务端还不能认定为对方不在线，而是要尝试多次。该参数定义重新发送探测的时间，即第一次发现对方有问题后，过多久再次发起探测。<br>    默认值为75秒（单位为秒），可以改为3。</p>
<h3 id="net-ipv4-tcp-keepalive-probes"><a href="#net-ipv4-tcp-keepalive-probes" class="headerlink" title="net.ipv4.tcp_keepalive_probes"></a>net.ipv4.tcp_keepalive_probes</h3><p>  第10和第11个参数规定了何时发起探测和探测失败后再过多久再发起探测，但并没有定义一共探测几次才算结束。该参数定义发起探测的包的数量。默认为9，建议设置2。</p>
<h3 id="net-ipv4-tcp-slow-start-after-idl"><a href="#net-ipv4-tcp-slow-start-after-idl" class="headerlink" title="net.ipv4.tcp_slow_start_after_idl"></a>net.ipv4.tcp_slow_start_after_idl</h3><h2 id="这个推荐直接设置为0-，-在tcp连接多而且数据交互频繁的时候，-这个参数没有特别大的影响，-但是对于间隔一段时间这类的网络请求，-确实是会有影响的，-会导致走-慢启动-拉长延迟"><a href="#这个推荐直接设置为0-，-在tcp连接多而且数据交互频繁的时候，-这个参数没有特别大的影响，-但是对于间隔一段时间这类的网络请求，-确实是会有影响的，-会导致走-慢启动-拉长延迟" class="headerlink" title="  这个推荐直接设置为0 ， 在tcp连接多而且数据交互频繁的时候， 这个参数没有特别大的影响， 但是对于间隔一段时间这类的网络请求， 确实是会有影响的， 会导致走 慢启动 拉长延迟  
  "></a>  这个推荐直接设置为0 ， 在tcp连接多而且数据交互频繁的时候， 这个参数没有特别大的影响， 但是对于间隔一段时间这类的网络请求， 确实是会有影响的， 会导致走 慢启动 拉长延迟<br>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-w</span>  net.ipv4.tcp_slow_start_after_idle <span class="token operator">=</span> <span class="token number">0</span> 
<span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_slow_start_after_idle = 0"</span> <span class="token operator">>></span> /etc/sysctl.conf</code></pre>
  </h2><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>tcp协议的网络流量控制 [[..&#x2F;Network&#x2F;Network_tc控制流量-update|Network_tc控制流量-update]]<br>Amazon Linux 2 完整的sysctl参数 [[Linux_Sysctl]]<br>Linux操作系统触发NMI中断调试和Kdump [[Linux_DebugLinuxCrashOnEC2]]</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>升级以及清理内核的步骤</title>
    <url>/2023/07/12/Linux/Linux_%E5%8D%87%E7%BA%A7%E5%92%8C%E6%B8%85%E7%90%86%E5%86%85%E6%A0%B8%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>通常情况下升级内核版本的步骤:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum makecache <span class="token parameter variable">-y</span> 

yum update <span class="token parameter variable">-y</span> 

grub2-editenv list

grub2-set-default <span class="token string">'CentOS Linux (3.10.xxxxx.el7.elrepo.x86_64) 7 (Core)'</span> <span class="token comment"># entry_name</span>

systemctl <span class="token function">reboot</span></code></pre>

<p>清理旧版本的步骤； </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span>  kernel* 
<span class="token comment"># 这个命令会列出所有当前已经安装的版本的内核， 然后手动使用命令移除对应的软件包即可。 </span>
<span class="token comment"># 我记得是有一个命令可以完全移除全部未使用的内核， 可能记错了， 这命令应该只有在ubuntu 上面是存在的。</span>

yum groupinstall <span class="token parameter variable">-y</span> <span class="token string">"Development Tools"</span>
categories: Linux
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kernel kernel-devel kernel-debug</code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-进程管理笔记</title>
    <url>/2018/01/29/Linux/Linux_%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="进程的优先级"><a href="#进程的优先级" class="headerlink" title="进程的优先级"></a>进程的优先级</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>优先级越高的进程就能够获得更多的CPU运行时间</li>
<li>能够更优先的获得运行的机会</li>
</ul>
<h3 id="优先级的调整"><a href="#优先级的调整" class="headerlink" title="优先级的调整"></a>优先级的调整</h3><ul>
<li>用户可以调整的优先级(priority)范围是100-139<br>每一个进程都有一个nice值, nice值是从-20到19，分别对应100-139</li>
</ul>
<p>可以调整进程自己的nice值，来调整优先级  </p>
<ul>
<li>nice值越小，优先级越高  </li>
<li>默认情况下每个进程的优先级都是0</li>
</ul>
<p>如果有进程的优先级是3，就说明该进程降低了自己的优先级，普通用户只能调大nice值，管理员可以随意调整</p>
<h3 id="PID（process-ID）-进程号"><a href="#PID（process-ID）-进程号" class="headerlink" title="PID（process ID）:进程号"></a>PID（process ID）:进程号</h3><h2 id="Init进程"><a href="#Init进程" class="headerlink" title="Init进程"></a>Init进程</h2><p>每一个进程都有父进程，除了init，init是所有进程的父进程<br>init的进程号永远为1   </p>
<h2 id="其他进程"><a href="#其他进程" class="headerlink" title="其他进程"></a>其他进程</h2><p>进程的相关属性信息在&#x2F;proc目录下，每一个目录对应一个进程<br>每一个进程的进程号都是唯一的，即使进程退出了，进程的号码一般不会被占用<br>访问到的都是内核的映射。不是文件，是内核参数<br>进程号文件夹中的文件记载了进程运行的命令，内存，使用的cpu等等  </p>
<h2 id="进程的分类"><a href="#进程的分类" class="headerlink" title="进程的分类"></a>进程的分类</h2><ul>
<li>与终端有关的进程</li>
<li>与终端无关的进程</li>
</ul>
<h2 id="进程状态表"><a href="#进程状态表" class="headerlink" title="进程状态表"></a>进程状态表</h2><table>
<thead>
<tr>
<th align="center">标识符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">D</td>
<td align="left">不可中断的睡眠</td>
</tr>
<tr>
<td align="center">R</td>
<td align="left">运行或就绪</td>
</tr>
<tr>
<td align="center">S</td>
<td align="left">可中断的睡眠</td>
</tr>
<tr>
<td align="center">T</td>
<td align="left">停止</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="left">僵死</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="left">高优先级的进程</td>
</tr>
<tr>
<td align="center">N</td>
<td align="left">低优先级的进程</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">前台进程组中的进程</td>
</tr>
<tr>
<td align="center">l</td>
<td align="left">表示多线程进程</td>
</tr>
<tr>
<td align="center">s</td>
<td align="left">会话进程的首进程(领导者进程)</td>
</tr>
</tbody></table>
<h2 id="进程查看命令"><a href="#进程查看命令" class="headerlink" title="进程查看命令"></a>进程查看命令</h2><p><strong>ps命令</strong> 显示进程状态，多种使用风格，unix的两大阵营，BSD风格（不加-），SYSV风格（加-)</p>
<p>Example： <code>ps -aux</code>  </p>
<h3 id="参数说明-BSD风格"><a href="#参数说明-BSD风格" class="headerlink" title="参数说明-BSD风格"></a>参数说明-BSD风格</h3><p>a：BSD风格，显示所有与终端有关的进程，与x一起用显示所有<br>u：能够显示详细的信息<br>x：BSD风格，显示所有与终端无关的进程  </p>
<h4 id="Ps命令输出信息的说明"><a href="#Ps命令输出信息的说明" class="headerlink" title="Ps命令输出信息的说明"></a>Ps命令输出信息的说明</h4><p>单独查看Firefox进程的例子  </p>
<pre class="language-none"><code class="language-none">[root@localhost Liarlee]# ps -aux | grep firefox  
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND  
root       1915  5.7  6.9 9324108 570096 tty2   Sl+  11:23   2:00 &#x2F;usr&#x2F;lib64&#x2F;firefox&#x2F;firefox  </code></pre>

<p>说明表格  </p>
<table>
<thead>
<tr>
<th align="center">USER</th>
<th align="left">PID</th>
<th align="left">%CPU</th>
<th align="left">%MEM</th>
<th align="left">RSS</th>
<th align="left">VSZ</th>
<th align="left">TTY</th>
<th align="left">START</th>
<th align="left">STAT</th>
<th align="left">TIME</th>
<th align="left">COMMAND</th>
</tr>
</thead>
<tbody><tr>
<td align="center">进程发起者</td>
<td align="left">进程号</td>
<td align="left">使用cpu百分比</td>
<td align="left">使用内存的百分比</td>
<td align="left">常驻内存集</td>
<td align="left">虚拟内存集</td>
<td align="left">控制台关联</td>
<td align="left">启动时间</td>
<td align="left">状态</td>
<td align="left">运行时间</td>
<td align="left">哪一个命令启动的进程</td>
</tr>
<tr>
<td align="center"><em>[]表示是一个内核线程，不是一个用户进程</em></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="另一个风格-SYSV风格"><a href="#另一个风格-SYSV风格" class="headerlink" title="另一个风格-SYSV风格"></a>另一个风格-SYSV风格</h3><p>-e SYSV风格，显示所有的进程<br>-F 额外的完全格式，显示更多的字段<br>-l 长格式  </p>
<p>PRI：优先级<br>NI：nice值<br>SZ：size<br>PSR：正在运行在那个CPU  </p>
<p>ps -o 指定显示的字段,ps 不加参数只显示前台进程，一般使用ps -axo<br>例：ps -axo comm,pid,ni<br>man文档中有单独的说明-o可以指定那些字段  </p>
<h2 id="Pstree进程树"><a href="#Pstree进程树" class="headerlink" title="Pstree进程树"></a>Pstree进程树</h2><p>pgrep  查找符合某种特性的进程    例： pgrep bash   pgrep -u root bash  以root用户为属主运行的bash进程<br>   只显示进程号，不显示进程的名称<br>   -u euid        有效ID<br>   -U uid         进程发起者ID  </p>
<p>pidof     查看某一个进程名字对应得进程号   pidof init    |   pidof sshd    |    pidof crond</p>
<h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><h3 id="关于top显示信息的说明"><a href="#关于top显示信息的说明" class="headerlink" title="关于top显示信息的说明"></a>关于top显示信息的说明</h3><pre><code>   当前系统时间 ， up运行时长，登陆用户，平均负载（平均队列长度，队列长度越小cpu负载越低）。
   所有的进程数量，正在运行的进程数量，多少个睡眠进程，多少个僵尸进程
   每个cpu负载，默认是多颗cpu平均负载，数字1，表示展开查看。
       us ： 用户空间占用的
       sy： 运行在系统占据了多少
       ni：nice值影响的cpu比例
       id： 空闲的百分比
       wa： 等待IO完成的百分比，占据的时间
       hi ：中断占据的百分比
       si ： 软中断的时间
       st ： 被偷走的时间
   内存的使用
   交换的使用
   默认使用cpu百分比排序
</code></pre>
<h3 id="Top交互式的子命令"><a href="#Top交互式的子命令" class="headerlink" title="Top交互式的子命令"></a>Top交互式的子命令</h3><pre><code>   M：使用内存百分比排序
   P： 使用cpu百分比排序
   T： 占用cpu时间排序

   l：不显示平均负载启动时间  
   t：不显示进程和cpu负载   
   m：不显示关于内存和交换的信息

   c：  是否显示完整的命令行
   q： 退出top
   k：  杀死某个进程
</code></pre>
<h3 id="更改top命令的选项："><a href="#更改top命令的选项：" class="headerlink" title="更改top命令的选项："></a>更改top命令的选项：</h3><pre><code>   -d    更改刷新是时常
   -b   批处理模式   会刷新一次，刷新出一屏
   -n  3 ： 批处理模式只显示多少次
</code></pre>
<h2 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h2><p>进程之间彼此不能感受到彼此的存在，因此进程间的通信有几种机制：  </p>
<h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><p>进程间通信，unix中非常常用的机制，inter process Communication<br>               共享内存<br>               信号：signal<br>               semaphore  </p>
<h3 id="手动控制进程间通信：-Kill"><a href="#手动控制进程间通信：-Kill" class="headerlink" title="手动控制进程间通信： Kill"></a>手动控制进程间通信： Kill</h3><pre><code>       kill -l  显示所有的kill信号
       1 sighup        让一个进程不重启，重读配置文件，让文件的新配置生效
       2 sigint          中断一个进程，ctrl c 就是发送了 2 信号
       9 sigkill            杀死一个进程  ， 强行关闭  ， 没有任何余地
       15 sigterm        中止一个进程
</code></pre>
<h3 id="指定发送信号："><a href="#指定发送信号：" class="headerlink" title="指定发送信号："></a>指定发送信号：</h3><p>   kill -1<br>   kill -sigkill<br>   kill -kill</p>
<h2 id="杀死所有某个名字的进程："><a href="#杀死所有某个名字的进程：" class="headerlink" title="杀死所有某个名字的进程："></a>杀死所有某个名字的进程：</h2><p>killall  command</p>
<h2 id="调整运行中进程的优先级"><a href="#调整运行中进程的优先级" class="headerlink" title="调整运行中进程的优先级"></a>调整运行中进程的优先级</h2><pre><code>     renice    进程优先级   进程号
       renice   3   3704
</code></pre>
<p>nice -n nice值 命令</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>vmstat<br>   vmstat 1   每一秒显示一次</p>
<p>pkill 类似于 pgrep</p>
<p>bg  把前台的作业放入后台<br>   bg 【%】jobid  可以指定执行某一个作业  默认执行+ 作业<br>jobs  查看后台的所有作业  作业号不同于进程号<br>   如果进程上有+ 号 说明接下来将要继续操作的作业<br>    如果进程上有-好  说明执行完+的作业之后再执行-号作业  </p>
<p>fg 将后台的作业放入前台 ，用法类似于bg  </p>
<p>如果杀死某些作业 ， kill  %2   杀死作业2  </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Network 相关知识不知道放那儿</title>
    <url>/2023/05/12/Network/Network-RFC1180/</url>
    <content><![CDATA[<p>Origin Version:<br><a href="https://datatracker.ietf.org/doc/html/rfc1180">https://datatracker.ietf.org/doc/html/rfc1180</a></p>
<p>Chinese Version:<br><a href="http://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/">http://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/</a></p>
<hr>
<p>Tuning initcwnd for optimum Performance: </p>
<p><a href="https://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/">https://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/</a></p>
<p><a href="https://www.kawabangga.com/posts/5217">https://www.kawabangga.com/posts/5217</a></p>
<hr>
<p>Other Linux Network Stack Explaination:<br><a href="https://www.clockblog.life/article/2023/7/4/44.html">https://www.clockblog.life/article/2023/7/4/44.html</a></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux OS 网络流量控制测试</title>
    <url>/2023/04/14/Network/Network_tc%E6%8E%A7%E5%88%B6%E6%B5%81%E9%87%8F-update/</url>
    <content><![CDATA[<h2 id="内核参数的说明"><a href="#内核参数的说明" class="headerlink" title="内核参数的说明"></a>内核参数的说明</h2><p>对于 TCP 来说，会遇到如下的几个参数。</p>
<p>如果我们需要查看一下当前OS内与tcp相关的 KernelParam， 命令如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">"rmem|wmem|tcp_mem|adv_win|moderate"</span></code></pre>

<p>其中主要需要关注的是:</p>
<pre class="language-none"><code class="language-none">net.ipv4.tcp_rmem &#x3D; 4096	131072	6291456
net.ipv4.tcp_wmem &#x3D; 4096	16384	4194304</code></pre>

<p>这两个参数其实表示的是当前内核预留的 Socket Buffer， 单位是Bytes， 也是具体指 内存 的大小。具体的说明我找到 <a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt">Kernel文档的说明</a>如下：</p>
<blockquote>
<pre class="language-none"><code class="language-none">tcp_rmem - vector of 3 INTEGERs: min, default, max
  min: Minimal size of receive buffer used by TCP sockets.
  It is guaranteed to each TCP socket, even under moderate memory
  pressure.
  Default: 4K

  default: initial size of receive buffer used by TCP sockets.
  This value overrides net.core.rmem_default used by other protocols.
  Default: 87380 bytes. This value results in window of 65535 with
  default setting of tcp_adv_win_scale and tcp_app_win:0 and a bit
  less for default tcp_app_win. See below about these variables.

  max: maximal size of receive buffer allowed for automatically
  selected receiver buffers for TCP socket. This value does not override
  net.core.rmem_max.  Calling setsockopt() with SO_RCVBUF disables
  automatic tuning of that socket&#39;s receive buffer size, in which
  case this value is ignored.
  Default: between 87380B and 6MB, depending on RAM size.
  
tcp_wmem - vector of 3 INTEGERs: min, default, max
  min: Amount of memory reserved for send buffers for TCP sockets.
  Each TCP socket has rights to use it due to fact of its birth.
  Default: 4K

  default: initial size of send buffer used by TCP sockets.  This
  value overrides net.core.wmem_default used by other protocols.
  It is usually lower than net.core.wmem_default.
  Default: 16K

  max: Maximal amount of memory allowed for automatically tuned
  send buffers for TCP sockets. This value does not override
  net.core.wmem_max.  Calling setsockopt() with SO_SNDBUF disables
  automatic tuning of that socket&#39;s send buffer size, in which case
  this value is ignored.
  Default: between 64K and 4MB, depending on RAM size.
</code></pre>
</blockquote>
<p>这文档中的说明，默认的三个值分别是： 最小， 默认， 最大。测试了一下， 如果只是需要实际调整的话， 调整那个最大值即可， 在高延迟的链路中， 调整默认值或者最大值就可以生效。 在测试的过程中， 将三个值都固定到预期，控制变量。</p>
<p>对于TCP协议的接收与发送两方， 各自有自己的 RecvBuffer 和 SendBuffer， 发送方会考虑链路上面可以承载的数据量（带宽）， 以及 对方可以承载的数据量（rmem）。</p>
<p>实际上， 只是更新 max 的值， 并不会更新 Recvbuffer.<br>如果想增大 receive buffer 的大小, 可以增加 tcp_rmem 的 default 的值大小.</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>两个 EC2 c5.2xlarge， 其中一个部署 Nginx ， 并使用如下配置文件部分设置 ,  发布一个 Fedora ISO， 大小大约 2G。另一个上面只是客户端， 使用的访问客户端是Curl。</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
      <span class="token directive"><span class="token keyword">autoindex</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">autoindex_localtime</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
这个配置文件中的其他部分就省略吧。</code></pre>

<h2 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h2><p>测试的过程其实涉及了四个部分的 延迟 问题:</p>
<ul>
<li>发送方的应用程序性能。</li>
<li>发送方的发送缓冲区大小， SendBuffer</li>
<li>接收方的接收缓冲区大小， RecvBuffer</li>
<li>接收方的应用程序性能。</li>
</ul>
<p>调整延迟和控制带宽 ， 这两个部分控制的都是网络传输部分的性能，测试的过程中默认认为 发送 以及接收方的性能都完全没有问题。</p>
<h3 id="基准"><a href="#基准" class="headerlink" title="基准"></a>基准</h3><p>两个机器的内核参数使用默认值， 先通过 tc 流量控制注入一些延迟， 查看并分析RTT对于传输速度的影响。</p>
<p>两个server之间默认的内核参数：</p>
<ul>
<li><p>服务端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">16384</span>	<span class="token number">4194304</span></code></pre>
</li>
<li><p>客户端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">16384</span>	<span class="token number">4194304</span></code></pre></li>
</ul>
<p>curl 的 测试命令 如下：（更新版本， 之前的测试版本少了一些参数 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> <span class="token string">"time_namelookup:%&#123;time_namelookup&#125;<span class="token entity" title="\n">\n</span>time_connect: %&#123;time_connect&#125;<span class="token entity" title="\n">\n</span>time_appconnect: %&#123;time_appconnect&#125;<span class="token entity" title="\n">\n</span>time_redirect:  %&#123;time_redirect&#125;<span class="token entity" title="\n">\n</span>time_pretransfer:  %&#123;time_pretransfer&#125;<span class="token entity" title="\n">\n</span>time_starttransfer: %&#123;time_starttransfer&#125;<span class="token entity" title="\n">\n</span>time_total: %&#123;time_total&#125;<span class="token entity" title="\n">\n</span>"</span>  http://nginx.liarlee.site/Fedora-Workstation-Live-x86_64-38_Beta-1.3.iso </code></pre>

<p>如果使用默认的参数， 那么2G的 ISO 文件可以快速的传完， 这是两个实例的基准表现， 这也是创建了一个TCP Connection 的较好的性能表现， EC2 之间的带宽较大 10Gbps。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--     <span class="token number">0</span>*   
Trying <span class="token number">172.31</span>.48.133:80<span class="token punctuation">..</span>.
<span class="token number">100</span> 1967M  <span class="token number">100</span> 1967M    <span class="token number">0</span>     <span class="token number">0</span>  1116M      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:-- 1116M
* Connection <span class="token comment">#0 to host nginx.liarlee.site left intact</span>
time_connect: <span class="token number">0.005461</span>
time_starttransfer: <span class="token number">0.005797</span>
time_total: <span class="token number">1.762040</span></code></pre>

<p>总体看起来使用了 2s 不到的时间， 就传输完成了2G的文件。</p>
<h3 id="仅控制带宽"><a href="#仅控制带宽" class="headerlink" title="仅控制带宽"></a>仅控制带宽</h3><p>在添加了带宽 控制， 带宽控制在 1000Mbps， 带宽监控结果： </p>
<p><img src="https://s2.loli.net/2023/04/14/ZVxCb43c2Wynaze.png" alt="2023-04-12_17-03.png"></p>
<p>Curl命令的结果： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span> 1967M  <span class="token number">100</span> 1967M    <span class="token number">0</span>     <span class="token number">0</span>   118M      <span class="token number">0</span>  <span class="token number">0</span>:00:16  <span class="token number">0</span>:00:16 --:--:--  118M
time_connect: <span class="token number">0.002070</span>
time_starttransfer: <span class="token number">0.002304</span>
time_total: <span class="token number">16.633562</span></code></pre>

<p>在仅仅控制带宽的前提下， 由于延迟忽略不计， 所以传输的数据量可以使用全部的带宽，这个场景下面<strong>传输的速度取决于网络带宽的大小</strong>， 网络带宽越大， 传输的数据量和速度都会相应的增加。</p>
<h3 id="控制带宽-延迟"><a href="#控制带宽-延迟" class="headerlink" title="控制带宽+延迟"></a>控制带宽+延迟</h3><p>给服务端添加一个 50ms 的 延迟， 使用 tc 工具， <a href="https://zhuanlan.zhihu.com/p/443427232">参考文档</a>， 命令如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">tc qdisc del dev eth0 root
tc qdisc <span class="token function">add</span> dev eth0 root handle <span class="token number">1</span>:0 htb default <span class="token number">1</span>
tc class <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 classid <span class="token number">1</span>:1 htb rate 1000mbit
tc qdisc <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:1 handle <span class="token number">2</span>:0 netem delay 50ms</code></pre>

<p>测试的时候使用curl命令， 将结果直接输出到 &#x2F;dev&#x2F;null, 这个场景下， 客户端收写数据的速度非常快，这样的测试排除了大文件落硬盘速度慢的问题， 但是也让客户端收到这批数据之后立刻可以发送ack给服务端（Client - ACK——&gt; Server）， 告知服务端我这边的数据已经处理完了， 回收 RecvBuffer 空间.</p>
<p>在添加带宽控制和 50ms 延迟之后， 带宽使用：<br><img src="https://s2.loli.net/2023/04/14/wS7UK5IQWLMd2TG.png" alt="2023-04-12_17-03_1.png"></p>
<p>ping 命令 确认 rtt ： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@arch ~<span class="token comment"># ping nginx.liarlee.site</span>
PING nginx.liarlee.site <span class="token punctuation">(</span><span class="token number">172.31</span>.48.133<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from ip-172-31-48-133.cn-north-1.compute.internal <span class="token punctuation">(</span><span class="token number">172.31</span>.48.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">50.1</span> ms
<span class="token number">64</span> bytes from ip-172-31-48-133.cn-north-1.compute.internal <span class="token punctuation">(</span><span class="token number">172.31</span>.48.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">50.1</span> ms
<span class="token number">64</span> bytes from ip-172-31-48-133.cn-north-1.compute.internal <span class="token punctuation">(</span><span class="token number">172.31</span>.48.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">50.1</span> ms
^C
--- nginx.liarlee.site <span class="token function">ping</span> statistics ---
<span class="token number">3</span> packets transmitted, <span class="token number">3</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 2003ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">50.110</span>/50.117/50.132/0.010 ms</code></pre>

<p>curl的结果变成这样： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span> 1967M  <span class="token number">100</span> 1967M    <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">38</span>.7M      <span class="token number">0</span>  <span class="token number">0</span>:00:50  <span class="token number">0</span>:00:50 --:--:-- <span class="token number">39</span>.2M
time_connect: <span class="token number">0.053118</span>
time_starttransfer: <span class="token number">0.103339</span>
time_total: <span class="token number">50.756470</span></code></pre>

<p>链路的带宽没有被充分利用， 所以发送数据的速度已经慢很多，并且时间也比较长。</p>
<p>在有延迟的情况下， 发送方会按照接收的窗口进行配置。</p>
<h3 id="加入随机延迟"><a href="#加入随机延迟" class="headerlink" title="加入随机延迟"></a>加入随机延迟</h3><pre class="language-bash" data-language="bash"><code class="language-bash">tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms 10ms <span class="token comment"># 上下浮动 10ms</span>
tc qdisc <span class="token function">add</span> dev eth0 root netem delay 100ms 10ms <span class="token number">30</span>% <span class="token comment"># 30% 数据包会浮动， 其他稳定</span></code></pre>

<h3 id="加入丢包"><a href="#加入丢包" class="headerlink" title="加入丢包"></a>加入丢包</h3><p>tc子系统可以在网卡上面直接控制丢包的百分比：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">tc qdisc <span class="token function">add</span> dev eth0 root netem loss <span class="token number">1</span>% <span class="token comment"># 随机丢 1%</span>
tc qdisc change dev eth0 root netem delay 100ms 20ms distribution normal <span class="token comment"># 模拟重复数据包</span>
tc qdisc change dev eth0 root netem corrupt <span class="token number">0.1</span>% <span class="token comment"># 模拟数据包错误， 损坏， 损坏率 1%</span>
tc qdisc change dev eth0 root netem gap <span class="token number">5</span> delay 10ms  <span class="token comment"># 模拟数据包乱序.规律的乱序， 5倍数的包准时发，其他延迟 10ms</span>
tc qdisc change dev eth0 root netem delay 10ms reorder <span class="token number">25</span>% <span class="token number">50</span>% <span class="token comment"># 随机乱序， 25% 准时， 其他延迟 10ms， Relate 50%</span></code></pre>

<h3 id="配置到特定IP地址的流控"><a href="#配置到特定IP地址的流控" class="headerlink" title="配置到特定IP地址的流控"></a>配置到特定IP地址的流控</h3><p>有的时候故意测试非常奇怪的场景， 如果加在eth上面就会很奇怪， 整体的流量都被影响了， 那么最简单的设置就是限制一下生效的范围： </p>
<p>指定IP地址延迟17ms</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">tc qdisc del dev eth0 root
tc qdisc <span class="token function">add</span> dev eth0 root handle <span class="token number">1</span>: prio
tc filter <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 protocol <span class="token function">ip</span> pref <span class="token number">55</span> handle ::55 u32 match <span class="token function">ip</span> dst <span class="token number">172.31</span>.65.30 flowid <span class="token number">2</span>:1
tc qdisc <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:1 handle <span class="token number">2</span>: netem delay 17ms
<span class="token comment">####### ！ ！ ！ ！ ！ ！ ！ ！ ！ </span>
这个在容器的网桥上面不生效<span class="token punctuation">..</span><span class="token punctuation">..</span>. 麻 ！ ！ 
直接设置在宿主机的eth0上面是可以正常使用的， 在宿主机的网桥上面应该是网桥设备不支持吧。</code></pre>

<p>指定IP地址和端口触发延迟</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">这个太难了 我不会 ， 后面在看吧， 感觉暂时用不到， 限制到IP地址就可以了。</code></pre>

<h2 id="理论说明以及后续测试"><a href="#理论说明以及后续测试" class="headerlink" title="理论说明以及后续测试"></a>理论说明以及后续测试</h2><p>如果我的网络延迟小到可以忽略不计，那么这个时候发送方缓冲区里面的数据基本上就是实时抵达对方， 并且立刻可以接收到对方的ACK报文， 这样无论我的发送和接收的Buffer有多小或者多大都无所谓， 数据包都可以快速的发送出去， 然后被确认收到。</p>
<p>在添加了网络的延迟之后， 50ms， 那么这个时候链路上面可以承载的数据包计算方式如下：</p>
<blockquote>
<p>1000Mbps&#x2F;8 * 0.05s (rtt)&#x3D; 6.25MB # BDP 带宽延时积</p>
<p>6.25MB * 1024 &#x3D; 6400KB * 1024 &#x3D; 6553600 Bytes</p>
<p>6553600 * 2 &#x3D; 13107200 # 这个是linux kernel buffer size </p>
</blockquote>
<p>在这个测试的过程中发现， 数据发送方的通告的window size， 固定是 tcp_rmem 值的一半。 发现这个是 BDP 计算出来的结果是 6553600， 如果这个值直接配置到tcp_rmem中，抓包出来windowsize就正好是预期的一半， 这会导致限定的千兆带宽正好占用500Mbps。</p>
<p>buffersize 设置成了 2倍 的 接收窗口的原因是：   Linux Kernel 的参数 <code>net.ipv4.tcp_adv_win_scale = 1</code>， <a href="https://docs.kernel.org/networking/ip-sysctl.html?highlight=tcp_adv_win_scale">内核文档</a>中的说明如下：</p>
<pre class="language-none"><code class="language-none">tcp_adv_win_scale - INTEGER

    Count buffering overhead as bytes&#x2F;2^tcp_adv_win_scale (if tcp_adv_win_scale &gt; 0) or bytes-bytes&#x2F;2^(-tcp_adv_win_scale), if it is &lt;&#x3D; 0.
    Possible values are [-31, 31], inclusive.
    Default: 1</code></pre>

<p>由于这个值 当前的主流版本可能都是1 ， 所以默认会用一半的rmem空间来通告自己的接收窗口大小，但是这参数的取值范围写的是 -31 到 31 ， 但是大部分写的都是  1 0  -1 这三个值， 感觉网络上面目前没有正确答案呢？<br><a href="https://unix.stackexchange.com/questions/94770/what-does-net-ipv4-tcp-app-win-do">https://unix.stackexchange.com/questions/94770/what-does-net-ipv4-tcp-app-win-do</a><br><a href="https://emacsist.github.io/2019/07/13/linux%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/">https://emacsist.github.io/2019/07/13/linux%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</a></p>
<h3 id="测试1-增加客户端的-Rmem"><a href="#测试1-增加客户端的-Rmem" class="headerlink" title="测试1 增加客户端的 Rmem"></a>测试1 增加客户端的 Rmem</h3><ul>
<li><p>服务端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">16384</span>	<span class="token number">4194304</span></code></pre>
</li>
<li><p>客户端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">13107200</span> <span class="token number">13107200</span> <span class="token number">13107200</span></code></pre></li>
</ul>
<p>接下来就是调整这个的配置来观察带宽以及传输速度的差异。</p>
<p>带宽使用量：<br><img src="https://s2.loli.net/2023/04/14/m2xVd145LXgvhCs.png" alt="2023-04-12_17-39.png"></p>
<p>curl 的结果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span> 1967M  <span class="token number">100</span> 1967M    <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">53</span>.0M      <span class="token number">0</span>  <span class="token number">0</span>:00:37  <span class="token number">0</span>:00:37 --:--:-- <span class="token number">53</span>.5M
time_connect: <span class="token number">0.053408</span>
time_starttransfer: <span class="token number">0.103699</span>
time_total: <span class="token number">37.118881</span></code></pre>

<h3 id="测试2-增加服务端的-Wmem"><a href="#测试2-增加服务端的-Wmem" class="headerlink" title="测试2 增加服务端的 Wmem"></a>测试2 增加服务端的 Wmem</h3><ul>
<li><p>服务端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">13107200</span> <span class="token number">13107200</span> <span class="token number">13107200</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">16384</span>	<span class="token number">4194304</span> </code></pre>
</li>
<li><p>客户端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">13107200</span> <span class="token number">13107200</span> <span class="token number">13107200</span></code></pre></li>
</ul>
<p>带宽的结果： </p>
<p><img src="https://s2.loli.net/2023/04/14/85zygfpMBRnha19.png" alt="2023-04-12_17-47.png"></p>
<p>curl 的结果： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span> 1967M  <span class="token number">100</span> 1967M    <span class="token number">0</span>     <span class="token number">0</span>   115M      <span class="token number">0</span>  <span class="token number">0</span>:00:17  <span class="token number">0</span>:00:17 --:--:--  118M
time_connect: <span class="token number">0.052605</span>
time_starttransfer: <span class="token number">0.102836</span>
time_total: <span class="token number">17.007612</span></code></pre>

<p>从当前的结果来看， 现在已经可以用满全部的带宽了， 查看抓包的结果， 发送和接收数据非常连续。 中间的停顿时间也比较短。</p>
<p>如图：</p>
<p><img src="https://s2.loli.net/2023/04/14/iey2OWk1FKHYSVg.png" alt="2023-04-12_22-47.png"></p>
<p>这个结果我还重新反复抓了几次，这个可以跑满带宽 并且可以顶住 50ms 延迟。</p>
<p>TCP慢启动时候的截图：</p>
<p>我将几个字段提取了出来，放在了截图的最前面， iRTT， WindowSize， Bytes in flight。 对于这个结果里面， 我的客户端窗口的变化非常小，传输的后半段 会一直维持在最大值， 但是Bytes in flight 一直都很小， 大概就是 30000 + 的样子。 </p>
<blockquote>
<p>原因是由于curl在获取到数据包之后快速的ack了收到的包， 然后向服务端更新了接收窗口， 由于curl的动作太快了， 所以我的 Bytes in flight 非常小，窗口一直在被更新， 所以窗口的尺寸非常大， 而且稳定。NOTE： 这个逻辑的证据是：  测试4， 让curl没有时间收取数据包。<br><img src="https://s2.loli.net/2023/04/14/8KWyBIgZTQC4GVN.png" alt="2023-04-12_23-10.png"></p>
</blockquote>
<p>截取了其中的一部分稳定传输中的抓包结果， 如图：<br><img src="https://s2.loli.net/2023/04/14/qRGDdPh3pubUiZz.png" alt="2023-04-12_23-17.png"></p>
<p>稳定传输中基本上是有空间， 收到之前的ack 就立刻发送新的到链路中.</p>
<h3 id="测试3-锁定-Wmem-以及-Rmem-4096"><a href="#测试3-锁定-Wmem-以及-Rmem-4096" class="headerlink" title="测试3 锁定 Wmem 以及 Rmem 4096"></a>测试3 锁定 Wmem 以及 Rmem 4096</h3><ul>
<li><p>服务端参数  </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">4096</span> <span class="token number">4096</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">16384</span>	<span class="token number">4194304</span> </code></pre>
</li>
<li><p>客户端参数</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">4096</span>	<span class="token number">131072</span>	<span class="token number">6291456</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">4096</span> <span class="token number">4096</span></code></pre></li>
</ul>
<ol>
<li><p>同时设定两端参数，设置生效之后， 速度变得非常的慢， 数据包基本上发一两个就会触发 WindowFull 的提示。改客户端的rmem参数， 会导致 rmem 的容量不够大， 频繁的触发 WindowFull， 窗口很快就被填充满了， 所以curl的下载速度也非常慢。</p>
<p><img src="https://s2.loli.net/2023/04/14/MHEsand1wvK7yIc.png" alt="2023-04-13_00-20.png"></p>
</li>
<li><p>客户端参数不动， 只是改服务端的wmem参数限制到 4096， 传输速度快了一些，但是开始的时候数据包发送的速度比较快， send-q中的指标快速被降低下来，虽然速度变快了一些， 但是不多。<em>我想这个地方还能观察一下Nginx的行为， 应用程序应该也是变慢的。</em></p>
</li>
<li><p>服务端的参数不动， 只是改客户端的参数，这个时候nginx的sendbuffer里面堆积了许多数据，因为接收的窗口太小， 所以与上面的截图一样，到处都是 WindowFull。</p>
</li>
</ol>
<h3 id="测试4-与curl抢占CPU"><a href="#测试4-与curl抢占CPU" class="headerlink" title="测试4 与curl抢占CPU"></a>测试4 与curl抢占CPU</h3><p>运行命令： 启动一个JVM， 跑计算的线程， 这个程序是自己写的，CPU密集型， 运行起来之后就可以使用率100%。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ taskset <span class="token parameter variable">-c</span> <span class="token number">0</span> <span class="token function">java</span> CPUIntensiveThread <span class="token operator">&amp;</span>
<span class="token comment"># 调整这个程序的nice值为 -20， 我是直接用htop调整的。</span>
<span class="token punctuation">]</span>$ taskset <span class="token parameter variable">-c</span> <span class="token number">0</span> ./nginx-tc-traffic-test-curl.sh
<span class="token punctuation">]</span>$ <span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token number">19</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /dev/null http://nginx.liarlee.site/Fedora-Workstation-Live-x86_64-38_Beta-1.3.iso <span class="token parameter variable">-t</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> <span class="token string">"time_connect: %&#123;time_connect&#125;<span class="token entity" title="\n">\n</span>time_starttransfer: %&#123;time_starttransfer&#125;<span class="token entity" title="\n">\n</span>time_total: %&#123;time_total&#125;<span class="token entity" title="\n">\n</span>"</span></code></pre>

<p>测试的结果如图,  Recv-Q里面一直有数据， 抓包的结果中显示当前的接收端的窗口是满的， 出现了 WindowUpdate 以及 ZeroWindow的提示。<br><img src="https://s2.loli.net/2023/04/14/mYAb3qCwOvn1Q8Z.png" alt="2023-04-14_17-09.png"></p>
<p>基本上随着窗口的变化而变化， curl的下载速度并不快， 下载的速度也不太稳定。。<br><img src="https://s2.loli.net/2023/04/14/KZmte1CzfvIsoLM.png" alt="2023-04-14_17-09_1.png"></p>
<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ol>
<li>如何计算每秒传输了多少MB数据？</li>
<li>对于RecvBuffer 或者 SendBuffer 被填满的时候， 应用程序的表现是什么样子的？ 我的理解是，应该通过系统调用write（）写入的数据在 SendBuffer 满了的情况下， 应用会在等待io的状态。</li>
<li>wmem的值 与 Send-Q 中的数值的关系是什么？</li>
</ol>
<hr>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://tonydeng.github.io/sdn-handbook/linux/tc.html">https://tonydeng.github.io/sdn-handbook/linux/tc.html</a></p>
<p><a href="https://plantegg.github.io/2016/08/24/Linux%20tc%20qdisc%E7%9A%84%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/">https://plantegg.github.io/2016/08/24/Linux%20tc%20qdisc%E7%9A%84%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</a></p>
<p><a href="https://tldp.org/HOWTO/Traffic-Control-HOWTO/">https://tldp.org/HOWTO/Traffic-Control-HOWTO/</a></p>
<p><a href="https://blog.csdn.net/dog250/article/details/40483627">https://blog.csdn.net/dog250/article/details/40483627</a></p>
<p><a href="https://arthurchiao.art/blog/lartc-qdisc-zh/">https://arthurchiao.art/blog/lartc-qdisc-zh/</a></p>
<p>关于这个问题的更多解释： </p>
<p>我上面的内容里面可能有一部分图不太好： </p>
<p><a href="https://www.kawabangga.com/posts/4794">https://www.kawabangga.com/posts/4794</a></p>
<p>这个里面有比较清晰的描述， 例如图里面的每条线是做什么的， 其实应该看的是 tcptrace 不是 steven 这个图。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Network</tag>
      </tags>
  </entry>
  <entry>
    <title>荣耀8-刷LineageOS14.1简述</title>
    <url>/2018/07/08/Other/Android_Honor8InstallLineageOS/</url>
    <content><![CDATA[<p>荣耀8刷LineageOS 14.1 , 感谢XDA的大神们。用到的刷机包我转存了一份到微云，链接在末尾。  </p>
<span id="more"></span>  

<p><img src="https://i.loli.net/2018/08/02/5b628ca68c86f.png" alt="SystemHome.png"></p>
<h2 id="一-基本情况"><a href="#一-基本情况" class="headerlink" title="一 基本情况"></a>一 基本情况</h2><ol>
<li>设备： 华为荣耀8 FRD-AL10 国行  </li>
<li>初始系统版本： B396   EMUI 5.0.1   </li>
<li>解锁状态： Phone Unlocked</li>
</ol>
<hr>
<h2 id="二-需要准备的原料"><a href="#二-需要准备的原料" class="headerlink" title="二 需要准备的原料"></a>二 需要准备的原料</h2><ol>
<li>手机  </li>
<li>SD卡  </li>
<li>电脑一台，USB线一根  </li>
<li>荣耀8海外版安装包<br> Name:update.zip &amp; update_data_full_hw_usa.zip</li>
<li>OpenKirin TWRP 3.1.1.1<br> Name:twrp-3.1.1-1-frd.img </li>
<li>LineageOS ROM From XDA<br> Name:lineage-14.1-20170812-Unofficial.zip</li>
<li>OpenGAPPS<br> Name:open_gapps-arm64-7.1-stock-20180705.zip </li>
<li>SuperSU<br> Name:SuperSU-v2.82-201705271822.zip</li>
<li>Dolby ATOM安装包<br><img src="https://i.loli.net/2018/08/02/5b628c9965473.png" alt="Install Packages.png"></li>
</ol>
<hr>
<h2 id="三-流程"><a href="#三-流程" class="headerlink" title="三 流程"></a>三 流程</h2><h3 id="1-解锁手机"><a href="#1-解锁手机" class="headerlink" title="1 解锁手机"></a>1 解锁手机</h3><ol>
<li>首先需要进行华为手机的解锁，百度一下有很多，所以不再过多的介绍。</li>
<li>需要知道是我大华为要关闭后续的解锁服务了，所以今后即便是刷如果你没有解锁码也只能作罢。</li>
</ol>
<hr>
<h3 id="2-复制安装包到SD卡"><a href="#2-复制安装包到SD卡" class="headerlink" title="2 复制安装包到SD卡"></a>2 复制安装包到SD卡</h3><ol>
<li>在SD卡上新建一个文件夹，名字叫做packages , 或者其他也可以。</li>
<li>复制4-9项文件到SD卡</li>
<li>将SD卡放入手机。</li>
</ol>
<hr>
<h3 id="3-写入TWRP"><a href="#3-写入TWRP" class="headerlink" title="3 写入TWRP"></a>3 写入TWRP</h3><ol>
<li>解锁之后可以使用命令来写入TWRP Recovery。 Recovery使用的openkirin项目组的版本。请自行确保驱动及手机的连接处于正常状态即可。</li>
<li>打开adb工具目录，在工具目录中使用Shift+鼠标右键，将文件夹在命令行或Powershell中打开。</li>
<li>adb.exe devices   ——  ## 查看是否识别手机成功。</li>
<li>adb.exe reboot fastboot ——— ## 将手机重启至fastboot模式.<br> <strong>NOTE</strong> – 进入fastboot的方式，除了adb reboot fastboot之外还可以，关机，手机连接电脑，<em>开机键</em>加*音量-*，直到出现fastboot界面为止。</li>
<li>fastboot.exe flash recovery .&#x2F;twrp-3.1.1.1-frd.img ——  ## 写入Recovery</li>
<li>fastboot.exe reboot ——  ## 重启手机。<br><img src="https://i.loli.net/2018/08/02/5b628c9962113.png" alt="HomeScreenTWRP.png"></li>
</ol>
<hr>
<h3 id="4-安装海外版ROM"><a href="#4-安装海外版ROM" class="headerlink" title="4 安装海外版ROM"></a>4 安装海外版ROM</h3><ol>
<li>XDA原帖 – <a href="https://forum.xda-developers.com/honor-8/how-to/to-emui5-custom-roms-tested-openkirin-t3638445">HERE</a></li>
<li>拔掉数据线，关机，长按 <em>音量+</em> 和 <em>开机</em> ， 直到出现 <em>解锁警告</em> 和 <em>Your device is booting now …</em></li>
<li>进入Recovery，一次进入Install – Select Storage – Micro SDCard – OK – Packages。</li>
<li>点击update.zip – Swipt to confirm Flash. </li>
<li>等待写入成功后会自动重启。</li>
<li>自动进入eRecovery安装更新，这个是正常的，不用管他就好。</li>
<li>安装更新之后会自动重启，<strong>这个时候TWRP会被覆盖</strong>，也就是说你的TWRP手机上已经没有了，被替换成了ROM里面华为默认的recovery，需要重新进入fastboot再写入一次TWRP。</li>
<li>按照写入TWRP的步骤再来一次即可。<br> <strong>NOTE</strong> – 如果提示写入TWRP失败，需要再使用解锁码解锁一次手机，不要需要管fastboot界面的那个提示。我的手机当时显示的是已经解锁，但是其实是没有的，需要2次解锁手机才可以写入TWRP。</li>
<li>再次进入TWRP之后，重复第2步，找到update_data_full_hw_usa.zip – Swipt to confirm Flash.</li>
<li>自动写入成功后会自动重启，进入系统后查看关于手机，其中名称变为NRD90M。说明我们已经可以写入LineageOS了。</li>
</ol>
<hr>
<h3 id="5-卡刷LineageOS"><a href="#5-卡刷LineageOS" class="headerlink" title="5 卡刷LineageOS"></a>5 卡刷LineageOS</h3><ol>
<li>XDA原帖 – <a href="https://forum.xda-developers.com/honor-8/development/rom-lineageos-14-1-honor-8-t3615506">HERE</a></li>
<li>我用的是US Model – FRD-L14C567 – B360 ，可以使用。</li>
<li>重启手机，进入TWRP， 双清，格式化data分区。<br><img src="https://i.loli.net/2018/08/02/5b628c9961462.png" alt="Wipe.png"></li>
<li>选择lineage-14.1-20170812-Unofficial.zip – Swipt to confirm Flash.</li>
<li>等待写入成功之后重启。<br><strong>NOTE</strong> – 如果写入之后一直卡在开机动画，解决方法是进入TWRP – 格式化data分区即可。</li>
<li>第一次开机的过程可能有些慢，但是只要第一进入了系统就可以了，后面不会再出现问题了。</li>
<li>刷入LineageOS完成。</li>
</ol>
<hr>
<h3 id="6-安装SuperSU"><a href="#6-安装SuperSU" class="headerlink" title="6 安装SuperSU"></a>6 安装SuperSU</h3><ol>
<li>SuperSU官网 – <a href="http://www.supersu.com/">HERE</a></li>
<li>选择SuperSU-v2.82-201705271822.zip – Swipt to confirm Flash.</li>
<li>进入系统就可以看到了，可以直接使用。</li>
<li>如果不是用SuperSU，可以使用Magisk，好像这个好用一些。<br><img src="https://i.loli.net/2018/08/02/5b628c9964202.png" alt="Magisk.png"></li>
</ol>
<hr>
<h3 id="7-安装OpenGAPPS"><a href="#7-安装OpenGAPPS" class="headerlink" title="7 安装OpenGAPPS"></a>7 安装OpenGAPPS</h3><ol>
<li>OpenGAPPS官网 – <a href="https://opengapps.org/">HERE</a></li>
<li>进入TWRP， 选择open_gapps-arm64-7.1-stock-20180705.zip – Swipt to confirm Flash.</li>
<li>重启之后就可以在系统里面看到了，我选择的这个版本是替换系统应用的版本，所以可以提供一个近乎于原生的体验。</li>
</ol>
<hr>
<h3 id="8-安装杜比ATOMS"><a href="#8-安装杜比ATOMS" class="headerlink" title="8 安装杜比ATOMS"></a>8 安装杜比ATOMS</h3><ol>
<li><strong>XDA原帖</strong> – <a href="https://forum.xda-developers.com/android/apps-games/soundmod-axon-7-dolby-atmos-t3412342">HERE</a></li>
<li>选择dax_lemax2_v1.6.3.zip – Swipe to confirm Flash.<br><strong>NOTE</strong> – 帖子中给出了五个安装包，我基本上是尝试到第二个的时候成功了，所以我在这个把原帖放出来是说，可能这个需要不同的机型去尝试。</li>
<li>重启可以在系统应用中直接看到。可以开启或者关闭。  </li>
<li>可以选择使用Viper或者Dolby，看自己的喜好了。<br><strong>NOTE</strong> – 这种应用，我觉得有一个就够了，其实只是优化一下外放的效果。</li>
</ol>
<hr>
<h2 id="四-结尾"><a href="#四-结尾" class="headerlink" title="四 结尾"></a>四 结尾</h2><p>只是不习惯如此多的ROM里面内置了很多我不使用的应用，还不能删除。<br><strong>其实还是那句话，不建议刷机，如果你知道自己在做什么。</strong></p>
<hr>
<h2 id="五-共享下载资源"><a href="#五-共享下载资源" class="headerlink" title="五 共享下载资源"></a>五 共享下载资源</h2><p>包括我所有文中使用到的安装包及文件，我上传到了微云，下载链接如下。<br><strong>NOTE</strong> – opengapps的安装包我替换成了pico，这样不需要翻墙，只有Google的框架和基础应用，也不会替换系统应用。<br><strong>下载地址</strong> – <a href="https://share.weiyun.com/5wQdXtO">HERE</a><br>密码：9yn57o</p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>All this I did without you</title>
    <url>/2019/09/19/Other/Books_All%20this%20I%20did%20without%20you/</url>
    <content><![CDATA[<p>English Text for exercise the Reading and listening.</p>
<span id="more"></span>

<p>Letter No. 028</p>
<p>July 31st, 1978</p>
<p>Gerald Durrell, a respected conservationist wrote a love letter to his future wife, and then one of his students taking her PhD at Duke University, Lee McGeorge.</p>
<p>~</p>
<p>My darling McGeorge,</p>
<p>You said that things seemed clearer when they were written down. Well, here with is a very boring letter in which I will try and put everything down so that you may read and re-read it in horror at your folly in getting involved with me. Deep breath.</p>
<p>To begin with I love you with a depth and passion that I have felt for no one else in this life and if it astonishes you it astonishes me as well. Not I hasten to say, because you are not worth loving. Far from it. It’s just that, first of all, I swore I would not get involved with another woman. Secondly, I have never had such a feeling before and it is almost frightening. Thirdly, I would never have thought it possible that another human being could occupy my waking (and sleeping) thoughts to the exclusion of almost everything else.</p>
<p>Fourthly, I never thought that — even if one was in love — one could get so completely besotted with another person, so that a minute away from them felt like a thousand years.</p>
<p>Fifthly, I never hoped, aspired, dreamed that one could find everything one wanted in a person. I was not such an idiot as to believe this was possible. Yet in you I have found everything I want: you are beautiful, gay, giving, gentle, idiotically and deliciously feminine, sexy, wonderfully intelligent and wonderfully silly as well. I want nothing else in this life than to be with you, to listen and watch you (your beautiful voice, your beauty), to argue with you, to laugh with you, to show you things and share things with you, to explore your magnificent mind, to explore your magnificent mind, to explore your wonderful body, to help you, protect you , serve you, and bash you on the head when I think you are wrong… not to put too fine a point on it I consider that I am the only man outside mythology to have found the crock of gold at the rainbow’s end.</p>
<p>But — having said all that — let us consider things in detail. Don’t let this become public but… well, I have one or two faults. Minor ones, I hasten to say. For example, I am inclined to be overbearing. I do it for the best possible motives (all tyrants say that) but I do tend (without thinking) to tread people underfoot. You must tell me when I am doing it to you, my sweet, because it can be a very bad thing in a marriage.</p>
<p>Right. Second blemish. This, actually, is not so much a blemish  of character  as a blemish of circumstance. Darling I want you to be you in your own right, and I will do everything I can to help you in this. But you must take into consideration that I am also me in my own right and that I have a headstart on you… what I am trying to say is that you must not feel offended if you are sometimes treated simply as my wife. Always remember that what you lose on the swings, you gain on the roundabouts. But I am an established ‘creature’ in the world, and so — on occasions — you will have to live in my shadow. Nothing gives me less pleasure than this but it is a fact of life to be faced.</p>
<p>Third (and very important and nasty) blemish: jealousy. I don’t think you know what jealousy is (thank God) in the real sense of the word. I know you have felt jealousy over Lincoln’s wife and child but this is what I call normal jealousy, and this — to my regret — is not what I’ve got. What I have got is a black moster that can pervert my good sense, my good humour and any goodness that I have in my make-up. It is really a Jekyll and Hyde situation… my Hyde is stronger than my good sense and defeats me, hard though I try. As I told you, I have always known that this lurks within me, but I couldn’t control it, and my monster slumbered and nothing happened to awake it. Then I met you and I felt my monster stir and become half awake when you told me of Lincoln and others you have known, and with your letter my monster came out of its lair, black, irrational, bigoted, stupid, evil, malevolent. You will never know how terribly corrosive jealousy is; it is a physical pain as though you had swallowed acid or red hot coals. It is the most terrible of feelings. But you can’t help it — at least I can’t, and God knows I’ve tried. I don’t want any ex-boyfriends sitting in church when I marry you. On our wedding day, I want nothing but happiness, for both you and me, and I know I won’t be happy if there is a church full of your ex-conquests. When I marry you I will have no past, only a future: I don’t want to drag my past into our future and I don’t want you to do it , either. Remember I am jealous of you because I love you. You are never jealous of something you don’t care about. OK, enough about jealousy.</p>
<p>Now, let me tell you something… I have seen a thousand sunsets and sunrises, on land where it floods forest and mountains with honey-coloured light, at sea where it rises and sets like a blood orange in a multi-coloured nest of cloud, slipping in and out of the vast ocean. I have seen a thousand moons: harvest moons like gold coins, winter moons as white as ice chips, new moons like baby swans’ feathers.</p>
<p>I have seen seas as smooth as if painted, coloured like shot silk or blue as a kingfisher or transparent as glass or black and crumpled with foam, moving ponderously and murderously.</p>
<p>I have felt winds straight from the South Pole, bleak and wailing like a lost child; winds as tender and warm as a lover’s breath; winds that carried the astringent smell of salt and the death of seaweeds; winds that carried the moist rich smell of a forest floor, the smell of a million flowers. Fierce winds that churned and moved the sea like yeast, or winds that made the waters lap at the shore like a kitten.</p>
<p>I have known silence: the cold, earthy silence at the bottom of a newly dug well; the implacable stony silence of a deep cave; the hot, drugged midday silence when everything is hypnotized and stilled into silence by the eye of the sun; the silence when great music ends.</p>
<p>I have heard summer cicadas cry so that the sound seems stitched into your bones. I have heard tree frogs in an orchestration as complicated as Bach singing in a forest lit by a million emerald fireflies. I have heard the Keas calling over grey glaciers that groaned to themselves like old people as they inched their way to the sea. I have heard the hoarse street vendor cries of the mating Fur seals as they sang to their sleek golden wives, the crisp staccato admonishment of the Rattlesnake, the cobweb squeak of the Bat and the belling roar of the Red deer knee-deep in purple heather. I have heard Wolves baying at a winter’s moon, Red Howlers making the forest vibrate with their roaring cries. I have heard the squeak, purr and grunt of a hundred multi-coloured reef fishes.</p>
<p>I have seen hummingbirds flashing like opals round a tree of scarlet blooms, humming like a top. I have seen flying fish, skittering like quicksilver across the blue waves, drawing silver lines on the surface with their tails. I have seen Spoonbills flying home to roost like a scarlet banner across the sky. I have seen Whales, black as tar, cushioned on a cornflower blue sea, creating a Versailles of fountain with their breath. I have watched butterflies emerge and sit, trembling, while the sun irons their wings smooth. I have watched Tigers, like flames, mating in the long grass. I have been dive-bombed by an angry Raven, black and glossy as the Devil’s hoof. I have lain in water warm as milk, soft as silk, while around me played a host of Dolphins. I have met a thousand animals and seen a thousand wonderful things… but –</p>
<p>All this I did without you. This was my loss.</p>
<p>All this I want to do with you. This will be my gain.</p>
<p>All this I would gladly have forgone for the sake of one minute of your company, for your laugh, your voice, your eyes, hair, lips, body, and above all for your sweet, ever surprising mind which is an enchanting quarry in which it is my privilege to delve.</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>正见——佛陀的证悟（一）诸行无常(选摘)</title>
    <url>/2020/04/10/Other/Books_%E6%AD%A3%E8%A7%81-%E4%BD%9B%E9%99%80%E7%9A%84%E8%AF%81%E6%82%9F-%E8%8A%82%E9%80%89-1/</url>
    <content><![CDATA[<p>这是从《正见-佛陀的证悟》这书中，摘出来的句子，我认为有意义，或者对四法印中的诸行无常有理解的部分， 一直放在QQ空间中， 前两天拿出来看了一下， 觉得还是有不少的体会，所以把它搬过来了， 后续的内容是不是会更新还是要看我懒不懒了。</p>
<p><strong>只是对老与死的厌恶，并不足以让太子离开王宫而踏入未知的世界</strong>；悉达多会采取这么激烈的行动，是因为<strong>他实在无法合理地解释所有已生和将出生的一切众生命运就是如此而已。</strong>如果所有生者都必须衰朽死亡，那么花园中的孔雀、珍宝、华盖、熏香、音乐，放拖鞋的金质拖盘、进口的玻璃水瓶、他与耶输陀罗和罗睺罗的感情、家庭、国家，都变得毫无意义。<strong>这一切的目的到底是什么？</strong></p>
<p>完全不凭借任何科学工具，悉达多太子以吉祥草为垫，坐在一棵菩提树下，探索人类的本性。经过了长时间的思维，他终于了悟到<strong>一切万有，包括我们的血肉、我们所有的情绪和我们所有的觉受，都是由两个以上的元素组合而成。</strong>当两种或多种元素和合在一起，新的现象就会产生；钉子和木头产生了桌子；水和叶子产生了茶；而恐惧、虔诚和救世主，就产生了神。这些最终的产物，并没有独立于其各别元素的存在。相信它真实独立存在，是最大的骗局。而在和合的同时，各个元素也起了变化。只因接触和合，它们的性质也随之改变了。</p>
<p><strong>一切万有，没有一样是以独立、恒常、纯粹的状态存在。</strong>你手上的书不是，原子不是，甚至神祇也不是。</p>
<p>因此悉达多发现，无常并不像一般人以为的就是意味死亡，而是意味变化。任何事物和另一个事物之间的位置或关系转变了，即使是非常细微的变动，都要依循无常的法则。</p>
<p><strong>如果没有盲目的期待，就不会有失望。如果能了解一切都是无常，不会攀缘执著；如果不攀缘执著，就不会患得患失，也才能真正完完全全地活着。</strong></p>
<p>悉达多从恒常的幻相中觉醒，因此我们称他为佛陀、觉者。到现在还是没有人可以长生不老，每个人终究会死，而且每天大概有二十五万人死亡。我们亲近的人不是已经死亡就是将会死亡。然而当亲人死去的时候，我们还是会震惊和悲伤；我们还是继续寻找青春之泉，或是长寿的秘方。</p>
<p>悉达多太子不再需要或渴求长生不老药了。由于了悟到一切事物皆是和合而成，解构无止境，而且一切万有的各个成分，没有一项是以独立、恒常与纯粹的状态存在的，他因此获得解脱。一切和合之物(现在我们知道这是指一切事物)与其无常的本质是合而为一、不可分割的。</p>
<p>当悉达多看到一个人走过，即使他很健康，悉达多所看到的是此人的生与灭同时发生。你也许会认为这样的人生观不太有趣，但在生命的旅程中能够同时看到一体的两面，可以是非常奇妙，而且可能会有很大的满足感。</p>
<p>也就表示现在有个“假设者”，悉达多会同意，只要有[假设者]，就会有上帝存在；但如果没有假设者，就不会有上帝存在。如果没有纸，就不会有书。如果没有水，就不会有冰。如果没有开始，就不会有结束。一件事物的存在，亟需依赖其它事物的存在，因此没有什么是真正独立的。尽管我们以为可以控制变化，但事实上大多是不可能的，因为无法察觉的影响因素太多了。也因为这种相互依存性，一切事物不可避免地会从目前或原始状态中解体。每一个变化中都蕴藏着死亡的因素。今日就是昨日之死。</p>
<p>大部分的人都接受一切生者终将死亡。然而我们对“一切”与“死亡”的定义或许不太一样。对悉达多来说，生指的是一切万有，不仅仅是花朵、蘑菇、人类，而是一切生成或和合的事物。而死亡指的是任何的解体或是解构。无常纯粹是一个简单实在的事实。不可能有一天，某个突发的和合事物会突然变得恒常，更难想象我们能证明这样的事。但是在今天，我们不是将佛陀奉为神明，就是想用科技证明自己比佛陀更高明。</p>
<p>佛陀教导我们，至少我们心中要保持着无常的概念，不要故意去隐藏它。我们借着不断地觉察和合的现象，便会了知因缘相依。认识因缘相依，我们就会认识无常。而当我们知道一切事物皆无常，才不会被种种假设、僵化的信条(不论宗教的或世俗的)、价值体系和盲目信仰所奴役。我们的觉察力可以让我们免于受限于个人的、政治的和感情的戏码之中。我们还可以将这种觉察力导向大至想象之极，小至次原子层次。</p>
<p>由于我们对自己的道德原则感到自豪，而且常强加于别人身上，因此道德观还是具有少许价值。然而，在整个人类历史当中，道德的定义也随着时代精神而一直在改变。美国人度量政治正确性或不正确性的仪表起伏不定，令人迷惑。不管如何称呼种族或文化群体，总是有人会被冒犯，游戏规则一直在改变。</p>
<p>当悉达多提到“一切和合的事物”，他所指的不只是像DNA、你的狗、艾菲尔铁塔、卵子和精子等具体可认知的现象而已。心、时间、记忆和上帝，也是和合而成。而每一和合的成分，又依赖更多不同层次的和合而成。    当悉达多教导无常时，他也超越了一般“结束”的想法，像是那种认为死亡只发生一次就完了的概念。死亡从生、从创造的那一刻开始，就没有停过。每一个变化，都是死亡的一种形式，因此每一个生都包含了另一个事物的死亡。</p>
<p>拿煮鸡蛋来做例子。如果没有不断的变化，蛋就煮不熟；煮好蛋的这个结果，需要某些基本的因缘。很显然的，你要有一颗蛋、一锅水，和一些加热的元素。另外有些非必要的因和缘，像是厨房、灯光、计时器，还有一只把蛋放进锅子的手。另外一个重要的条件，就是没有像是电力中断或是山羊跟进来打翻锅子之类的干扰。此外，每一个条件，例如母鸡，都需要有另一套具足的因缘条件。需要有另一只母鸡生下蛋才能孵出它，还要有安全的地方，有食物才能让它成长。鸡的食物也要有适合的地方生长，并且要能让它吃进去才行。我们可以将非必要和必要条件一直分析到小于原子的程度，而在这个分析的过程中，各种形态、形状、功能和标签也会不断地增加。</p>
<p>当无数的因缘和合在一起，而且没有障碍与干扰，结果是必然的。许多人误以为这是注定的或是运气所致。然而，到了一个程度以后，即使我们祈求蛋不要煮熟，它还是会熟的。</p>
<p>就像蛋一样，所有的现象是由无数的成分所组成，因此它们是可变的。这些无数的成分几乎都不是我们所能控制的，所以会让我们的期待落空。这种不可预料性，遍在于所有的物质、感受、想象、传统、爱情、信任、不信任、怀疑论，甚至上师和弟子以及人与神之间的关系。</p>
<p>信仰，怀疑论以及所有和合的现象一样，都是无常的。</p>
<p>有些人到现在还认为马克·查普曼(Mark Chapman)是谋杀约翰·蓝侬(John Lennon)唯一的罪犯。当我们能了解一个病态而饱受折磨的心是如何形成，并且知道它是在什么样的情况下运作，就比较能够理解并宽恕世界上众多的马克”查普曼。当条件成熟，就像蛋煮熟了一样，即使我们祈祷暗杀事件不要发生，它还是避免不了。超过了某个时间点，我们要改变条件的企图和行为就会徒劳无功了。</p>
<p>恐惧和焦虑是人类心智中主要的心理状态。恐惧的背后是对确定性不断的渴求。我们对未知感到恐惧。人心对肯定的渴望，是根植于我们对无常的恐惧。</p>
<p><strong>但我们常常忘记自己的来日一直都是有限的。即使理智上知道有生必有死，一切和合终将分散，我们的情绪状态还是常常会回到相信恒常的模式，完全忘记相互依存性。这种习气会造成各种负面的情况，像是偏执、寂寞、罪恶感等等。我们会觉得被欺骗、被威胁、被虐待、被冷落，仿佛这个世界只对我们不公平。</strong></p>
<p>佛陀不是一个悲观者、也不是末日论者，他是重视实际者，而我们却多是逃避现实者。当他说一切和合皆是无常，他并不认为那是坏消息，而是简单、科学的事实。我们能认清因缘的不稳定，就会了解自己有力量转化障碍，并且完成不可能的任务。生活中的各个层面都是如此。如果你现在没有一台法拉利，你完全有可能创造出因缘而拥有一台。只要世上有法拉利，你就有机会去拥有它。同样的，如果你想活久一点，可以选择不抽烟和多运动。合理的希望是存在的。而绝望，和它的反面—模一样，都是相信恒常的结果。</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>书</tag>
      </tags>
  </entry>
  <entry>
    <title>正见——佛陀的证悟（二）诸漏皆苦(选摘)</title>
    <url>/2023/08/20/Other/Books_%E6%AD%A3%E8%A7%81-%E4%BD%9B%E9%99%80%E7%9A%84%E8%AF%81%E6%82%9F-%E8%8A%82%E9%80%89-2/</url>
    <content><![CDATA[<p>悉达多没有继续前行，决定留在当地禅修。他在附近的一棵毕钵罗树下找到一块平坦的石头，铺上吉祥草当坐垫。他静默地立下誓言，此身可烂，我可能化为尘土。但直到找到答案，我绝不起身（我今若不证，无上大菩提，宁可碎此身，终不起此座）。</p>
<p>问一个佛教徒“什么是人生的目的？”是不恰当的。因为这个问题暗喻在某一个地方，也许在一个洞穴之中或者在一人山岭之上，存在着一个究竟的目的。仿佛我们可以透过追随圣者，阅读书籍以及熟悉秘教修行，来解开这个秘密。如果这问题是假设在亿万年以前，有某个人或神设计了一个人生目的图表，那么它就是一个有神论的观点。佛教徒不相信有个全能的创造者，而且他们不信为生命的目的已经、或需被决定和定义。</p>
<p>即使在个人身上，痛苦和快乐的定义也时有变动。一个轻佻的调情时刻，可能因为其中一个人想要更认真的关系而突然变调，期待转为恐惧。当你是个小孩的时候，在沙滩上堆筑沙堡就是快乐。在青少年时期，看着穿比基尼的女孩，和赤裸上身的男孩冲浪是快乐。在中年，金钱和事业是快乐。当你八十多岁的时候，收集陶瓷盐罐是快乐。对许多人而言，不断调适于这些无尽而又经常变化的快乐定义，即是“人生的目的”。</p>
<p>我们人类在追求快乐、止息痛苦上，用尽了无数的方法和工具，远超过任何其它的嗜好和职业。因此我们拥有电梯、笔记型电脑、充电电池、电动洗碗机、自动弹出完美土司的烤面包机、狗粪吸尘器、电动鼻毛修剪器、温热坐垫马桶、奴佛卡因麻醉药（ Novocaine）、行动电话、威而刚、整铺地毯子……，然而不可避免的，这些便捷也制造了等量的头痛。</p>
<p>悉达多当时也是在试图根除痛苦。但他不是梦想着诸如展开政治改革、移民到另一个星球或创造世界新经济；他甚至没有想到要创造一个宗教，或发展一套能带来安详与和谐的行为准则。他以开放的心灵来探索痛苦，透过勤奋不懈的沉思，悉达多发现，追本溯源，导致痛苦的是人的情绪。事实上上，情绪即是痛苦。不论如何，直接或间接的，一切情绪都是生于自私，也就是说，它们都与执着于自我有关。更进一步的，他也发现，情绪虽然看似真实，但不是一个人本具存在的一部分。它们不是与生俱来的，也不是某个人或某个神强加在我们身上的诅咒或植入。当某些特定的因与缘聚合在一起的时候，情绪就会生起，例如当你突然认为某个人在批评你、忽视你，或者剥夺你的利益时。然后，相对应的情绪就会接着生起，在接受、陷入这些情绪的当下，我们就失去了觉知和清明。我们“被鼓动”了。因此悉达多发现他的解决方法—-觉知。如果你认真地想要根除痛苦，你必须培养觉知，留心你的情绪，并且学会如何避免被鼓动起来。</p>
<p>如果你像悉达多一样地检视情绪，试图找出它们的起源，你将会发现它们根植于误解，因此根本上是错误的。基本上，所有的情绪都是一种偏见，在每一种情绪之中，都存在有分别心的成分。</p>
<p>看透了宫廷生活的表象，悉达多现在能够看见自己的身体是不具本质的。在他的眼中，火圈和身体具有相同的本性。如果有人相信其中之一真实存在—-不论是短暂的或恒常的——那么他的信念就是根源于误解；如此，便是失去了觉察，也就是佛教徒所说的无明。我们的情绪，就是从这无明所生起。从失去了觉察到情绪生起的过程，可以用四真谛完全解释。我们接下来会谈到。</p>
<p>魔罗想要争取更多追随者，因而聪明地鼓吹自由，但是如果有人真的行使自由，他不一定会喜欢。基本上，我们只想要让自己，而不想让他人拥有自由。难怪，我们真的行使所有的自由，就不会被邀请去参加任何派对了。</p>
<p>悉达多的解答是—-培养对情绪的觉察。如果情绪正在起的时候，你能够有所觉察，即使只是一点点，不能够限制它们的活动；它们变成象有监护人在旁的青少年。有人在监视着，魔罗的力量就会减弱。悉达多没有被毒箭所伤，因为他觉察到这些只不过是幻相。同样的，我们自己强大的情绪，也可以变成象花瓣一般地不具杀伤力。当天女接近悉达多的时候，他清楚地了解，她们如同火圈，只是和合而成的，因此她们失去了诱惑力，无法动他一丝一毫。同样的，只要了解我们所欲求的对象事实上是和合而成的现象，就能破除诱惑的魔咒。</p>
<p>当你开始注意到情绪所能够造成的损害，觉知就会开始发展。当你有了觉知—-举例来说，如果你知道自己正站在悬崖上行走不再那么恐怖，事实上，它反而是非常刺激的。不知才是恐惧的真正根源。觉知不会妨碍你的生活，反而让生命更加充实。如果你在享用一杯茶，而且了解短暂事物的甘与苦，你将能够真正的享受那杯茶。</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>书</tag>
      </tags>
  </entry>
  <entry>
    <title>正见——佛陀的证悟（三）诸法无我 (选摘)</title>
    <url>/2023/08/20/Other/Books_%E6%AD%A3%E8%A7%81-%E4%BD%9B%E9%99%80%E7%9A%84%E8%AF%81%E6%82%9F-%E8%8A%82%E9%80%89-3/</url>
    <content><![CDATA[<p>所有这些不同的情绪及其结果，都来自于错误的理解，而这个误解来自一个源头，也就是所有无明的根源—-执着于自我。</p>
<p>自我只是另一个误解。当我们看着自己的身体（色）、感受（受）、想法（想）、行为（行）和意识（识）的时候，我们通常制造出一种自我的概念。人们受制约，把这种概念视为恒常而且真实的。</p>
<p>但是悉达多了悟到，不论是在身体里或外，都找不到一个独立存在的实体，足以被称为自我。如同火圈的视觉错幻一般，自我也是虚幻的。它是谬误的；基本上错误，而究竟上不存在。但是如同我们被火圈所迷惑一般，我们也全都被自我所迷惑了，执着于谬误的自我，是无明的荒谬行为。它不断地制造更多的无明，导致了各种痛苦和失望。</p>
<p>无明单纯的就是不了解事实，或对事实了解不正确，或认识得不完整。所有这些形式的无明，都导致误解和误判，高估和低估。假设你正在寻找一个朋友，忽然看到他在远方的田野中。一走近，却发现你误把一个稻草人当做是他了。你一定会感到失望。这并非有个恶作剧的稻草人或你的朋友试图偷偷摸摸误导你，而是你自己的无明背叛了你。任何源自无明所做的行为，都是冒险。我们在不了解或不完全了解的情况下行动，就不会有信心。我们根本的不安全感因此而生起。创造出所有这些有名或无名、已知或未知的各种情绪。</p>
<p>悉达多了悟到自我并非独立存在、自我只不过是一个标签、因而执着于自我就是无明，这可能是人类历史上最大的发现。然而，虽然自我这个标签或许毫无根据，要摧毁它却不是一个简单的任务。执着于这个称作自我的标签，是所有的概念中最难以破除的。</p>
<p>魔罗只不过是悉达多的我执。故事中，描述魔罗是个英俊威武、无役不克的战士，这个比喻相当适切。自我，如同魔罗一般，威力强大且贪得无厌、自我中心且虚伪欺诈、贪求众人目光、机敏伶俐且爱慕虚荣。我们很难记住，自我如同火圈的幻相一般，是和合而成、不独立存在而且善于改变。</p>
<p>骄慢和自怜息息相关。我执纯粹是一种自我纵容，认为自己的生命比其他人的都更艰难更悲哀。当自我发展出自怜的时候，便让其它人生起悲悯的空间消失了。</p>
<p>虽然我们不认为自己这么绝望，而且相信自己是受过教育、正常、清醒的，但是当我们看见及感受一切都是真实存在时，我们的行为就如同那位沙漠中的迷失者。我们急切地想要找到真实的伴侣关系、安全感、表扬、成功，或只是安详宁静。我们甚至能抓到与欲望相似的东西。但就象那位迷失者，当我们依赖外在的实体性时，终究会失望。事物并不如其所显现—–它们是无常的，而且不完全在我们的掌控之中。</p>
<p>如果我们象悉达多一样确实地去分析，就会发现诸如形体、时间、空间、方向、大小等附加的标签，都很容易被解构。悉达多了悟到，甚至自我都只存在于相对的层次，恰如海市蜃楼一般。他的体悟，终止了期待、失望与痛苦的循环。在证悟的时刻，他自忖，我已找到了一条深奥、安详、非极端、清晰、满愿又有如甘露一般之道。然而，如果我想表达它，如果我想教给他人，没有人有能力听闻了解。因此我将留在林中，安住于此祥和状态之中。</p>
<p>然而，悉达多并非不理性，他只是明确地指出一般的、理性的思惟是有限的。我们不能，或不愿超越我们自己的舒适区去了解。用昨日、今日、明日这种线性的概念来操作，比如说“时间是相对的”，来得实用得多。我们没有被设定成这么想的：我能不改变大小或形状而进入那牦牛角。我们不能破除大和小的概念；相反的，我们一直被世代传下来的安全而狭隘的观点所局限。然而，当这些观点被审视时，却都站不住脚。举例来说，这个世界如此依赖的线性时间观念，无法说明时间没有真正的起始也没有终止的事实。</p>
<p>因此当我们听到一个人不改变尺寸，就可容入牦牛角中时，我们没有太多选择—–我们可以很“理性”，认为这根本不可能而驳斥它；或者我们引用某种对法术的神秘信仰或盲目崇拜而说，当然，密勒日巴是多么伟大的瑜珈行者，当然他能这么做，甚至还不只是这些呢。这两种见解都是扭曲的，因为否认是一种低估，而盲信则是一种高估。</p>
<p>一条河，水在流，永远在变，然而我们仍然称它为河流。如果一年之后我们再度造访，会认为它是同一条河。但它是如何相同的呢？如果我们单独挑出一个面向或特性，这相同性就不成立了。水不同了，地球在银河中转动的位置也不同了，树叶已落，新叶又长出来了—-剩下的只是一个相似于我们上次见到的河流表象而已。以“表象”作为“真实”的基础是相当不可靠的。经由简单的分析，就能显示出我们一般对所谓真实的基础，都只是一些模糊的概括和假设。虽然悉达多也使用一般人定义“真实”时所用的字眼—-非想象的、确定的、不改变的、无条件的—-但他更精确地使用这些字眼，而非概括性的。在他的观点上，不改变必然意指在所有的方面都不改变，甚至经过彻底的分析后，仍然绝无例外。</p>
<p>悉达多发现，要确定某个东西真实存在的唯一办法，就是证明它独立存在，而且不需要诠释、不能造作或不会改变。对悉达多而言，我们日常生活上一切似乎能作用的机制，不论是身体的、情感的及概念的，都是由不稳固、不恒常的部分所聚合而成，因此它们随时都在改变。我们可以在惯常的世界中了解这个论点。举例来说，你可以说你在镜中反射的影像不是真实存在的，因为他需要依赖你站在镜子前面才行。类似的，事物要真实或独立地存在，就不能被制作或被创造的，因为这要依赖制造者。</p>
<p>许多对佛陀的教法不甚了解的人，认为佛教是病态的，他们认为佛教徒否定快乐，只想到痛苦。他们设想佛教徒排斥美丽及身体的享受，因为这些是诱惑；佛教徒应该是纯净而节制的。事实上，在悉达多的教法中，并不特别反对美丽和享乐甚于其它的任何概念－－只要我们不认为它们是真实存在的，而迷失其中。</p>
<p>虽然悉达多证悟了空性，但空性并不是由他或任何人所制造的。空性不是悉达多获得天启的结果，也不是为了让人们快乐所发展出来的理论。不论悉达多开示与否，空性即是如此。我们甚至不能说它一直都是如此，因为它超越时间，而且不具形式。空性也不应被解释为存在的否定（也就是说，我们不能说这个相对的世界不存在），因为要否定某个事物，你就要先承认有某个东西可以被否定才行。空性也不会消除我们日常的经验。悉达多从来没说过有什么可以取代我们所觉受的更壮丽、更美好、更纯粹或更神圣的东西。他也不是虚无主义者，否定世间存在事物的显现与功能。</p>
<p>悉达多会同意这两种情况－－当你醒着时，你不能飞；而当你睡着时，你能飞。这道理是在于因缘是否具足；要能飞翔的一个缘，是睡眠。当你没有它，你就不能飞，有了它，你就能飞。假设你梦见你能飞，而醒来后还继续相信你能飞，那就麻烦了。你会掉下来，而且会失望。悉达多说，即使在相对世界中醒着，我们还是在无明中沉睡，如同在他出走那夜的宫女一般。恰当的因缘聚合时，任何事情都可能出现。但当因缘消散，显现也就停止。</p>
<p>这也是为何在悉达多教法一千五百年后，一位叫帝洛巴的佛法继承者，对他的学生那洛巴说，不是显现（外相）困住了你，而是你对显现（外相）的执着困住了你。</p>
<p>如同环球小姐选美一样，在这个世界上，我们所做、所想的任何事物，都有是基于一个非常有限的共同逻辑系统。我们非常强调共识。如果大多数人同意某件事物是真实的，通常它就变成正当有效的。当我们看着一个小池塘，我们人类认为它只是个池塘，但对池里的鱼儿来说，这是它们的宇宙。如果我们采取民主的立场，那么水中族群一定会赢，历为它们比我们这些观池塘者为数多得多。多数决不见得永远都对。糟糕的大卖座影片可以赚得大量的利润，而一部独立制作的优秀影片却只有少数人观赏。而且由于我们依赖群体思考，这世界通常是被最短视而腐败的统治者所治理；民主制度只是诉诸于最小公约数而已。</p>
<p>然而了悟不必是致命的。我们不需要象井蛙一般，面对空性惊吓而亡。如果海蛙能够有稍微多点的慈悲心和善巧，也许它可以做一个更好的向导，井蛙也不至于吓死，也许它还会移居到海边也说不定。而我们也不需要有超自然的天赋才能了解空性。这和教育以及愿意观察事物所有的部分以及隐藏的因缘有关。有了这种洞见，我们就会象布景设计师或摄影助理在看电影。专业者能看见我们所看不见的东西。他们看见摄影机如何布置，以及其他观众们不知道的电影技巧，因此对他们而言，这幻相被拆解了。但专业者在看电影的时候，还是可以尽情享受。这就是悉达多超然的幽默。</p>
<p>悉达多没有一开始就用空性来惊吓大家，反而以一般的方式，诸如禅定以及行为规范－－做正确的事、勿盗窃、勿妄言等来教导众多的弟子。根据弟子的本性，他定下了不同程度的出离及苦行，从削发到不食肉等等。对一开始无法听闻或了解空性的人，以及天性适合苦修的人而言，这些状似宗教性的严格道路很有效。</p>
<p>业（Karma）这个字几乎和佛教成了同义字。通常它被理解为一种道德系统的报应—-恶业与善业。然而，业只是一种因果的法则，不应该与道德或伦理混淆。</p>
<p>你也行会认为这是矛盾的。佛陀自我矛盾，说他不存在，一切皆是空性，然后他又教导了道德和救赎。然而这些方法是必要的，以免吓走那些尚未准备好，还不能被引介空性的人。他们用了这些方法，因而变得祥和，易于接受真正的教法，这就如同说那里是有一条蛇。然后把领带丢到窗外一般。这些无限的方法就是道路。然而，道路本身终究也需要被抛弃，如同你抵达彼岸时，就得抛弃舟一般。你抵达时必须要下船。在完全证悟的那一刻，你必须抛弃佛教。精神之路是一个暂时解答，它是在空性被了悟之前所使用的安慰剂。</p>
<p>如同在电影院里的孩童，我们被幻相掳获了。从这儿开始，衍生了我们的虚荣、野心和不安全感。我们爱上了自己创造的幻相，发展出对自己的外表、财富和成就过度的骄慢。好比戴了面具，却骄傲地认为面具是真实的你。</p>
<p>了悟空性的悉达多，对菩提树下的忘忧草或宫殿里的丝绸坐垫没有好恶分别。金线织成的坐垫价值较高，完全是由人类的野心和欲望造作而来的。事实上，山中的隐士也许会觉得忘忧草比较柔软而干净，而且最大的好外是坐坏了也不需要担心。你不需要对它喷药，以免猫用爪子去抓它。宫廷生活充满了这类的“珍品”，需要相当多的维修保养。悉达多是属于比较喜欢草垫的人，因此他不需要常常回家去补充什么东西。</p>
<p>我们人类认为心胸宽广是一种美德。要扩展心胸，重要的是不要安于令我们舒适或习惯的东西。如果我们有勇气超越世俗，不被惯常逻辑的界线所限制，就能得到利益。如果我们能超越界线，就能了解空性是如此可笑地单纯。密勒日巴躲进牦牛角不会比某个人戴上手套还令你讶异。我们所要挑战的，是对惯常逻辑、文法、字母、数学公式的执着。如果能记得这些习惯的和合本性，我们就能断除它们。它们不是不能破除的，所需要的只是一个条件完全正确、资讯适时到位的情况，你可能突然发现所有依赖的工具都不是那么坚实，它们有弹性、可弯曲。你的观点会改变。</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>书</tag>
      </tags>
  </entry>
  <entry>
    <title>诗词收集</title>
    <url>/2023/01/09/Other/Books_%E8%AF%97%E8%AF%8D%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>收集一些自己平时见到的诗句：</p>
<h4 id="Update-2018-12-24"><a href="#Update-2018-12-24" class="headerlink" title="Update 2018-12-24"></a>Update 2018-12-24</h4><ol>
<li>邻人焉有许多鸡，乞丐何曾有二妻。当时尚有周天子，何事纷纷说魏齐。</li>
<li>算不尽芸芸众生微贱命，回头看五味杂陈奈何天。</li>
<li>何时杖策相随去，任性逍遥不学禅。</li>
<li>百无一用是情深，万般奈何为情困。</li>
<li>桃李春风一杯酒，江湖夜雨十年灯。</li>
<li>杀人放火金腰带，修桥补路无尸骸。</li>
<li>残雪凝辉冷画屏，落梅横笛已三更，更无人处月胧明。<br>我是人间惆怅客，知君何事泪纵横，断肠声里忆平生。 纳兰性德《浣溪沙·残雪凝辉冷画屏》</li>
<li>曾经沧海难为水，除却巫山不是云。取次花丛懒回顾，半缘修道半缘君。</li>
<li>人生到处应何似，应似飞鸿踏雪泥。</li>
<li>山有木兮木有枝，心悦君兮君不知。</li>
<li>嫦娥应悔偷灵药，碧海青天夜夜心。</li>
<li>满堂花醉三千客，一剑霜寒十四州。</li>
<li>早岁读书无甚解，晚年省事有奇功。</li>
<li>车遥遥，马憧憧。<br>君游东山东复东，安得奋飞逐西风。<br>愿我如星君如月，夜夜流光相皎洁。<br>月暂晦，星常明。<br>留明待月复，三五共盈盈。 范成大《车遥遥篇》  </li>
<li>一身诗意千寻瀑，万古流芳四月天。</li>
<li>未曾相逢先一笑，初会便已许平生。</li>
<li>三千年读史不过功名利禄，九万里悟道终归诗酒田园。</li>
<li>君埋泉下泥销骨，我寄人间雪满头。</li>
<li>伤心桥下春波绿，曾是惊鸿照影来。</li>
<li>醉后不知天在水，满船清梦压星河。</li>
<li>秋风吹尽旧庭柯，黄叶丹枫客里过。一点禅灯半轮月，今宵寒较昨宵多。</li>
<li>细雨生寒未有霜，庭前木叶半青黄。小春此去无多日，何处梅花一绽香。</li>
<li>岁久人无千日好，春深花有几时红。是非入耳君须忍，半作痴呆半作聋。</li>
<li>清风不识字，何故乱翻书。</li>
<li>三过平山堂下，半生弹指声中。十年不见老仙翁，壁上龙蛇飞动。欲吊文章太守，仍歌杨柳春风。休言万事转头空，未转头时皆梦。</li>
<li>山月不知心里事，水风空落眼前花。</li>
<li>未若锦囊收艳骨，一抔冷土掩风流。</li>
<li>莫言下岭便无难，赚得行人空喜欢。正入万山圈子里，一山放过一山拦。</li>
<li>有美一人兮婉如清扬，识曲别音兮令姿煌煌。绣袂捧琴兮登君子堂，如彼萱草兮使我忧忘。欲赠之以紫玉尺，白银珰，久不见之兮湘水茫茫。</li>
<li>生如逆旅，一苇以航。</li>
</ol>
<h4 id="Update-2023-01-09"><a href="#Update-2023-01-09" class="headerlink" title="Update 2023-01-09"></a>Update 2023-01-09</h4><ol>
<li>回头万里，故人长绝。易水萧萧西风冷，满座衣冠似雪。《贺新郎·别茂嘉十二弟》辛弃疾</li>
<li>洛阳城里春光好，洛阳才子他乡老。《菩萨蛮·洛阳城里春光好》韦庄</li>
<li>伤心桥下春波绿，曾是惊鸿照影来。《沈园二首·其一》陆游</li>
<li>谁见幽人独往来，缥缈孤鸿影。《卜算子·黄州定慧院寓居作》苏轼</li>
<li>琵琶弦上说相思。当时明月在，曾照彩云归。《临江仙·梦后楼台高锁》晏几道</li>
<li>此后锦书休寄，画楼云雨无凭。《清平乐·留人不住》晏几道</li>
<li>美人自刎乌江岸，战火曾烧赤壁山，将军空老玉门关。</li>
<li>食肉何曾尽虎头，卅年书剑海天秋。<br>文章幸未逢黄祖，襆被今犹窘马周。<br>自是汝才难用世，岂真吾相不当侯。<br>须知少日拏云志，曾许人间第一流。 清代吴庆坻《题三十计小象》 </li>
<li>时人不识凌云木，直待凌云始道高。</li>
<li>总有千古，横有八荒，前途似海，来日方长。</li>
<li>鹏北海，风朝阳，又携书剑路茫茫。明年此日青云去，却笑人间举子忙。</li>
</ol>
<h4 id="Update-2023-03-01-派克直播间飞花令"><a href="#Update-2023-03-01-派克直播间飞花令" class="headerlink" title="Update 2023-03-01 派克直播间飞花令"></a>Update 2023-03-01 派克直播间飞花令</h4><ol>
<li>不是逢人苦誉君，亦狂亦侠亦温文。照人胆似秦时月，送我情如岭上云。 </li>
<li>一生一代一双人，争教两处销魂。相思相望不相亲，天为谁春？</li>
<li>也信美人终作土，不堪幽梦太匆匆。</li>
<li>银字笙调。心字香烧。料芳悰、乍整还凋。待将春恨，都付春潮。过窈娘堤，秋娘渡，泰娘桥。 </li>
<li>中心藏之，何日忘之!</li>
</ol>
<h4 id="Update-2023-03-05-派克直播间飞花令"><a href="#Update-2023-03-05-派克直播间飞花令" class="headerlink" title="Update 2023-03-05 派克直播间飞花令"></a>Update 2023-03-05 派克直播间飞花令</h4><ol>
<li>钓鱼台，十年不上野鸥猜。白云来往青山在，对酒开怀。欠伊周济世才，犯刘阮贪杯戒，还李杜吟诗债。酸斋笑我，我笑酸斋。<br>晚归来，西湖山上野猿哀。二十年多少风流怪，花落花开。望云霄拜将台。袖星斗安邦策，破烟月迷魂寨。酸斋笑我，我笑酸斋。  </li>
<li>知君用心如日月，事夫誓拟同生死。<br>还君明珠双泪垂，恨不相逢未嫁时。  </li>
<li>千古风流八咏楼，江山留与后人愁。<br>水通南国三千里，气压江城十四州。  </li>
<li>问余何意栖碧山，笑而不答心自闲。<br>桃花流水窅然去，别有天地非人间。  </li>
<li>德也狂生耳。偶然间，缁尘京国，乌衣门第。有酒惟浇赵州土，谁会成生此意。不信道、竟逢知己。青眼高歌俱未老，向尊前、拭尽英雄泪。君不见，月如水。<br>共君此夜须沉醉。且由他，蛾眉谣诼，古今同忌。身世悠悠何足问，冷笑置之而已。寻思起、从头翻悔。一日心期千劫在，后身缘、恐结他生里。然诺重，君须记。 纳兰性德《金缕曲·赠梁汾》</li>
<li>恨君不似江楼月，南北东西，南北东西，只有相随无别离。<br>恨君却似江楼月，暂满还亏，暂满还亏，待得团圆是几时？ 吕本中《采桑子·恨君不似江楼月》  </li>
<li>自君之出矣，不复理残机。<br>思君如满月，夜夜减清辉。 张九龄《赋得自君之出矣》</li>
</ol>
<h4 id="Update-2023-03-08-派克直播间飞花令，-“江”-字飞花令"><a href="#Update-2023-03-08-派克直播间飞花令，-“江”-字飞花令" class="headerlink" title="Update 2023-03-08 派克直播间飞花令， “江” 字飞花令"></a>Update 2023-03-08 派克直播间飞花令， “江” 字飞花令</h4><ol>
<li>江东子弟今虽在，肯与君王卷土来？ 王安石《叠题乌江亭》</li>
<li>江雨霏霏江草齐，六朝如梦鸟空啼。 韦庄《台城》</li>
<li>残灯无焰影幢幢，此夕闻君谪九江。<br>垂死病中惊坐起，暗风吹雨入寒窗。元稹《闻乐天授江州司马》</li>
<li>少年听雨歌楼上，红烛昏罗帐。壮年听雨客舟中，江阔云低、断雁叫西风。<br>而今听雨僧庐下，鬓已星星也。悲欢离合总无情，一任阶前、点滴到天明。 蒋捷《虞美人·听雨》</li>
<li>杀尽江南百万兵，腰间宝剑血犹腥！<br>老僧不识英雄汉，只管哓哓问姓名。 朱元璋 《不惹庵示僧》</li>
</ol>
<h4 id="Update-2023-08-11-历史记录"><a href="#Update-2023-08-11-历史记录" class="headerlink" title="Update 2023-08-11 历史记录"></a>Update 2023-08-11 历史记录</h4><ol>
<li>缺月挂疏桐，漏断人初静。谁见幽人独往来，缥缈孤鸿影。惊起却回头，有恨无人省。拣尽寒枝不肯栖，寂寞沙洲冷。  ——《卜算子·黄州定会院寓居作》</li>
</ol>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github建立个人博客记录</title>
    <url>/2017/12/27/Other/Hexo_Install/</url>
    <content><![CDATA[<p>建立Blog，记录过程<br>所有的配置都是在<a href="https://getfedora.org/en/workstation/">Fedora 27 Workstation</a>版本下进行，Windows配置环境恶心了我很久所以不做介绍。</p>
<h1 id="Hexo部署环境"><a href="#Hexo部署环境" class="headerlink" title="Hexo部署环境"></a>Hexo部署环境</h1><p>Hexo运行在Linux环境中的配置及其简单，只需要确认系统中安装了git和Nodejs就好，在Fedora27中已经默认有Git软件包，如果需要安装git使用<code>dnf install -y git</code>就好。目前我们只需要添加nodejs就可以了，准备工作开始～<br><strong>使用<code>git version</code> 进行git是否存在于系统中的检测。</strong></p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Node.js的安装只需要两条命令，按照顺序执行就好：  </p>
<ol>
<li><p>用于系统的更新，基本上等待命令结束就可以，只是保证运行环境的所有软件包都是最新的状态。</p>
<blockquote>
<p><code>[root@localhost test]# dnf update -y</code>  </p>
</blockquote>
</li>
<li><p>用于安装Nodejs，dnf管理器会自动配置需要的依赖软件，也是等待就好，没有特别的操作。</p>
<blockquote>
<p><code>[root@localhost test]# dnf install -y nodejs</code></p>
</blockquote>
</li>
</ol>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li><p>接下来需要选择一个你想安装的目录，例如：&#x2F;root&#x2F;Document&#x2F;Hexo&#x2F;test  </p>
</li>
<li><p>那么需要确定工作目录并且切换过去  </p>
<blockquote>
<p><code>[root@localhost test]# cd /root/Document/Hexo/test</code>  </p>
</blockquote>
</li>
<li><p>之后所有的操作都会在这个目录或者它的子目录，请留意。  </p>
<blockquote>
<p><code>[root@localhost test]# npm install hexo -g</code>  </p>
</blockquote>
</li>
<li><p>等待安装结果…….  </p>
</li>
<li><p>安装结束之后，查看是否安装成功,使用：  </p>
<blockquote>
<p><code>[root@localhost test]# hexo -v</code>  </p>
</blockquote>
</li>
<li><p>如输出如下信息则说明安装成功，可以执行下一步。  </p>
<blockquote>
<p>[root@localhost test]# hexo -v<br>hexo: 3.4.4<br>hexo-cli: 1.0.4<br>os: Linux 4.13.13-300.fc27.x86_64 linux x64<br>http_parser: 2.7.1<br>node: 8.9.3<br>v8: 6.1.534.48<br>uv: 1.16.0<br>zlib: 1.2.11<br>ares: 1.10.1-DEV<br>modules: 57<br>nghttp2: 1.25.0<br>openssl: 1.0.2m-fips<br>icu: 57.1<br>unicode: 8.0<br>cldr: 29.0<br>tz: 2016b</p>
</blockquote>
</li>
</ol>
<p>安装成功，没有写安装失败的解决方法，因为我觉得难以失败，成功率很高的。  </p>
<h4 id="失败解决方案"><a href="#失败解决方案" class="headerlink" title="失败解决方案"></a>失败解决方案</h4><ol>
<li>失败请更换cnpm 或者 更换淘宝源重试。  </li>
<li>如果安装，确认自己在正确的目录下，执行<code>npm install</code>重试</li>
</ol>
<h3 id="安装Hexo-server"><a href="#安装Hexo-server" class="headerlink" title="安装Hexo-server"></a>安装Hexo-server</h3><p>安装Hexo-server主要是作为本地测试使用，通过本地localhost:4000访问来预览，方便调整。  </p>
<ol>
<li><p>使用如下命令执行安装：  </p>
<blockquote>
<p><code>[root@localhost test]npm install hexo-server -g</code></p>
</blockquote>
</li>
<li><p>执行启动hexo-server，确认是否可以正常使用：  </p>
<blockquote>
<p><code>[root@localhost test]hexo s</code><br>OR<br><code>[root@localhost test]hexo server</code>  </p>
</blockquote>
</li>
<li><p>输入如下结果则正常启动：  </p>
<blockquote>
<p>[root@localhost test]# hexo s<br> INFO  Start processing<br> INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000/</a>. Press Ctrl+C to stop.  </p>
</blockquote>
</li>
<li><p>这里服务器已经启动了，使用Ctrl+C停止服务，恢复正常的Shell窗口。</p>
</li>
</ol>
<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><ol>
<li><p>这里需要创建新的Blog目录，例如：&#x2F;root&#x2F;Document&#x2F;Hexo&#x2F;test</p>
</li>
<li><p>在test目录下执行：  </p>
<blockquote>
<p><code>[root@localhost test] hexo init</code>  </p>
</blockquote>
</li>
<li><p>初始化会将Blog所需的文件放入test文件夹中，这个目录就是我们需要推到github上面的东西。也就是整个博客的根目录。</p>
</li>
</ol>
<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><p>这部分的内容已经和我们本地的计算机没有什么太大的关系了，我们需要去Github上面注册一个账户，在这个账户里面添加一个新的repo，例如： test.github.io<br>我们在本地建立的site使用git工具，将整个blog发布到对应的软件仓库中，接下来我们需要配置git的信息<br>使用命令配置git的用户名和邮箱：  </p>
<blockquote>
<p><code>[root@localhost test] git config --global user.name &quot;yourname&quot;</code><br><code>[root@localhost test] git config --global user.email &quot;youremailaddress&quot;</code></p>
</blockquote>
<h3 id="添加SSH认证"><a href="#添加SSH认证" class="headerlink" title="添加SSH认证"></a>添加SSH认证</h3><p>使用ssh进行与github的通信可以免去我们每次都输入用户名密码的繁琐，因此我们需要为本地的计算机生成一个SSH的KEY。  </p>
<ol>
<li><p>命令如下：  </p>
<blockquote>
<p><code>[root@localhost test] ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>  </p>
</blockquote>
</li>
<li><p>期间会让我们输入密码进行验证，如果这个位置输入密码，今后每次连接到github的时候，都需要输入这个密码才能连接，如果这里我们不输入密码直接回车，今后连接的时候就不需要密码了，推送的内容会直接被推送，之后返回结果。  </p>
</li>
<li><p>生成的密钥会直接放在当前用户家目录下的隐藏文件夹里，因此我们把他找出来：  </p>
<blockquote>
<p><code>[root@localhost test] cd ~/.ssh</code>  </p>
</blockquote>
</li>
<li><p>复制id_rsa.pub文件内的所有内容，粘贴到github的添加SSH密钥位置。成功。</p>
</li>
</ol>
<h3 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h3><p>测试连接到Github是否能够成功，使用如下命令：  </p>
<blockquote>
<p><code>[root@localhost test] ssh -T git@github.com</code>  </p>
</blockquote>
<p>如果上一部分生成SSH密钥的时候输入了密码，请在这个命令运行之后按照提示输入密码，返回结果如下：  </p>
<blockquote>
<p>[root@localhost .ssh]# ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a><br>Hi test! You’ve successfully authenticated, but GitHub does not provide shell access.  </p>
</blockquote>
<p>我们已经成功的连接上了Github上面的repo，github的配置结束了～  </p>
<h3 id="配置Hexo-deployer"><a href="#配置Hexo-deployer" class="headerlink" title="配置Hexo-deployer"></a>配置Hexo-deployer</h3><p>git可以将我们的blog推送到repo上面去，但是本身我们也可以使用hexo提供的工具来进行blog的更新。  </p>
<ol>
<li><p>直接编辑hexo的配置文件： _config.yml  </p>
<blockquote>
<p><code>[root@localhost test]# vim _config.yml</code></p>
</blockquote>
</li>
<li><p>修改配置文件中的这个部分，如下是最终的修改结果：  </p>
<blockquote>
<p> 77 # Deployment<br> 78 ## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p>
</blockquote>
</li>
</ol>
<p> 79 deploy:<br> 80   type:  git<br> 81   repo:  <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>:test&#x2F;test.github.io.git<br> 82   branch:  master  </p>
<ol start="3">
<li><p>现在将我们本地的默认站点推送到Github上面去试试吧！   </p>
<blockquote>
<p><code>[root@localhost test]# hexo d</code><br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder…<br>INFO  Copying files from public folder…<br>INFO  Copying files from extend dirs…<br>[master caa83a9] Site updated: 2017-12-27 18:26:01<br> 1 file changed, 63 insertions(+), 11 deletions(-)<br>To github.com:test&#x2F;test.github.io.git<br>62dcd56..caa83a9  HEAD -&gt; master<br>Branch master set up to track remote branch master from   <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:test&#x2F;test.github.io.git.<br>INFO  Deploy done: git  </p>
</blockquote>
</li>
<li><p>输出最后Deploy done,就表示我们的原始页面已经上传成功了～，访问Repo的名字就可以直接看到初始blog的样子了。</p>
</li>
<li><p>后续插件安装的记录:</p>
<pre class="language-none"><code class="language-none">[root@localhost ~]# cnpm list -g --depth 0
&#x2F;usr&#x2F;lib
├── cnpm@6.0.0
├── hexo@3.4.4
├── hexo-cli@1.1.0
├── hexo-generator-archive@0.1.5
├── hexo-generator-category@0.1.3
├── hexo-generator-index@0.2.1
├── hexo-generator-search@2.4.0
├── hexo-generator-tag@0.2.0
├── hexo-render-pug@2.1.0
├── hexo-site@0.0.0
└── npm@6.4.1</code></pre></li>
</ol>
<h1 id="Hexo常用命令说明"><a href="#Hexo常用命令说明" class="headerlink" title="Hexo常用命令说明"></a>Hexo常用命令说明</h1><p>Hexo目录下常用的命令有：</p>
<pre class="language-none"><code class="language-none">[root@localhost test]# hexo s           &#x2F;&#x2F;启动hexo本地服务进行blog预览
[root@localhost test]# hexo new TITLE   &#x2F;&#x2F;新建文章
[root@localhost test]# hexo clean       &#x2F;&#x2F;清除缓存
[root@localhost test]# hexo g           &#x2F;&#x2F;重新生成站点页面文件
[root@localhost test]# hexo d           &#x2F;&#x2F;推送到github</code></pre>
<h1 id="添加鼠标爆炸点击效果"><a href="#添加鼠标爆炸点击效果" class="headerlink" title="添加鼠标爆炸点击效果"></a>添加鼠标爆炸点击效果</h1><p>在&#x2F;themes&#x2F;yelee&#x2F;layout&#x2F;layout.ejs的文件中，文件开始位置加入如下字段：  </p>
<pre class="language-none"><code class="language-none">&lt;head&gt;
  &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; 
  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; 
  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;firework.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;</code></pre>
<p>在themes&#x2F;yelee&#x2F;source&#x2F;js&#x2F;建立如下文件firework.js,文件内容如下：  </p>
<pre class="language-none"><code class="language-none">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo备份和恢复</title>
    <url>/2018/07/03/Other/Hexo_backup-restore/</url>
    <content><![CDATA[<p>hexo项目的备份和还原方法。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个特别无奈的问题，我尝试在我写博客的虚拟机里面使用了一个破坏性的命令，dnf autoremove, 就是这个命令导致我的虚拟机彻底坏了。所以我恢复了快照，但是是两个月前的记录了。发现自己的blog无法恢复，找到了这样一个解决方案。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>在github上设置一个新的分支hexo。</li>
<li>在这个分支上放置自己工作目录下的原始文件。</li>
<li>每次推送Blog到github的时候同时推送自己的工作目录到github。</li>
<li>当需要恢复自己的本地环境的时候，直接从github上面Clone下来就可以了。</li>
</ol>
<p>Note: 之前的思路是去hexo的工作目录下面找blog的项目，编译之后推送静态页面到gtihub。现在是直接把工作目录传上去，用的时候下载下来。  </p>
<h3 id="1-准备一个新的工作目录"><a href="#1-准备一个新的工作目录" class="headerlink" title="1. 准备一个新的工作目录"></a>1. 准备一个新的工作目录</h3><p>在目录下git clone 自己的Blog项目。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/xxxx/xxxx.github.io.git</code></pre>
<h3 id="2-目录的构建"><a href="#2-目录的构建" class="headerlink" title="2. 目录的构建"></a>2. 目录的构建</h3><ol>
<li>到xxxx.github.io目录下面，保留下面的.git目录，删除所有的其余目录。  </li>
<li>将之前的hexo工作目录的所有文件复制到xxxx.github.io下。  </li>
<li>在lxxxx.github.io目录下放置.gitignore文件，内容如下：  <pre class="language-none"><code class="language-none">.DS_Store  
Thumbs.db  
db.json  
*.log  
node_modules&#x2F;  
public&#x2F;  
.deploy*&#x2F;   </code></pre></li>
<li>cd 到xxxx.liarlee.io目录下，使用命令新建分支：  <pre class="language-none"><code class="language-none">git checkout -b hexo</code></pre></li>
<li>将hexo工作目提交到缓存  <pre class="language-none"><code class="language-none">git add --all</code></pre></li>
<li>提交到github的hexo分支  <pre class="language-none"><code class="language-none">git commit -m &quot;Some statement...&quot;</code></pre></li>
<li>推送到自己博客项目的hexo分支下    <pre class="language-none"><code class="language-none">git push --set-upstream origin hexo</code></pre></li>
<li>结束</li>
</ol>
<h3 id="3-更新文章"><a href="#3-更新文章" class="headerlink" title="3. 更新文章"></a>3. 更新文章</h3><ol>
<li>git add –all</li>
<li>git commit -m “SaySomethingHERE”</li>
<li>git push origin hexo </li>
<li>hexo clean &amp;&amp; hexo g -d</li>
</ol>
<h3 id="4-恢复hexo的工作目录"><a href="#4-恢复hexo的工作目录" class="headerlink" title="4. 恢复hexo的工作目录"></a>4. 恢复hexo的工作目录</h3><ol>
<li>sudo cnpm install -g hexo-cli</li>
<li>dnf install -y npm</li>
<li>sudo npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li>
<li>cd Liarlee.github.io&#x2F;Liarlee</li>
<li>sudo cnpm install -no-bin-links</li>
<li>sudo cnpm install hexo-deployer-git</li>
<li>去Github上面添加机器的ssh public key </li>
<li>尝试使用hexo d , 查看是否可以成功。</li>
</ol>
]]></content>
      <categories>
        <category>Linux, Application</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>面试记录</title>
    <url>/2019/07/18/Other/Interview_2019/</url>
    <content><![CDATA[<p>这个月还是发生了不少事情了，面试，换房子，真快。</p>
<hr>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol>
<li><p>有一个字符串s&#x3D;“kjdfdsfevsdf”,使用python单独输出每个字符并在后面加上”th”.</p>
 <pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"asdfaurhgauh"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'th'</span><span class="token punctuation">)</span>	</code></pre></li>
<li><p>数据库问题，增删改查。基本上都没答上来。select语句对数据库内容Where做一个筛选。</p>
</li>
<li><p>提取b.txt中的所有域名，awk我写的grep。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-o</span> <span class="token string">"www.[[:alpha:]]*.com"</span> ./b.txt <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span>
<span class="token function">awk</span> <span class="token parameter variable">-F</span> / <span class="token string">'&#123;print $3&#125;'</span> b.txt <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span></code></pre>
<p>我写的这个唯一个不好的地方就是不能匹配数字的部分，如果域名有数字就提取不出了。其实中间如果全部用正则也可以，但是正则会特别的长。</p>
</li>
<li><p>nginx的反向代理配置文件是不是能看懂，考了一个upstream模块，考了一个weight的分配，考了一个 proxy_pass模块的调用。</p>
</li>
<li><p>描述Raid0 ， 1 ，5的区别，但是没让说raid10。</p>
</li>
<li><p>描述如果你有多的资源如何搭建高可用和高并发，这种题目其实还挺无聊的，高并发靠负载均衡分流，四层转发七层代理。高可用靠的冗余和故障的快速切换。没什么特别的架构，web服务也就是keepalived + lvs。硬件的话F5直接搞，虽然我没见过，但是也听说过。</p>
</li>
<li><p>容器问了一个私有的register,不记得叫什么名字，但是我知道Docker官方有文档。<strong>软件名称是Harbor</strong></p>
</li>
<li><p>k8s没什么可说了，昨天晚上听了一堆的k8s的理论，一个集群简单而要三个网络，要不是设计思路清晰，网络就已经是一锅粥了。软件的架构真的是越来越复杂了，现在的网络里面不是桥桥桥，就是NAT转换。</p>
</li>
<li><p>查看Linux系统CPU，MEM，NET-IO，DISK-IO的命令。top | htop | free -m | iostat -a</p>
</li>
<li><p>ext4如果分区超过2T如何操作。这题估计本来是问Ext3文件系统的，改的。Ext4随便分了已经。</p>
</li>
<li><p>如何理解top命令中的load average的含义<br> 这个问题本来是聊到了服务器性能的观察，我说到了top命令查看系统的当前状况，所以后续有了这个问题，其实在系统中，这三个数值的计算方式是通过CPU进程队列的长度来进行计算的，具体的数值及计算公式网上有很多,等我不记得了我在去找资料吧，这种东西已经是死知识了，到处都是。<br> 我说说我的理解，这三个数值其实是system load average,是系统的负载状态，其实是描述了<strong>系统的压力变化趋势</strong>，计算的CPU参数主要是Running Process &amp; uninterreptable Process , 其实就是<strong>正在运行</strong>和<strong>不可中断运行</strong>的进程，这些是<strong>CPU的工作量</strong>。还有一个衡量的参数实际上是<strong>IO</strong>，IO的指标也会体现在三个不同时间点的计算中。<br> 如何查看或者分析是我一直理解的不透彻的点，记录一下。单项指标的观察不足以解决系统的问题，需要搭配其他的工具进行分析才可以。<br> 看三个参数的<strong>变化趋势</strong>，1，5，15三个时间点：  </p>
<ul>
<li>如果<strong>1分钟高</strong>，但是后面两个都低，说明系统当前的状态是压力高的，但是是暂时的。</li>
<li>如果是<strong>三个数值都高</strong>，可以说明可能是系统的性能不足或者有问题需要解决。</li>
<li>如果<strong>1分钟的数值低</strong>，但是<strong>15分钟的数值高</strong>，说明系统的压力会慢慢平稳下来，不会持续太久。</li>
</ul>
</li>
<li><p>ps命令的使用</p>
<ul>
<li>ps aux <ul>
<li>To see every process on the system using BSD syntax <pre class="language-none"><code class="language-none">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.0 186736 10160 ?        Ss   09:32   0:03 &#x2F;sbin&#x2F;init
root         2  0.0  0.0      0     0 ?        S    09:32   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        I&lt;   09:32   0:00 [rcu_gp]
root         4  0.0  0.0      0     0 ?        I&lt;   09:32   0:00 [rcu_par_gp]
root         6  0.0  0.0      0     0 ?        I&lt;   09:32   0:00 [kworker&#x2F;0:0H-kblockd]
root         8  0.0  0.0      0     0 ?        I&lt;   09:32   0:00 [mm_percpu_wq]
root         9  0.0  0.0      0     0 ?        S    09:32   0:00 [ksoftirqd&#x2F;0]
root        10  0.0  0.0      0     0 ?        I    09:32   0:00 [rcu_preempt]
root        11  0.0  0.0      0     0 ?        I    09:32   0:00 [rcu_sched]
root        12  0.0  0.0      0     0 ?        I    09:32   0:00 [rcu_bh]</code></pre></li>
</ul>
</li>
<li>ps axjf &#x2F; ps -ejH<ul>
<li>To print a process tree  <pre class="language-none"><code class="language-none">PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND
1   555   555   555 ?           -1 Ssl      0   0:00 &#x2F;usr&#x2F;bin&#x2F;gdm
555   585   555   555 ?           -1 Sl       0   0:00  \_ gdm-session-worker [pam&#x2F;gdm-launch-environment]
585   789   789   789 tty1       789 Ssl+   120   0:00  |   \_ &#x2F;usr&#x2F;lib&#x2F;gdm-x-session gnome-session --autostart &#x2F;usr&#x2F;share&#x2F;gdm&#x2F;g
789   791   789   789 tty1       789 Sl+    120   0:01  |       \_ &#x2F;usr&#x2F;lib&#x2F;Xorg vt1 -displayfd 3 -auth &#x2F;run&#x2F;user&#x2F;120&#x2F;gdm&#x2F;Xautho
791   848   789   789 tty1       789 S+       0   0:00  |       |   \_ xf86-video-intel-backlight-helper intel_backlight
789   939   789   789 tty1       789 Sl+    120   0:00  |       \_ &#x2F;usr&#x2F;lib&#x2F;gnome-session-binary --autostart &#x2F;usr&#x2F;share&#x2F;gdm&#x2F;gree
939   970   789   789 tty1       789 Sl+    120   0:04  |           \_ &#x2F;usr&#x2F;bin&#x2F;gnome-shell
970  1032  1032   789 tty1       789 Sl     120   0:00  |           |   \_ ibus-daemon --xim --panel disable
1032  1035  1032   789 tty1       789 Sl     120   0:00  |           |       \_ &#x2F;usr&#x2F;lib&#x2F;ibus&#x2F;ibus-dconf
1032  1200  1032   789 tty1       789 Sl     120   0:00  |           |       \_ &#x2F;usr&#x2F;lib&#x2F;ibus&#x2F;ibus-engine-simple
939  1086   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-rfkill
939  1088   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-smartcard
939  1089   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-clipboard
939  1090   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-xsettings
939  1091   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-housekeeping
939  1092   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-mouse
939  1093   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-power
939  1094   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-screensaver-proxy
939  1095   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-sound
939  1099   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-color
939  1101   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-keyboard
939  1103   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-print-notifications
939  1104   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-sharing
939  1105   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-a11y-settings
939  1106   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-wacom
939  1107   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-datetime
939  1108   789   789 tty1       789 Sl+    120   0:00  |           \_ &#x2F;usr&#x2F;lib&#x2F;gsd-media-keys</code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>Buffer 和 Cache的区别 </p>
<ul>
<li>Buffer：A buffer is somthing that has yet to be “written” to disk.</li>
<li>Cache：A Cache is something that has been “read” from the disk and stored for later use.</li>
</ul>
<p>free 或者 top 命令中的buffer 和 cache：  </p>
<ul>
<li>Buffer： 作为Buffer-cache的一部分内存，是块设备的读写缓冲区。</li>
<li>Cache： 作为Page-cache的一部分内存，是缓冲文件系统的cache。</li>
<li>Buffer（缓冲区）是系统两端处理速度平衡（从长时间尺度上看）时使用的。它的引入是为了减小短期内突发I&#x2F;O的影响，起到流量整形的作用。比如生产者——消费者问题，他们产生和消耗资源的速度大体接近，加一个buffer可以抵消掉资源刚产生&#x2F;消耗时的突然变化。</li>
<li>Cache（缓存）则是系统两端处理速度不匹配时的一种折衷策略。因为CPU和memory之间的速度差异越来越大，所以人们充分利用数据的局部性（locality）特征，通过使用存储系统分级（memory hierarchy）的策略来减小这种差异带来的影响。<br>答案来源链接:<br><a href="https://www.zhihu.com/question/26190832/answer/32387918">知乎</a></li>
</ul>
</li>
<li><p>iptables的链表结构：<br> 表：   </p>
<ul>
<li>Filter   			一般的过滤功能  </li>
<li>NAT  			NAT功能的相关设置  </li>
<li>Mangle  			用于对特定数据包的修改  </li>
<li>Raw  			一般设置不需要iptables过滤及监控的流量，提高性能使用。  <ul>
<li>Raw表的使用:<pre><code>iptables -t raw -A PREROUTING -d 1.2.3.4 -p tcp --dport 80 -j NOTRACK
iptables -t raw -A PREROUTING -s 1.2.3.4 -p tcp --sport 80 -j NOTRACK
iptables -A FORWARD -m state --state UNTRACKED -j ACCEPT
</code></pre>
</li>
</ul>
</li>
</ul>
<p> 链：  </p>
<ul>
<li>PREROUTING 数据包进入路由表之前的Hook函数  </li>
<li>INPUT 数据包经过路由表后进入本机的数据  </li>
<li>FORWARD  	数据包经过路由表后不是本机的数据  <ul>
<li>前面三个经过路由表的选择，后面两个不会再次经过路由表</li>
</ul>
</li>
<li>OUTPUT 数据包是本机产生的，向外发送</li>
<li>POSTROUTING 发送到网卡接口之前</li>
</ul>
</li>
<li><p>如何观察网卡的流量及tcpdump的使用</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-电话面试</title>
    <url>/2018/01/29/Other/Interview_%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>就在刚刚经历了电话面试，快速回忆问我的问题，记下：  </p>
<span id="more"></span>

<h3 id="linux中top命令的用途？top命令中load参数的详细概念"><a href="#linux中top命令的用途？top命令中load参数的详细概念" class="headerlink" title="linux中top命令的用途？top命令中load参数的详细概念"></a>linux中top命令的用途？top命令中load参数的详细概念</h3><p>问题问的我当时没反应过来，说的是top命令中第一行的那个load average,一共有三个值，三个值分别显示了一分钟，五分钟，十五分钟的系统负载情况，一般不会超过1，超过5认为是超负荷运转。  </p>
<h3 id="邮件服务器使用的协议？"><a href="#邮件服务器使用的协议？" class="headerlink" title="邮件服务器使用的协议？"></a>邮件服务器使用的协议？</h3><p>使用SMTP协议，IMAP协议</p>
<ul>
<li>发送邮件的协议和端口号：<br>SMTP协议端口号为：25和465</li>
<li>接受邮件的协议和端口号：<br>POP3协议端口号为：110和995<br>IMAP协议端口号为：143和993</li>
</ul>
<h3 id="windows的故障转移集群是否用过？"><a href="#windows的故障转移集群是否用过？" class="headerlink" title="windows的故障转移集群是否用过？"></a>windows的故障转移集群是否用过？</h3><h3 id="keepalived使用什么协议实现检测心跳？"><a href="#keepalived使用什么协议实现检测心跳？" class="headerlink" title="keepalived使用什么协议实现检测心跳？"></a>keepalived使用什么协议实现检测心跳？</h3><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。</p>
<h3 id="keepalived主从服务器的选举细节？"><a href="#keepalived主从服务器的选举细节？" class="headerlink" title="keepalived主从服务器的选举细节？"></a>keepalived主从服务器的选举细节？</h3><p>Keepalived是一个基于VRRP协议来实现的WEB 服务高可用方案，可以利用其来避免单点故障。一个WEB服务至少会有2台服务器运行Keepalived，一台为主服务器（MASTER），一台为备份服务器（BACKUP），但是对外表现为一个虚拟IP，主服务器会发送特定的消息给备份服务器，当备份服务器收不到这个消息的时候，即主服务器宕机的时候，备份服务器就会接管虚拟IP，继续提供服务，从而保证了高可用性。</p>
<h3 id="keepalived原理？脑裂问题使用ping网关的方式不能完美解决？"><a href="#keepalived原理？脑裂问题使用ping网关的方式不能完美解决？" class="headerlink" title="keepalived原理？脑裂问题使用ping网关的方式不能完美解决？"></a>keepalived原理？脑裂问题使用ping网关的方式不能完美解决？</h3><p>设置主从ping网关，如果没有ping通认为自己的网络出问题，重启服务。面试官提示我正确的处理方式应该是，如果ping不通应该主服务器重启服务，从服务器直接关闭自己的对外服务。</p>
<h3 id="LVS的负载均衡模式，和转发请求模式？"><a href="#LVS的负载均衡模式，和转发请求模式？" class="headerlink" title="LVS的负载均衡模式，和转发请求模式？"></a>LVS的负载均衡模式，和转发请求模式？</h3><p>目前有三种IP负载均衡技术（VS&#x2F;NAT、VS&#x2F;TUN和VS&#x2F;DR）八种调度算法（rr,wrr,lc,wlc,lblc,lblcr,dh,sh）。</p>
<h3 id="web服务器如何将不同站点配置在同一个IP上？虚拟主机配置多个站点的区分方式？"><a href="#web服务器如何将不同站点配置在同一个IP上？虚拟主机配置多个站点的区分方式？" class="headerlink" title="web服务器如何将不同站点配置在同一个IP上？虚拟主机配置多个站点的区分方式？"></a>web服务器如何将不同站点配置在同一个IP上？虚拟主机配置多个站点的区分方式？</h3><p>ip和端口</p>
<h3 id="free命令中cache和buffer的区别？"><a href="#free命令中cache和buffer的区别？" class="headerlink" title="free命令中cache和buffer的区别？"></a>free命令中cache和buffer的区别？</h3><blockquote>
<p>A buffer is something that has yet to be “written” to disk. A cache is something that has been “read” from the disk and stored for later use.  </p>
</blockquote>
<p>对于计算机来讲cache 和 buffer的区别：</p>
<ul>
<li><p><strong>Cache</strong>：高速缓存，是位于CPU与主内存间的一种容量较小但速度很高的存储器。由于CPU的速度远高于主内存，CPU直接从内存中存取数据要等待一定时间周期，Cache中保存着CPU刚用过或循环使用的一部分数据，当CPU再次使用该部分数据时可从Cache中直接调用，这样就减少了CPU的等待时间，提高了系统的效率。Cache又分为一级Cache（L1 Cache）和二级Cache（L2 Cache），L1 Cache集成在CPU内部，L2 Cache早期一般是焊在主板上，现在也都集成在CPU内部，常见的容量有256KB或512KB L2 Cache。</p>
</li>
<li><p><strong>Buffer</strong>：缓冲区，一个用于存储速度不同步的设备或优先级不同的设备之间传输数据的区域。通过缓冲区，可以使进程之间的相互等待变少，从而使从速度慢的设备读入数据时，速度快的设备的操作进程不发生间断。</p>
</li>
</ul>
<p>*Free中的buffer和cache：（它们都是占用内存）   </p>
<ul>
<li><strong>buffer</strong>: 作为buffer cache的内存，是块设备的读写缓冲区  </li>
<li><strong>cache</strong>: 作为page cache的内存， 文件系统的cache<br>如果 cache 的值很大，说明cache住的文件数很多。如果频繁访问到的文件都能被cache住，那么磁盘的读IO 必会非常小。</li>
</ul>
<h3 id="windows中手动计算的内存使用值，和任务管理器中显示出来的值相差巨大？"><a href="#windows中手动计算的内存使用值，和任务管理器中显示出来的值相差巨大？" class="headerlink" title="windows中手动计算的内存使用值，和任务管理器中显示出来的值相差巨大？"></a>windows中手动计算的内存使用值，和任务管理器中显示出来的值相差巨大？</h3><p>windows隐藏了类似linux中的cache和buffer，windows10在任务管理器中已经开始显示cache了</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中运行DCM4CHEE-arc-light</title>
    <url>/2018/07/02/Other/Other_DCM4CHEE_RunDocker/</url>
    <content><![CDATA[<p>在Docker中安装DCM4CHEE-arc-light项目。</p>
<span id="more"></span>

<p>因为需要进行测试所以使用了DCM4CHEE， 但是DCM4CHEE现在的版本已经很古老了， 从而我接触了两个古老的PACS程序， 一个是Windows平台上有名的ClearCanvas, 还有一个就是DCM4CHEE。<br>在安装的过程中遇到了很多的麻烦。 看到官方有把项目放在docker上， 所以决定直接使用。直接记录了所有的组件启动的方式和命令， 方便今后的查阅。</p>
<p>DCM4CHEE-arc-light是目前比较新项目了，我这里写下了最小的安装模式， 基本上足够我日常测试使用了。</p>
<p>这几个Docker容器是：</p>
<ol>
<li>Docker</li>
<li>docker网桥</li>
<li>DAOCloud加速器</li>
<li>OpenLDAP</li>
<li>PostgreSQL数据库</li>
<li>DCM4CHEE-arc-light本体</li>
</ol>
<h2 id="DCM4CHEE-Docker-Command"><a href="#DCM4CHEE-Docker-Command" class="headerlink" title="DCM4CHEE_Docker_Command"></a>DCM4CHEE_Docker_Command</h2><ol>
<li><p>Install Docker component:   </p>
 <pre class="language-none"><code class="language-none">dnf install -y docker  </code></pre>
</li>
<li><p>Create the dcm4chee bridge network:  </p>
 <pre class="language-none"><code class="language-none">docker network create dcm4chee_default  </code></pre></li>
<li><p>DAOCloud加速器配置docker：</p>
 <pre class="language-none"><code class="language-none">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;f1dac9f0.m.daocloud.io</code></pre>
</li>
<li><p>Start OpenLDAP Server: </p>
 <pre class="language-none"><code class="language-none">docker run --network&#x3D;dcm4chee_default --name ldap \
       -p 389:389 \
       -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro \
       -v &#x2F;var&#x2F;local&#x2F;dcm4chee-arc&#x2F;ldap:&#x2F;var&#x2F;lib&#x2F;ldap \
       -v &#x2F;var&#x2F;local&#x2F;dcm4chee-arc&#x2F;slapd.d:&#x2F;etc&#x2F;ldap&#x2F;slapd.d \
       -d dcm4che&#x2F;slapd-dcm4chee:2.4.44-13.2  </code></pre>
</li>
<li><p>Start PostgreSQL:   </p>
 <pre class="language-none"><code class="language-none">docker run --network&#x3D;dcm4chee_default --name db \
       -p 5432:5432 \
       -e POSTGRES_DB&#x3D;pacsdb \
       -e POSTGRES_USER&#x3D;pacs \
       -e POSTGRES_PASSWORD&#x3D;pacs \
       -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro \
       -v &#x2F;var&#x2F;local&#x2F;dcm4chee-arc&#x2F;db:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data \
       -d dcm4che&#x2F;postgres-dcm4chee:10.0-13  </code></pre>
</li>
<li><p>Start Wildfly With DCM4CHEE Archive 5:  </p>
 <pre class="language-none"><code class="language-none">docker run --network&#x3D;dcm4chee_default --name arc \
       -p 8080:8080 \
       -p 8443:8443 \
       -p 9990:9990 \
       -p 11112:11112 \
       -p 2575:2575 \
       -e POSTGRES_DB&#x3D;pacsdb \
       -e POSTGRES_USER&#x3D;pacs \
       -e POSTGRES_PASSWORD&#x3D;pacs \
       -e WILDFLY_WAIT_FOR&#x3D;&quot;ldap:389 db:5432&quot; \
       -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro \
       -v &#x2F;var&#x2F;local&#x2F;dcm4chee-arc&#x2F;wildfly:&#x2F;opt&#x2F;wildfly&#x2F;standalone \
       -d dcm4che&#x2F;dcm4chee-arc-psql:5.13.2  </code></pre>
</li>
<li><p>Start the three applications use on command:  </p>
 <pre class="language-none"><code class="language-none">docker start ldap db arc  </code></pre>
</li>
<li><p>Stop the three application:  </p>
 <pre class="language-none"><code class="language-none">docker stop ldap db arc  </code></pre></li>
</ol>
<h2 id="附加说明："><a href="#附加说明：" class="headerlink" title="附加说明："></a>附加说明：</h2><h3 id="Host-说明："><a href="#Host-说明：" class="headerlink" title="Host 说明："></a>Host 说明：</h3><pre><code>dcm4chee_docker: 11.11.11.209/dcm4chee-arc/ui2
</code></pre>
<h3 id="Github-Project-DCM4CHEE-arc-light-Note"><a href="#Github-Project-DCM4CHEE-arc-light-Note" class="headerlink" title="Github Project DCM4CHEE-arc-light Note"></a>Github Project DCM4CHEE-arc-light Note</h3><ol>
<li><a href="https://github.com/dcm4che/dcm4chee-arc-light/wiki/HL7-Related-Features">HL7 Relative Features</a></li>
<li><a href="">Weasis Integration</a><a href="https://github.com/dcm4che/dcm4chee-arc-light/wiki/Weasis-Viewer-Integration">https://github.com/dcm4che/dcm4chee-arc-light/wiki/Weasis-Viewer-Integration</a></li>
</ol>
]]></content>
      <categories>
        <category>Healthcare-IT</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker/Containerd/Harbor 配置代理</title>
    <url>/2022/12/20/Other/Other_Docker-daemon-proxy-setting-md/</url>
    <content><![CDATA[<p>记录一下 Docker Daemon &#x2F; Containerd 配置代理的步骤，尽管能用的时候不太多。</p>
<p>Update - 2023-07-10 Add Harbor.</p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> /etc/systemd/system/docker.service.d
<span class="token punctuation">]</span>$ <span class="token function">touch</span> /etc/systemd/system/docker.service.d/proxy.conf</code></pre>

<h2 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h2><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">HTTP_PROXY=socks5://&lt;-->:&lt;-->/</span>"</span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">HTTPS_PROXY=socks5://&lt;-->:&lt;-->/</span>"</span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">NO_PROXY=localhost,127.0.0.1</span>"</span></code></pre>

<h2 id="重启DockerDaemon"><a href="#重启DockerDaemon" class="headerlink" title="重启DockerDaemon"></a>重启DockerDaemon</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl daemon-reload <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></code></pre>

<h1 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h1><h2 id="创建环境变量文件"><a href="#创建环境变量文件" class="headerlink" title="创建环境变量文件"></a>创建环境变量文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-pv</span> /etc/systemd/system/containerd.service.d
<span class="token punctuation">]</span>$ <span class="token function">touch</span> /etc/systemd/system/containerd.service.d/proxy.conf</code></pre>

<h2 id="写入内容-1"><a href="#写入内容-1" class="headerlink" title="写入内容"></a>写入内容</h2><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">HTTP_PROXY=socks5://&lt;-->:&lt;-->/</span>"</span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">HTTPS_PROXY=socks5://&lt;-->:&lt;-->/</span>"</span>
<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">NO_PROXY=localhost,127.0.0.1</span>"</span></code></pre>

<h2 id="重启-Containerd"><a href="#重启-Containerd" class="headerlink" title="重启 Containerd"></a>重启 Containerd</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl daemon-reload <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></code></pre>

<h2 id="Harbor-仓库加代理"><a href="#Harbor-仓库加代理" class="headerlink" title="Harbor 仓库加代理"></a>Harbor 仓库加代理</h2><p>另一个方法是直接给harbor仓库添加代理， 让Harbor来进行代理访问 ，帮忙pull镜像， 集群直接指向这个仓库即可。</p>
<p>harbor我是直接使用docker-compose 的方式部署的， 这样简单一些。 </p>
<p>我的软件安装目录是在: <code>/opt/harbor</code></p>
<ol>
<li><p>找到harbor 的配置文件： <code>/opt/harbor/harbor.yml</code></p>
</li>
<li><p>配置文件部分如下： </p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">189	<span class="token comment"># Global proxy</span>
190	<span class="token comment"># Config http proxy for components, e.g. http://my.proxy.com:3128</span>
191	<span class="token comment"># Components doesn't need to connect to each others via http proxy.</span>
192	<span class="token comment"># Remove component from `components` array if want disable proxy</span>
193	<span class="token comment"># for it. If you want use proxy for replication, MUST enable proxy</span>
194	<span class="token comment"># for core and jobservice, and set `http_proxy` and `https_proxy`.</span>
195	<span class="token comment"># Add domain to the `no_proxy` field, when you want disable proxy</span>
196	<span class="token comment"># for some special registry.</span>
<span class="token key atrule">197	proxy</span><span class="token punctuation">:</span>
<span class="token key atrule">198	  http_proxy</span><span class="token punctuation">:</span> socks5<span class="token punctuation">:</span>//ip<span class="token punctuation">:</span>port
<span class="token key atrule">199	  https_proxy</span><span class="token punctuation">:</span> socks5<span class="token punctuation">:</span>//ip<span class="token punctuation">:</span>port
<span class="token key atrule">200	  no_proxy</span><span class="token punctuation">:</span>
<span class="token key atrule">201	  components</span><span class="token punctuation">:</span>
202	    <span class="token punctuation">-</span> core
203	    <span class="token punctuation">-</span> jobservice
204	    <span class="token punctuation">-</span> trivy</code></pre>
</li>
<li><p>启动服务之后进入容器进行确认： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">core<span class="token punctuation">]</span>$ <span class="token function">dc</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> core <span class="token function">bash</span>

harbor <span class="token punctuation">[</span> /harbor <span class="token punctuation">]</span>$ <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> proxy
<span class="token assign-left variable">PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE</span><span class="token operator">=</span>docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr
<span class="token assign-left variable">NO_PROXY</span><span class="token operator">=</span>redis,chartmuseum,portal,db,.internal,.local,127.0.0.1,localhost,core,trivy-adapter,nginx,postgresql,registryctl,log,jobservice,registry,notary-server,notary-signer,exporter
<span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span>socks5://ip:port
<span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span>socks5://ip:port</code></pre>
</li>
<li><p>环境变量已经生效了， 然后直接在控制台创建项目， 创建新的仓库缓存代理。</p>
<p>我创建的仓库如下，除了列出的其他<strong>留空</strong>：</p>
<table>
<thead>
<tr>
<th align="left">提供者</th>
<th>目标名</th>
<th>目标URL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Quay</td>
<td>registry.k8s.io</td>
<td><a href="https://registry.k8s.io/">https://registry.k8s.io</a></td>
</tr>
<tr>
<td align="left">GtihubGHCR</td>
<td>ghcr.io</td>
<td><a href="https://ghcr.io/">https://ghcr.io</a></td>
</tr>
<tr>
<td align="left">Quay</td>
<td>k8s.gcr.io (Archived)</td>
<td><a href="https://k8s.gcr.io/">https://k8s.gcr.io</a></td>
</tr>
<tr>
<td align="left">Quay</td>
<td>gcr.io</td>
<td><a href="https://gcr.io/">https://gcr.io</a></td>
</tr>
<tr>
<td align="left">Quay</td>
<td>quay.io</td>
<td><a href="https://quay.io/">https://quay.io</a></td>
</tr>
<tr>
<td align="left">Docker Hub</td>
<td>docker.io</td>
<td><a href="https://hub.docker.com/">https://hub.docker.com</a></td>
</tr>
<tr>
<td align="left">DockerRegistry</td>
<td>public.ecr.aws</td>
<td><a href="https://public.ecr.aws/">https://public.ecr.aws</a></td>
</tr>
</tbody></table>
</li>
</ol>
<p>所有仓库的健康检查是通过的， 然后去创建项目， 就行了。 </p>
<p>创建完成项目之后， 就可以通过当前这个仓库的项目地址来pull 镜像了。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull reg.liarlee.site/docker.io/library/nginx:latest
<span class="token function">docker</span> pull reg.liarlee.site/registry.k8s.io/metrics-server/metrics-server@sha256:1ab8d2722ce57979eb05ec0594cb9173e07ace16a253c747bb94c31b138a07dc
<span class="token function">docker</span> pull reg.liarlee.site/public.ecr.aws/amazonlinux/amazonlinux:minimal
<span class="token function">docker</span> pull reg.liarlee.site/quay.io/prometheus/prometheus
<span class="token function">docker</span> pull reg.liarlee.site/quay.io/argoproj/argocd
<span class="token function">docker</span> pull reg.liarlee.site/ghcr.io/dexidp/dex</code></pre>

]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>制作一个可用的malloc image</title>
    <url>/2023/01/03/Other/Other_Malloc-docker-image-md/</url>
    <content><![CDATA[<h1 id="写一个melloc的C程序"><a href="#写一个melloc的C程序" class="headerlink" title="写一个melloc的C程序"></a>写一个melloc的C程序</h1><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIGTERM_MSG</span> <span class="token string">"SIGTERM received.\n"</span></span>
 
<span class="token keyword">void</span> <span class="token function">sig_term_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span>info<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>STDERR_FILENO<span class="token punctuation">,</span> SIGTERM_MSG<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SIGTERM_MSG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">catch_sigterm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> _sigact<span class="token punctuation">;</span>
 
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_sigact<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_sigact<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _sigact<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> sig_term_handler<span class="token punctuation">;</span>
    _sigact<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span>
 
    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGTERM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_sigact<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR ELEMENT COUNTS."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// printf ("%ld\n", atol(argv[1]));</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token comment">// printf ("%ld\n", n);</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Allocate Memory Size: %ld MB.\n"</span><span class="token punctuation">,</span> <span class="token function">atol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Allocate Memory.</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SUCCESS."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FAILED."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">catch_sigterm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="写一个Dockerfile"><a href="#写一个Dockerfile" class="headerlink" title="写一个Dockerfile"></a>写一个Dockerfile</h1><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> alpine</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add build-base</span>
<span class="token instruction"><span class="token keyword">COPY</span> mem.c .</span>
<span class="token instruction"><span class="token keyword">RUN</span> gcc -o mem mem.c</span>
<span class="token comment"># or RUN gcc -static -o mem mem.c</span>

<span class="token instruction"><span class="token keyword">FROM</span> alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">0</span></span> ./mem .</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">"/mem"</span> ]</span></code></pre>

<h1 id="进行一个很新的测试"><a href="#进行一个很新的测试" class="headerlink" title="进行一个很新的测试"></a>进行一个很新的测试</h1><p>Build Image.</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">dive build <span class="token parameter variable">-t</span> liarlee-malloc:latest <span class="token builtin class-name">.</span>
OR
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> liarlee-malloc:latest <span class="token builtin class-name">.</span></code></pre>
<h2 id="Docker-RUN"><a href="#Docker-RUN" class="headerlink" title="Docker RUN."></a>Docker RUN.</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> malloc <span class="token parameter variable">--rm</span> <span class="token parameter variable">-dt</span> liarlee-malloc:latest <span class="token number">200</span>
<span class="token comment"># docker run --name malloc --rm -dt liarlee-malloc:latest [MemorySize(MB)]</span></code></pre>
<h2 id="Kubernetes-Deployment-RUN"><a href="#Kubernetes-Deployment-RUN" class="headerlink" title="Kubernetes Deployment RUN."></a>Kubernetes Deployment RUN.</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> liarlee<span class="token punctuation">-</span>malloc
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> malloc
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span> 
  <span class="token key atrule">template</span><span class="token punctuation">:</span> 
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> malloc
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> malloc
        <span class="token key atrule">image</span><span class="token punctuation">:</span> liarlee<span class="token punctuation">-</span>malloc<span class="token punctuation">:</span>latest
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"200"</span> <span class="token punctuation">]</span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>pyautogui自动脚本</title>
    <url>/2019/05/17/Python/Python_Script-ForGame/</url>
    <content><![CDATA[<p>实在是肝不动了，自己写了个脚本帮我点点点。  </p>
<h1 id="Pyautogui说明"><a href="#Pyautogui说明" class="headerlink" title="Pyautogui说明"></a>Pyautogui说明</h1><p>pyautogui.position()  #  获取鼠标位置<br>pyautogui.locateOnScreen()  #  对屏幕截图，获取图片文件所对应的屏幕坐标<br>pyautogui.click()   #  模拟鼠标点击<br>pyautogui.doubleclick()  #  模拟鼠标双击<br>pyautogui.moveTo()  #  移动到屏幕坐标位置<br>pyautogui.moveRel()     #  移动固定的坐标距离<br>pyautogui.dragRel()     #  按住鼠标拖拽  </p>
<h1 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># -*- coding:UTF-8 -*-</span>

<span class="token keyword">import</span> pyautogui
<span class="token keyword">import</span> time
<span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">MOTIONMOUSE</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> lines <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">:</span>
        <span class="token comment"># 检测是否有书本或食物</span>
        results_food <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./food.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment"># 检测食物图片是否存在</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 食物检测结果：'</span><span class="token punctuation">,</span> results_food<span class="token punctuation">)</span>
        results_book <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./book.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment"># 检测书籍图片是否存在</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 书本检测结果：'</span><span class="token punctuation">,</span> results_book<span class="token punctuation">)</span>
        pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment"># 点击换线</span>
        <span class="token keyword">if</span> results_book <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">325</span><span class="token punctuation">)</span> <span class="token comment"># 点击学习</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">645</span><span class="token punctuation">)</span> <span class="token comment"># 点击确定</span>
        <span class="token keyword">elif</span> results_food <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">325</span><span class="token punctuation">)</span>  <span class="token comment"># 点击食用</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

        pyautogui<span class="token punctuation">.</span>moveTo<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment"># 移动到对应一线的位置</span>
        pyautogui<span class="token punctuation">.</span>moveRel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">65</span> <span class="token operator">*</span> lines<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment"># 移动到对应的线路位置</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 触发一次点击</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">#  </span>
        <span class="token comment"># 检测是否有书本或食物</span>
        results_food <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./food.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 食物检测结果：'</span><span class="token punctuation">,</span> results_food<span class="token punctuation">)</span>
        results_book <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./book.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 书本检测结果：'</span><span class="token punctuation">,</span> results_book<span class="token punctuation">)</span>
        <span class="token keyword">if</span> results_book <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">325</span><span class="token punctuation">)</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">645</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> results_food <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">325</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

        <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lines<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pyautogui<span class="token punctuation">.</span>moveTo<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
            pyautogui<span class="token punctuation">.</span>dragRel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

        pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>

<span class="token comment"># starting .....</span>

Count <span class="token operator">=</span> <span class="token number">0</span>
replace_times <span class="token operator">=</span> <span class="token number">0</span>
Energy <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input value of energy: '</span><span class="token punctuation">)</span>        <span class="token comment"># 输入体力</span>
All_lines <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input the number of lines: '</span><span class="token punctuation">)</span> <span class="token comment"># 输入所有线路的数字</span>

<span class="token keyword">for</span> turns <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'** 这是第 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>turns<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 轮采集。'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>All_lines<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* 这是第 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 条线路。'</span><span class="token punctuation">)</span>
        clock <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* 开始时间 = '</span> <span class="token operator">+</span> clock <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">)</span>
        MOTIONMOUSE<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">770</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>
        pyautogui<span class="token punctuation">.</span>moveTo<span class="token punctuation">(</span><span class="token number">1310</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>

        <span class="token comment">#检测是否有树木</span>
        results_click <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./level4_usable.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 计算斧子在不在</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 斧子检测结果：'</span><span class="token punctuation">,</span> results_click<span class="token punctuation">)</span>
        results_replace <span class="token operator">=</span> pyautogui<span class="token punctuation">.</span>locateOnScreen<span class="token punctuation">(</span><span class="token string">'./level4_replace.png'</span><span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 计算可替换的斧子在不在</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'- 更换检测结果：'</span><span class="token punctuation">,</span> results_replace<span class="token punctuation">)</span>

        <span class="token comment"># 判断是否有物品</span>
        <span class="token keyword">if</span> results_click <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 判断是否有按键，有等待，没有按键换线；</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* 第 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 次采集。'</span><span class="token punctuation">)</span>
            Count <span class="token operator">=</span> Count <span class="token operator">+</span><span class="token number">1</span>
            energy <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Energy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">15</span>
        <span class="token keyword">elif</span> results_replace <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   <span class="token comment"># 判断是否有可更换的斧子 </span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1510</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>
            pyautogui<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token number">1310</span><span class="token punctuation">,</span> <span class="token number">880</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>
            Count <span class="token operator">=</span> Count <span class="token operator">+</span> <span class="token number">1</span>
            replace_times <span class="token operator">=</span> replace_times <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是第 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 次采集。'</span><span class="token punctuation">)</span> 
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是第 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>replace_times<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 次换斧子。'</span><span class="token punctuation">)</span>
            energy <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Energy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">15</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-- 采集物或斧子未存在，跳过。'</span><span class="token punctuation">)</span> 
            <span class="token keyword">pass</span>            <span class="token comment"># 啥也没有，跳过</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Starting Waiting for Refresh:'</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></code></pre>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门笔记 (一)</title>
    <url>/2018/01/08/Python/Python_%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h2 id="Python的输入输出"><a href="#Python的输入输出" class="headerlink" title="Python的输入输出"></a>Python的输入输出</h2><pre class="language-none"><code class="language-none">print(&#39;Hello,World!&#39;)  
name &#x3D; input()
print(&#39;Your name is&#39;, name, &#39;,Right?&#39;)</code></pre>

<h2 id="Python字符中文编码Title"><a href="#Python字符中文编码Title" class="headerlink" title="Python字符中文编码Title"></a>Python字符中文编码Title</h2><pre class="language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python3  
# -*- coding: utf-8 -*-  

a &#x3D; input()
age &#x3D; int(a)                       \\print输出都是字符串，格式化为数字之后才可以使用</code></pre>

<h2 id="Python输出多行内容"><a href="#Python输出多行内容" class="headerlink" title="Python输出多行内容"></a>Python输出多行内容</h2><pre class="language-none"><code class="language-none">print(&#39;&#39;&#39;line1
...line2
...line3
&#39;&#39;&#39;)</code></pre>

<h2 id="Python的语句拼接"><a href="#Python的语句拼接" class="headerlink" title="Python的语句拼接"></a>Python的语句拼接</h2><pre class="language-none"><code class="language-none">print(&#39;Hello,World!&#39;,&#39;My Name is Liarlee.&#39;)  </code></pre>

<h2 id="Python占位符"><a href="#Python占位符" class="headerlink" title="Python占位符"></a>Python占位符</h2><pre class="language-none"><code class="language-none">name &#x3D; Liarlee
age &#x3D; 24
print(&#39;Hello,%s&#39; % (name))
print(&#39;Your age is %d&#39; % (age))</code></pre>

<h2 id="Python中使用list和tuple"><a href="#Python中使用list和tuple" class="headerlink" title="Python中使用list和tuple"></a>Python中使用list和tuple</h2><h3 id="List-–-列表"><a href="#List-–-列表" class="headerlink" title="List – 列表"></a>List – 列表</h3><pre class="language-none"><code class="language-none">classmates &#x3D; [Liarlee,TEST,WTF,LOL]</code></pre>
<p>classmates就是一个list，list可以嵌套list    </p>
<pre class="language-none"><code class="language-none">len(classmates)                    \\查看list的长度  
classmates[1]                      \\list第二个元素  
classmates[-1]                     \\list倒数第一个元素    
classmates.append(&#39;Liarlee&#39;)       \\末尾添加一个值
classmates.pop()                   \\删除末尾的值
classmates.pop(i)                  \\删除指定索引位置的值
classmates.insert(1, &#39;Liarlee&#39;)    \\将值插入到某个索引位置
classmates[1] &#x3D; Liarlee            \\直接更改某个索引位置的值
classmates.sort()                  \\list排序</code></pre>

<h3 id="Tuple-–-元组"><a href="#Tuple-–-元组" class="headerlink" title="Tuple – 元组"></a>Tuple – 元组</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改  </p>
<pre class="language-none"><code class="language-none">classmates &#x3D; (Liarlee,TEST,WTF,LOL)</code></pre>

<h2 id="循环和判断"><a href="#循环和判断" class="headerlink" title="循环和判断"></a>循环和判断</h2><h3 id="IF判断"><a href="#IF判断" class="headerlink" title="IF判断"></a>IF判断</h3><pre class="language-none"><code class="language-none">if
elif
.
.
.
elif
else                                        \\完全if格式        </code></pre>

<h3 id="FOR……IN……循环"><a href="#FOR……IN……循环" class="headerlink" title="FOR……IN……循环"></a>FOR……IN……循环</h3><pre class="language-none"><code class="language-none">for classmate in classmates:
  print(classmate)

list(range(101))                              \\生成0-100数字存入list</code></pre>

<h3 id="WHILE循环"><a href="#WHILE循环" class="headerlink" title="WHILE循环"></a>WHILE循环</h3><pre class="language-none"><code class="language-none"># -*- coding: utf-8 -*-
classmates &#x3D; [Liarlee,TEST,WTF,LOL]
i &#x3D; 0
while i &lt; 4:
    print(&#39;Hello,%s&#39; % (classmates[i]))
    i &#x3D; i + 1</code></pre>

<h2 id="Dict和set"><a href="#Dict和set" class="headerlink" title="Dict和set"></a>Dict和set</h2><h3 id="Dict-–-字典"><a href="#Dict-–-字典" class="headerlink" title="Dict – 字典"></a>Dict – 字典</h3><pre class="language-none"><code class="language-none">SCORE &#x3D; &#123;&#39;Liarlee&#39;: 95, &#39;TEST&#39;: 75, &#39;WTF&#39;: 85, ‘LOL‘：54&#125;       \\定义字典
d[&#39;Liarlee&#39;] &#x3D; 67                                                \\字典赋值
&#39;Thomas&#39; in d                                                    \\确定Key是否在字典中
d.get(&#39;Liarlee&#39;)                                                 \\确定Key是否在字典中
d.pop(&#39;Liarlee&#39;)                                                 \\删除Key</code></pre>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>set和dict类似，也是一组key的集合，但不存储value。    </p>
<pre class="language-none"><code class="language-none">s &#x3D; set([1, 2, 3])                      \\创建一个set然后将list传入
s.add(4)                                \\添加一个元素进入set</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门笔记 (二)</title>
    <url>/2018/01/09/Python/Python_%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-2/</url>
    <content><![CDATA[<h2 id="Def定义函数"><a href="#Def定义函数" class="headerlink" title="Def定义函数"></a>Def定义函数</h2><pre class="language-none"><code class="language-none">def fact(n):                    #定义求阶乘函数
    if n &#x3D;&#x3D; 1:
        return 1
    return n * fact(n - 1)

result &#x3D; fact(5)                #计算结果
print(result)                   #输出计算结果</code></pre>

<h2 id="递归函数-–-尾递归优化"><a href="#递归函数-–-尾递归优化" class="headerlink" title="递归函数 – 尾递归优化"></a>递归函数 – 尾递归优化</h2><p><strong>用递归函数需要注意防止栈溢出。</strong><br>解决递归调用栈溢出的方法是通过尾递归优化，</p>
<pre class="language-none"><code class="language-none">def fact(n):                                #尾递归优化
    return fact_iter(n, 1)                  #函数返回值是之前定义的递归函数

def fact_iter(num, product):
    if num &#x3D;&#x3D; 1:
        return product
    return fact_iter(num - 1, num * product)
    print(num, product)


result &#x3D; fact(1000)
print(result)</code></pre>

<h2 id="迷之递归-–-汉诺塔-没懂"><a href="#迷之递归-–-汉诺塔-没懂" class="headerlink" title="迷之递归 – 汉诺塔 (没懂)"></a>迷之递归 – 汉诺塔 (没懂)</h2><pre class="language-none"><code class="language-none">def move(n, a, b, c):
    if n &#x3D;&#x3D; 1:                          #只有一个盘子，所以从a到c
        print(a, &#39;--&gt;&#39;, c)
    else:
        move(n-1, a, c, b)              #有N个盘子，移动N-1个盘子，a-b
        move(1, a, b, c)                #将最大的盘子从a--c
        move(n-1, b, a, c)              #剩下的N-1从b--c

move(3, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;)                      # 总共三个盘子，ABC三个柱子</code></pre>

<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><pre class="language-none"><code class="language-none">L &#x3D; [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]

# 取出前两个元素

# Method 1
[L[0],L[1]]

# Method 2 -- For
r &#x3D; []
n &#x3D; 2
for i in range(n):
    r.append(L[i])

print(r)

# Method 3 -- Slice
print(L[0:2])               #取出 0--2

print(L[:2])                #取出 0--2

print(L[-2:])               #取出倒数两个元素

print(L[-2:-1])             #取出倒数第二个

L[a:b:c]                    #a----索引开始序号
                            #b----索引结束序号
                            #c----步长</code></pre>
<h3 id="切片练习"><a href="#切片练习" class="headerlink" title="切片练习"></a>切片练习</h3><pre class="language-none"><code class="language-none">def trim(s):
    if not len(s):        #非空
        return s
    if s[0] &#x3D;&#x3D; &#39; &#39;:       #起始位置位置为空
        s &#x3D; s[1:]
        return trim(s)        #返回处理后的字符串
    elif s[-1] &#x3D;&#x3D; &#39; &#39;:        #末尾为空
        s &#x3D; s[:-1]
        return trim(s)
    return s              #返回s

if trim(&#39;hello  &#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello&#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello  &#39;) !&#x3D; &#39;hello&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;  hello  world  &#39;) !&#x3D; &#39;hello  world&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;&#39;) !&#x3D; &#39;&#39;:
    print(&#39;测试失败!&#39;)
elif trim(&#39;    &#39;) !&#x3D; &#39;&#39;:
    print(&#39;测试失败!&#39;)
else:
    print(&#39;测试成功!&#39;)</code></pre>

<h3 id="For循环迭代-练习"><a href="#For循环迭代-练习" class="headerlink" title="For循环迭代 练习"></a>For循环迭代 练习</h3><pre class="language-none"><code class="language-none">def findMinAndMax(L):
    if 0 &#x3D;&#x3D; len(L):
        return None, None

    min &#x3D; L[0]
    max &#x3D; L[0]
    i &#x3D; 0
    for i in L:
        if i &gt; max:
            max &#x3D; i
        if i &lt; min:
            min &#x3D; i
    return min, max

# 测试
if findMinAndMax([]) !&#x3D; (None, None):
    print(&#39;测试失败!&#39;)
elif findMinAndMax([7]) !&#x3D; (7, 7):
    print(&#39;测试失败!&#39;)
elif findMinAndMax([7, 1]) !&#x3D; (1, 7):
    print(&#39;测试失败!&#39;)
elif findMinAndMax([7, 1, 3, 9, 5]) !&#x3D; (1, 9):
    print(&#39;测试失败!&#39;)
else:
    print(&#39;测试成功!&#39;)
</code></pre>

<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><pre class="language-none"><code class="language-none">list(range(1,11))

M &#x3D; [x * x for x in range(1, 11)]     #列表生成式
print(M)

list &#x3D; [s.lower() for s in L1]

# 练习
L1 &#x3D; [&#39;Hello&#39;,&#39;World&#39;, 18, &#39;Apple&#39;, None]
test &#x3D; isinstance(L1, str)
print(test)

L2 &#x3D; [s.lower() for s in L1 if isinstance(s, str) &#x3D;&#x3D; True]


# 测试:
print(L2)
if L2 &#x3D;&#x3D; [&#39;hello&#39;, &#39;world&#39;, &#39;apple&#39;]:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门笔记 (三)</title>
    <url>/2018/01/10/Python/Python_%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-3/</url>
    <content><![CDATA[<p>python进行系统管理的模块。系统管理模块的介绍和使用。<br>系统管理的四个模块:</p>
<ol>
<li>os</li>
<li>os.path</li>
<li>glob</li>
<li>fnmatch</li>
</ol>
<h2 id="1-OS"><a href="#1-OS" class="headerlink" title="1. OS"></a>1. OS</h2><p>OS模块中包含了普遍的操作系统功能，如果希望程序与平台没有强关联的情况下这个模块很重要，这个模块可以在不改动程序的基础上，使程序运行在Linux和Windows之间。</p>
<h3 id="可移植性说明"><a href="#可移植性说明" class="headerlink" title="可移植性说明"></a>可移植性说明</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>name   <span class="token comment">#获取当前的操作系统信息</span>
os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#获取当前的工作目录</span>
os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#返回目录下的所有文件和目录名称</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#删除指定的文件</span>
os<span class="token punctuation">.</span>linesep      <span class="token comment">#通过字符串的方式给出当前平台的换行符号</span></code></pre>

<h3 id="OS模块操作文件"><a href="#OS模块操作文件" class="headerlink" title="OS模块操作文件"></a>OS模块操作文件</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>unlink       <span class="token comment">#删除路径所指向的文件</span>
os<span class="token punctuation">.</span>remove       <span class="token comment">#删除路径所指向的文件</span>
os<span class="token punctuation">.</span>rmdir        <span class="token comment">#删除path路径指向的空文件夹，必须是空的</span>
os<span class="token punctuation">.</span>mkdir        <span class="token comment">#创建一个文件夹</span>
os<span class="token punctuation">.</span>rename       <span class="token comment">#重命名一个文件或者文件夹</span></code></pre>

<h3 id="OS模块操作权限"><a href="#OS模块操作权限" class="headerlink" title="OS模块操作权限"></a>OS模块操作权限</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span>      <span class="token comment">#access是判断是否具有对某一个文件的相关权限，Linux中的 chmod/rwx---对应OS模块中的R_OK,W_OK，X_OK</span></code></pre>

<h2 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h2><p>os.path模块主要是用来拆分路径，构建新的路径，获取文件属性和判断文件的类型使用。</p>
<h3 id="拆分路径"><a href="#拆分路径" class="headerlink" title="拆分路径"></a>拆分路径</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">#返回一个二元数组，包括文件路径和文件名称</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">#返回文件路径</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#返回文件的文件名</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#一个文件名和扩展名组成的二元组</span></code></pre>

<h3 id="构建路径"><a href="#构建路径" class="headerlink" title="构建路径"></a>构建路径</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">'~/Liarlee'</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'Liarlee.txt'</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">'~mysql'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'Liarlee.py'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h3 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getatime<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#获取文件的访问时间</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#获取文件的修改时间</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#获取文件的创建时间</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">#获取文件的大小</span></code></pre>

<h3 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h3><pre class="language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists        <span class="token comment">#参数path指向的路径是否存在</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile        <span class="token comment">#参数path指向的路径存在，并且是一个文件</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir         <span class="token comment">#路径存在，并且是一个文件夹</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>islink        <span class="token comment">#路径存在，并且是一个链接</span></code></pre>

<h2 id="Fnmatch模块"><a href="#Fnmatch模块" class="headerlink" title="Fnmatch模块"></a>Fnmatch模块</h2><h2 id="Glob模块"><a href="#Glob模块" class="headerlink" title="Glob模块"></a>Glob模块</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DISM的备份与还原</title>
    <url>/2018/04/19/Windows/Windows_DISM%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>DISM的备份与还原主要是用了Win8之后微软同步发行的系统映像管理工具，全称是：<strong>部署映像服务和管理</strong>。  </p>
<span id="more"></span>

<p>DISM命令行选项：</p>
<pre><code>/Append-Image      
    进行映像的附加，更新，对比原有的文件内容进行增量更新。
    *示例：*
    对映像的增量更新	 Dism /Append-Image /ImageFile:install.wim /CaptureDir:D:\ /Name:Drive-D

/Apply-Image       
    将映像应用于指定的驱动器。
    *示例：*
    单一wim文件的恢复	Dism /apply-image /imagefile:install.wim /index:1 /ApplyDir:D:\
    拆分多个映像文件的恢复	Dism /apply-image /imagefile:install.swm /swmfile:install*.swm /index:1 /applydir:D:\

/Capture-Image   
    将某个驱动器的映像捕捉到新的 .wim 文件。捕捉的目录包括所有子文件夹和数据。不能捕捉空目录。目录必须至少包含一个文件。
    *示例：*
    生成.wim备份文件到当前目录下	Dism /Capture-Image /ImageFile:install.wim /CaptureDir:D:\ /Name:Drive-D

/Commit-Image
    对已经装载的映像进行确认提交。
    *示例：*
    对已经挂载的镜像文件进行确认	Dism /Commit-Image /MountDir:C:\test\offline

/Delete-Image
    从包含多个映像卷的.wim文件中删除指定的映像。
    *示例：*
    删除指定的映像卷	Dism /Delete-Image /ImageFile:install.wim /Index:1

/List-Image
    显示指定卷映像中的文件和文件夹列表。
    *示例：*
    列出镜像中文件夹列表	Dism /List-Image /ImageFile:install.wim /Index:1

/Split-Image
    将现有的 .wim 文件拆分为多个只读的拆分 .wim 文件。
    *示例：*
    分割并指定分卷大小	Dism /Split-Image /ImageFile:install.wim /SWMFile:split.swm /FileSize:650

/Mount-Image
    将wim映像挂载到某个目录下
    *示例：*
    可读写模式	Dism /Mount-Image /ImageFile:C:\test\images\myimage.wim /index:1 /MountDir:C:\test\offline
    只读模式	Dism /Mount-Image /ImageFile:C:\test\images\myimage.vhd /index:1 /MountDir:C:\test\offline /ReadOnly
    只读更改为可读写	Dism /Remount-Image /MountDir:C:\test\offline


常规处理流程：
1.捕捉影像并且保存为.wim文件
2.列出.wim .vhd .vhdx文件中的所有文件
3.准备一个winPE
4.进行备份镜像的还原
</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>PPT转换WORD</title>
    <url>/2018/01/15/Windows/Windows_PPTConvertTOWORD/</url>
    <content><![CDATA[<p>前一段时间赶上期末考试，老师放出了一个学期的PPT，于是大家开始疯狂的复制讲义，把关键的知识进行提炼，方便考试。但是老师放出来的PPT，文字量实在是太大了，如果手动复制就会很麻烦，最后自己都快崩溃了</p>
<span id="more"></span>

<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>PPT作为微软OFFCIE套件中的一员，在PPT和Word之间都会提供一个相互转换的方式，保证内容可以快捷的在不同的软件中使用。甚至是与Adobe的PDF之间，其实都可以快捷的进行转换。<br>教程开始了~   </p>
<h2 id="开始战斗！"><a href="#开始战斗！" class="headerlink" title="开始战斗！"></a>开始战斗！</h2><h3 id="PPT创建讲义"><a href="#PPT创建讲义" class="headerlink" title="PPT创建讲义"></a>PPT创建讲义</h3><ol>
<li>选择左上角的文件选项卡<br><img src="https://i.loli.net/2018/01/15/5a5c244c177fe.png" alt="1.png"></li>
<li>选择导出选项<br><img src="https://i.loli.net/2018/01/15/5a5c244bd0287.png" alt="2.png"></li>
<li>点击创建讲义</li>
<li>选择只使用大纲<br><img src="https://i.loli.net/2018/01/15/5a5c244c3dc9e.png" alt="3.png"></li>
<li>我们会直接得到一份PPT的Word文件，但是排版是混乱的，文字的大小都是不同的<br><img src="https://i.loli.net/2018/01/15/5a5c244c15b3c.png" alt="4.png"></li>
</ol>
<h3 id="去掉文字格式和空格"><a href="#去掉文字格式和空格" class="headerlink" title="去掉文字格式和空格"></a>去掉文字格式和空格</h3><ol>
<li>首先全选文档中的文字，<strong>快捷键：Ctrl+A</strong>  </li>
<li>将文本全部复制到Notepad++中</li>
<li>进入notepad++的文本就会自动变成无格式文本，这是notepad++和Word软件的不同。notepad++是纯文本编辑软件，而Word是字处理软件。  </li>
<li>之后，选择编辑–&gt;行操作–&gt; 移除空行(包括空白字符)，这样文本中的空行和奇怪的空白字符就完全去掉，变成了完全的纯文本<br><img src="https://i.loli.net/2018/01/15/5a5c244bd84ad.png" alt="5.png"></li>
<li>再把最后的文本复制回到Word中就好了~<br><img src="https://i.loli.net/2018/01/15/5a5c244be9d2c.png" alt="6.png"></li>
</ol>
<h3 id="去掉不需要的内容"><a href="#去掉不需要的内容" class="headerlink" title="去掉不需要的内容"></a>去掉不需要的内容</h3><p>最后就是根据每个人的不同需要进行文档中内容的删除，精简，大功告成~  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这样的处理，省去了每个PPT的文字都手动复制的麻烦，其中最最消耗时间的部分就是最后的内容精简，但是这部分是我们必须要进行思考和手动操作的部分，只有我们自己知道自己需要什么内容。  </p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows, Office</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用微软官方镜像重装系统</title>
    <url>/2018/01/02/Windows/Windows_%E5%A6%82%E4%BD%95%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%B5%E8%84%91%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>注意，这是一个完整且详细的新手教程！</p>
<span id="more"></span>

<h1 id="一、写在最前面"><a href="#一、写在最前面" class="headerlink" title="一、写在最前面"></a>一、写在最前面</h1><p><strong>有几句有用的建议，在这里先写,能让你的电脑长久运行良好：</strong><br><strong>- 国内的软件普遍都带有广告，这不是Windows的锅</strong><br><strong>- 不要使用360系列的产品</strong> ，有人和我说企业版特别良心，但是我没用过，欢迎尝试后给我反馈<br><strong>- 所有软件都从官方网站下载，不要图方便使用软件升级助手，或者电脑管家</strong><br><strong>- 安装程序请仔细观察是否有捆绑软件，一定取消勾选的捆绑软件</strong><br><strong>- 注意观察安装程序界面的角落位置|折叠菜单|高级选项|更多，否则你的电脑一定会“自动”多很多奇怪的东西</strong><br><strong>- 如果可以尽量使用微软官方的系统，第三方系统或者Ghost系统确实方便了你的安装过程，但是你一定会被广告和捆绑的软件折磨的不要不要的～最重要的是，不能确定是否会有后门程序，谨慎使用Onekey-Ghost和YLMF</strong><br><strong>- 最后一点千万注意，系统优化类软件除非你清楚这个软件都更改了那些设置，否则不要使用，请相信没有任何一个第三方公司比微软更了解自己的产品</strong>  </p>
<hr>
<h1 id="二、环境及工具"><a href="#二、环境及工具" class="headerlink" title="二、环境及工具"></a>二、环境及工具</h1><ol>
<li>可以正常使用的 <strong>计算机A</strong>（也就是可用的电脑）  </li>
<li>需要重装系统的 <strong>计算机B</strong>（一定要保证开机出现Logo，如果开机Logo都没有，请确认计算机是否通电；检查显示器是否正常；如其他情况请送维修。）  </li>
<li><strong>4G</strong> 空间以上的 <strong>空U盘</strong>  </li>
<li><strong>Rufus</strong> (后面介绍这个工具的用途)<br><a href="https://rufus.akeo.ie/?locale=zh_CN">Rufus-官方网站</a><br><a href="https://rufus.akeo.ie/downloads/rufus-2.18.exe">Rufus-下载链接</a>  </li>
<li><strong>微软官方</strong> 的系统镜像文件<br><a href="http://msdn.itellyou.cn/">MSDNitellyou-搬运官方的非官方下载点</a><br><a href="ed2k://|file|cn_windows_10_multi-edition_version_1709_updated_dec_2017_x64_dvd_100406696.iso|5242322944|7D89E63B0C4B5881DBCDB042FF1EB8F3|/">MSDNitellyou-Windows10中文64位下载链接ed2k</a>  </li>
<li>最重要的一点，最好有网，没有会麻烦些</li>
</ol>
<hr>
<h1 id="三、原理部分"><a href="#三、原理部分" class="headerlink" title="三、原理部分"></a>三、原理部分</h1><h2 id="为计算机安装操作系统过程"><a href="#为计算机安装操作系统过程" class="headerlink" title="为计算机安装操作系统过程"></a>为计算机安装操作系统过程</h2><ul>
<li>计算机的简要启动过程： 通电 - 硬件自检 - 寻找操作系统所在硬盘 - 启动操作系统  </li>
<li>安装系统难理解的是在硬件自检之后，直接从U盘中读取系统安装程序，然后将系统这个大程序写入硬盘的相应分区内</li>
</ul>
<hr>
<h1 id="四、开始安装"><a href="#四、开始安装" class="headerlink" title="四、开始安装"></a>四、开始安装</h1><h2 id="操作部分-–-计算机A"><a href="#操作部分-–-计算机A" class="headerlink" title="操作部分 – 计算机A"></a>操作部分 – 计算机A</h2><p>接下来的操作都是在计算机A下完成的~  </p>
<h3 id="Rufus"><a href="#Rufus" class="headerlink" title="Rufus"></a>Rufus</h3><p>rufus是用来制作可启动U盘的一款绿色应用程序  </p>
<h3 id="下载系统镜像文件"><a href="#下载系统镜像文件" class="headerlink" title="下载系统镜像文件"></a>下载系统镜像文件</h3><p>上面提到的系统镜像文件以Win10-1709为例,这是当前最新版本的Windows,下载之后应该是一个后缀名为.iso的文件<br><img src="https://i.loli.net/2018/01/03/5a4cb6ea2f54e.png" alt="系统镜像截图.png"></p>
<h3 id="使用Rufus制作可启动U盘"><a href="#使用Rufus制作可启动U盘" class="headerlink" title="使用Rufus制作可启动U盘"></a>使用Rufus制作可启动U盘</h3><ol>
<li>双击打开Rufus，插入U盘，确认最顶部设备已经识别你的空U盘<br><img src="https://i.loli.net/2018/01/03/5a4cb75d3e226.png" alt="rufus.png">  </li>
<li>点击箭头指向的按钮，选择刚才下载的镜像文件<br><img src="https://i.loli.net/2018/01/03/5a4cb8c55439c.png" alt="选择镜像.png">  </li>
<li>加载镜像文件，选项如图，选择开始<br><img src="https://i.loli.net/2018/01/03/5a4cbab28beaa.png" alt="点击开始.png">  </li>
<li>点击确认<br><img src="https://i.loli.net/2018/01/03/5a4cbab2bc3b4.png" alt="点击确认.png">    </li>
<li>开始写入 ， 等待<br><img src="https://i.loli.net/2018/01/03/5a4cbab28b960.png" alt="写入镜像.png">  </li>
<li>U盘制作成功<br><img src="https://i.loli.net/2018/01/03/5a4ce0da0574e.png" alt="GG.png"></li>
</ol>
<h2 id="操作部分-–-计算机B"><a href="#操作部分-–-计算机B" class="headerlink" title="操作部分 – 计算机B"></a>操作部分 – 计算机B</h2><p>下面的部分转移到重新安装系统的计算机B上面来了～  </p>
<h3 id="从U盘中启动系统安装程序"><a href="#从U盘中启动系统安装程序" class="headerlink" title="从U盘中启动系统安装程序"></a>从U盘中启动系统安装程序</h3><ol>
<li>开机按下电源按键之后，请反复按下F12，直到屏幕变成这个样子～<br><a href="https://i.loli.net/2018/01/03/5a4ce554b6087.jpg"><img src="https://i.loli.net/2018/01/03/5a4ce554b6087.jpg" alt="WeChat Image_20171229111936.jpg"></a>  </li>
<li>选择引导设备菜单，请选择刚刚制作好的U盘，一般设备名称会是USB……或者Sandisk……或者Kingston……这类的名字，或者如上图–通用闪存设备，回车选择后安装程序自行启动<br><img src="https://i.loli.net/2018/01/04/5a4dfb5b5c97e.png" alt="1.png">  </li>
<li>选择语言，没什么特殊要求就中文就可以了，当然如果需要请下载EN版本的镜像，或者多国语言版，在下拉菜单中选择需要的语言<br><img src="https://i.loli.net/2018/01/04/5a4dfb5b6c842.png" alt="2.png">  </li>
<li>点击现在安装…<br><img src="https://i.loli.net/2018/01/04/5a4dfdae8fab5.png" alt="3.png">   </li>
<li>稍等<br><img src="https://i.loli.net/2018/01/04/5a4dfb5b71520.png" alt="4.png">  </li>
<li>这里有两种情况：</li>
</ol>
<ul>
<li>有密钥的情况请直接输入，系统会被激活，安装完成之后就是官方正版的系统；  </li>
<li>没有密钥，只是需要在系统安装完成之后再次输入密钥或者安装一个补丁就好；</li>
</ul>
<p>  <img src="https://i.loli.net/2018/01/04/5a4dfb5b7e555.png" alt="5.png">  </p>
<ol>
<li>这个位置就很随意了，选择你需要的版本，我安装的是一个WIN10专业版<br><img src="https://i.loli.net/2018/01/04/5a4dfb5b86205.png" alt="6.png">  </li>
<li>只能接受，接受才能下一步<br><img src="https://i.loli.net/2018/01/04/5a4dfb5b8612e.png" alt="7.png">  </li>
<li>这里也是两种情况：</li>
</ol>
<ul>
<li>如果你的计算机中本身有WIN7、8、8.1，可以选择直接升级，但是升级之后会有Windows Old文件夹占用大量C盘空间，清理会很麻烦；</li>
<li>如果就已经打算重新安装了，<strong>请确认数据已经备份或者无用</strong>，之后这里选择自定义，进入下一步；</li>
</ul>
<p>  <img src="https://i.loli.net/2018/01/04/5a4dfb5ba43a3.png" alt="8.png">  </p>
<ol>
<li><strong>Note:</strong> 如果你的计算机中有重要数据请自行备份，</li>
</ol>
<p>  <strong>- 下面开始进行的操作会直接修改硬盘的内容！！！</strong><br>  <strong>- 下面开始进行的操作会直接修改硬盘的内容！！！</strong><br>  <strong>- 下面开始进行的操作会直接修改硬盘的内容！！！</strong>   </p>
<p>  硬盘分区关键词：<br>  <strong>驱动器0</strong> 是指物理硬盘编号0，有几块硬盘就顺序向下编号0&#x2F;1&#x2F;2&#x2F;3…<br>  <strong>分区1</strong> 一般是指物理硬盘的第一个分区，通常对应了CDEF不同的字母，同样有几个分区就顺序向下编号1&#x2F;2&#x2F;3…<br>  <strong>主分区</strong> 是我们在系统内使用的硬盘分区，主分区从上到下分别是CDEF盘，图中只有一个主分区，所以我的系统安装完成之后只有一个C盘  </p>
<p>  图示数字说明:<br>  1-<strong>删除</strong> 硬盘分区会让当前的硬盘空间释放为可用空间，用于打破之前划分的分区，比如可以将分区CDEF的EF删除，合并成新的E盘  </p>
<p>  2-<strong>格式化</strong> 格式化是清空当前选择分区内的所有数据，所有分区我们都需要格式化  </p>
<p>  3-<strong>新建</strong> 新建分区需要我们指定大小，比如新建的C盘我希望有100G，那么我需要在新建之后输入100*1024M&#x3D;102400，这样就新建了100G的新分区   </p>
<p>  4-<strong>类型</strong> 中，我们只需要修改和关注主分区即可,其他保留就可以  </p>
<p>  <strong>Note:</strong> 点击下一步之前，一定确认我们选择的是 <strong>由上到下的第一个主分区</strong> ，因为系统会安装到高亮选择的主分区内，请 <strong>检查</strong> 之后在点击下一步<br><img src="https://i.loli.net/2018/01/04/5a4dfb5ba4401.png" alt="9.png"></p>
<ol>
<li><p>点了 <strong>下一步</strong> 就开始安装咯， <strong>之前的已经没有办法再更改了</strong> ，除非从1开始再来一次…..<br><img src="https://i.loli.net/2018/01/04/5a4dfb5ba43e3.png" alt="10.png">  </p>
</li>
<li><p>结束了，等待它自动重启看看全新的系统吧～</p>
</li>
</ol>
<hr>
<h1 id="五、配置新系统"><a href="#五、配置新系统" class="headerlink" title="五、配置新系统"></a>五、配置新系统</h1><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p> <strong>淘宝</strong> 激活码 很便宜的  </p>
<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p><strong>官方网站</strong> 或者 <strong>驱动精灵</strong><br>最好不用鲁大师和360，真的  </p>
<h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>待续吧….累了…</p>
<hr>
<h1 id="六、软件推荐"><a href="#六、软件推荐" class="headerlink" title="六、软件推荐"></a>六、软件推荐</h1><p>微信QQ这些都是必备的，我就不说了……说一些好用的软件但是少有人知道的……我平时不安装电脑管家，杀毒软件就一个小红伞，如果真的不放心会在加一个火绒，基本上够了，小红伞对硬盘要求还挺高的，如果觉得安装小红伞卡，就安装小A吧，Avast……  </p>
<p>软件清单如下：</p>
<ul>
<li><a href="https://notepad-plus-plus.org/">Notepad++</a> 替代Windows记事本的最佳方案，支持代码高亮哦～  </li>
<li><a href="http://potplayer.daum.net/?lang=zh_CN">Potplayer</a> Windows下最简单好用的播放器～  </li>
<li><a href="http://www.voidtools.com/">Everything</a> Windows搜索神器～  </li>
<li><a href="http://www.firefox.com.cn/">Firefox</a> 浏览器……我不知道该怎么说，又爱又恨吧～  </li>
<li><a href="https://www.piriform.com/CCLEANER">CCleaner</a> Windows下的老牌清理软件….还不错～</li>
<li><a href="ed2k://|file|cn_office_professional_plus_2016_x86_x64_dvd_6969182.iso|2588266496|27EEA4FE4BB13CD0ECCDFC24167F9E01|/">Office 2016 - 全家桶 ed2k</a> Office2016 ed2k链接，请直接迅雷下载～</li>
<li><a href="http://www.bandisoft.com/bandizip/">Bandizip</a> 美观友好的解压缩软件，省心免费～</li>
<li><a href="http://www.mactype.net/">Mactype</a> Windows字体渲染优化，解救windows默认的字体渲染，配置省事，效果明显～</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>本地方式安装.Net3.5笔记</title>
    <url>/2018/01/22/Windows/Windows_%E6%9C%AC%E5%9C%B0%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-Net3-5%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>windows新版本淘汰了.net 3.5，默认不安装。但是在没有网络的时候需要安装就很尴尬，我平时也没有备份这种安装包的习惯。所以找到了如下的解决方案，使用微软的映像部署工具进行安装，步骤如下：  </p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol>
<li>挂载微软的官方镜像，或者放入安装光盘。<span id="more"></span></li>
<li>打开cmd或者Powershell</li>
<li>输入命令:<br> <code>dism.exe /online /enable-feature /all /featurename:NetFX3 Source:Z:\sources\sxs</code></li>
<li>等待系统处理命令，完成。</li>
</ol>
<p><strong>Note:命令中可以不添加&#x2F;all，最后一条参数中的Z盘符改为镜像挂载所在的盘符即可</strong>  </p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>title</title>
    <url>/1980/12/08/title/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>CFS 调度器资料</title>
    <url>/2023/12/22/Linux/Linux_CFS%20Schedler/</url>
    <content><![CDATA[<p><a href="https://docs.kernel.org/scheduler/sched-design-CFS.html">https://docs.kernel.org/scheduler/sched-design-CFS.html</a><br><a href="http://arthurchiao.art/blog/linux-cfs-design-and-implementation-zh/#11-cfs%E8%BF%9B%E7%A8%8Btask%E7%9A%84%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6">http://arthurchiao.art/blog/linux-cfs-design-and-implementation-zh/#11-cfs%E8%BF%9B%E7%A8%8Btask%E7%9A%84%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6</a><br><a href="https://danluu.com/cgroup-throttling/">https://danluu.com/cgroup-throttling/</a><br><a href="https://heapdump.cn/article/4235306">https://heapdump.cn/article/4235306</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>发送一个NMI unknown 事件给OS</title>
    <url>/2023/06/28/Linux/Linux_DebugLinuxCrashOnEC2/</url>
    <content><![CDATA[<h2 id="在ec2触发linux的crash"><a href="#在ec2触发linux的crash" class="headerlink" title="在ec2触发linux的crash"></a>在ec2触发linux的crash</h2><p>发送一个诊断请求给EC2， 触发os本身NMI Unknown事件，这个时间会触发Kdump记录当时的现场。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">aws ec2 send-diagnostic-interrupt <span class="token parameter variable">--region</span> cn-north-1 --instance-id i-********************</code></pre>

<p>记录下来的现场文件保存在 &#x2F;var&#x2F;crash&#x2F; </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">
<span class="token punctuation">[</span>root@mysql <span class="token number">5.14</span>.0-284.11.1.el9_2.x86_64<span class="token punctuation">]</span><span class="token comment"># ll /var/crash/</span>
total <span class="token number">0</span>
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Jun  <span class="token number">6</span> 05:22 <span class="token number">127.0</span>.0.1-2023-06-06-05:22:11
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Jun  <span class="token number">6</span> 08:58 <span class="token number">127.0</span>.0.1-2023-06-06-08:58:20
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Jun  <span class="token number">9</span> 09:39 <span class="token number">127.0</span>.0.1-2023-06-09-09:39:56
</code></pre>

<p>使用Crash命令进行分析， 需要安装kernel-debug 和 kernel-debuginfo kernel-devel</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mysql <span class="token number">5.14</span>.0-284.11.1.el9_2.x86_64<span class="token punctuation">]</span><span class="token comment">#  crash /usr/lib/debug/lib/modules/5.14.0-284.11.1.el9_2.x86_64/vmlinux /var/crash/127.0.0.1-2023-06-09-09\:39\:56/vmcore</span></code></pre>

<p>相关文档： </p>
<p><a href="https://aws.amazon.com/blogs/aws/new-trigger-a-kernel-panic-to-diagnose-unresponsive-ec2-instances/">New – Trigger a Kernel Panic to Diagnose Unresponsive EC2 Instances</a></p>
<p><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">发送诊断中断（适用于高级用户）</a></p>
<p>主要的问题是怎么解读这个结果， 目前我的理解是 找大佬。</p>
<h2 id="Cscope-查看内核源代码"><a href="#Cscope-查看内核源代码" class="headerlink" title="Cscope 查看内核源代码"></a>Cscope 查看内核源代码</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源代码</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
yum 
yum download <span class="token parameter variable">--source</span> kernel
<span class="token comment"># 解压代码包</span>
rpm2cpio ./kernel-5.14.0-284.11.1.el9_2.src.rpm <span class="token operator">|</span> cpio <span class="token parameter variable">-div</span>
<span class="token function">tar</span> xf ./linux-5.14.0-284.11.1.el9_2.tar.xz
<span class="token comment"># 使用命令查看源代码</span>
<span class="token function">make</span> cscope <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86
<span class="token comment"># 读取并标记tag</span>
<span class="token function">make</span> tags <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>x86
<span class="token comment"># 查看</span>
cscope <span class="token parameter variable">-d</span></code></pre>

<h2 id="Dracut的使用和命令"><a href="#Dracut的使用和命令" class="headerlink" title="Dracut的使用和命令"></a>Dracut的使用和命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加驱动程序到ramfs</span>
<span class="token punctuation">]</span>$ dracut <span class="token parameter variable">-fv</span> --add-drivers <span class="token string">"nvme ena"</span> /boot/initramfs-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>.img <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>
<span class="token comment"># 查看是否有模块在ramfs中</span>
<span class="token punctuation">]</span>$ lsinitrd /boot/initramfs-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>.img <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"nvme|ena"</span></code></pre>

<h2 id="安全软件引起的用户空间进程失去响应："><a href="#安全软件引起的用户空间进程失去响应：" class="headerlink" title="安全软件引起的用户空间进程失去响应："></a>安全软件引起的用户空间进程失去响应：</h2><p>Redhat关于这个问题的文档说明： </p>
<ul>
<li><p><a href="https://access.redhat.com/solutions/5201171">https://access.redhat.com/solutions/5201171</a></p>
</li>
<li><p><a href="https://access.redhat.com/solutions/2838901">https://access.redhat.com/solutions/2838901</a></p>
</li>
</ul>
<p>使用Ftrace的方法，和一部分命令的使用方法： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-51-167 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'func fanotify_get_response +p'</span> <span class="token operator">></span> /sys/kernel/debug/dynamic_debug/control</code></pre>

<p>追踪这个系统调用， 并输出 callgraph.<br>内核的DynamicTracing， 这是一个古老的方式了， 出现在Kprobe之前。会直接将追踪的结果输出到dmesg中。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-51-167 ~<span class="token punctuation">]</span>$ perf trace <span class="token parameter variable">-s</span> <span class="token parameter variable">-p</span> <span class="token number">2688</span>
<span class="token punctuation">[</span>root@ip-172-31-51-167 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /var/crash/127.0.0.1-2023-08-11-06:53:10
<span class="token punctuation">[</span>root@ip-172-31-51-167 ~<span class="token punctuation">]</span>$ crash /usr/lib/debug/lib/modules/6.1.34-59.116.amzn2023.x86_64/vmlinux  vmcore
<span class="token punctuation">[</span>root@ip-172-31-51-167 <span class="token number">127.0</span>.0.1-2023-08-11-06:53:10<span class="token punctuation">]</span>$ ll /var/crash
total <span class="token number">0</span>
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Aug <span class="token number">10</span> 05:52 <span class="token number">127.0</span>.0.1-2023-08-10-05:52:16
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Aug <span class="token number">10</span> 06:13 <span class="token number">127.0</span>.0.1-2023-08-10-06:13:44
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Aug <span class="token number">11</span> 05:45 <span class="token number">127.0</span>.0.1-2023-08-10-13:03:27
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">91</span> Aug <span class="token number">12</span> <span class="token number">15</span>:05 <span class="token number">127.0</span>.0.1-2023-08-11-04:57:13
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Aug <span class="token number">11</span> 08:41 <span class="token number">127.0</span>.0.1-2023-08-11-06:53:10
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">67</span> Aug <span class="token number">11</span> <span class="token number">20</span>:56 badstop
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">41</span> Aug <span class="token number">11</span> <span class="token number">20</span>:46 crash</code></pre>

<h2 id="Grubby-命令简单的用法"><a href="#Grubby-命令简单的用法" class="headerlink" title="Grubby 命令简单的用法"></a>Grubby 命令简单的用法</h2><p>设置内核参数： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有内核的参数</span>
$ grubby <span class="token parameter variable">--info</span><span class="token operator">=</span>ALL
<span class="token comment"># 设置默认的启动内核</span>
$ grubby --set-default-index<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 查看当前的默认启动内核</span>
$ grubby --default-kernel
<span class="token comment"># 移除所有内核的参数</span>
$ grubby --update-kernel<span class="token operator">=</span>ALL --remove-args<span class="token operator">=</span><span class="token string">"systemd.log_level=debug systemd.log_target=kmsg log_buf_len=1M loglevel=8 crashkernel=512M"</span>
<span class="token comment"># 更新所有内核的参数</span>
$ grubby --update-kernel<span class="token operator">=</span>ALL <span class="token parameter variable">--args</span><span class="token operator">=</span><span class="token string">"systemd.log_level=debug systemd.log_target=kmsg log_buf_len=1M loglevel=8 crashkernel=512M"</span>
<span class="token comment"># 为特定的内核添加参数。</span>
$ grubby --update-kernel<span class="token operator">=</span>/boot/vmlinuz-5.9.1-1.el8.elrepo.x86_64 <span class="token parameter variable">--args</span><span class="token operator">=</span>“systemd.log_level<span class="token operator">=</span>debug <span class="token assign-left variable">systemd.log_target</span><span class="token operator">=</span>kmsg <span class="token assign-left variable">log_buf_len</span><span class="token operator">=</span>1M <span class="token assign-left variable">loglevel</span><span class="token operator">=</span><span class="token number">8</span> <span class="token assign-left variable">crashkernel</span><span class="token operator">=</span>512M”

<span class="token punctuation">[</span>root@ip-172-31-0-170 ~<span class="token punctuation">]</span><span class="token comment"># sudo kdumpctl status</span>
kdump: Kdump is operational

<span class="token punctuation">[</span>root@ip-172-31-0-170 ~<span class="token punctuation">]</span><span class="token comment"># sudo kdumpctl showmem</span>
kdump: Reserved 256MB memory <span class="token keyword">for</span> crash kernel

<span class="token punctuation">[</span>root@ip-172-31-0-170 ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/cmdline</span>
<span class="token assign-left variable">BOOT_IMAGE</span><span class="token operator">=</span><span class="token punctuation">(</span>hd0,gpt1<span class="token punctuation">)</span>/boot/vmlinuz-6.1.34-59.116.amzn2023.x86_64 <span class="token assign-left variable">root</span><span class="token operator">=</span>UUID<span class="token operator">=</span>483d7075-a0f8-4ba8-a951-a668fa079cac ro <span class="token assign-left variable">console</span><span class="token operator">=</span>tty0 <span class="token assign-left variable">console</span><span class="token operator">=</span>ttyS0,115200n8 <span class="token assign-left variable">nvme_core.io_timeout</span><span class="token operator">=</span><span class="token number">42949672</span>
<span class="token number">95</span> <span class="token assign-left variable">rd.emergency</span><span class="token operator">=</span>poweroff <span class="token assign-left variable">rd.shell</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">selinux</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">security</span><span class="token operator">=</span>selinux quiet <span class="token assign-left variable">systemd.log_level</span><span class="token operator">=</span>debug <span class="token assign-left variable">systemd.log_target</span><span class="token operator">=</span>kmsg <span class="token assign-left variable">log_buf_len</span><span class="token operator">=</span>1M <span class="token assign-left variable">loglevel</span><span class="token operator">=</span><span class="token number">8</span> <span class="token assign-left variable">crashkernel</span><span class="token operator">=</span>512M
</code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>追踪数据包经过的iptables规则</title>
    <url>/2023/12/22/Linux/Linux_Iptables-and-conntrack/</url>
    <content><![CDATA[<p><a href="https://stackoverflow.com/questions/47645859/meaning-of-modules-instances-in-proc-modules">https://stackoverflow.com/questions/47645859/meaning-of-modules-instances-in-proc-modules</a></p>
<h2 id="Lsmod命令"><a href="#Lsmod命令" class="headerlink" title="Lsmod命令"></a>Lsmod命令</h2><p>基于manpage的说明， 这个命令的数据来源是 ： &#x2F;proc&#x2F;modules</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos ~<span class="token punctuation">]</span><span class="token comment"># lsmod</span>
Module                  Size  Used by
iptable_nat            <span class="token number">12875</span>  <span class="token number">0</span>
nf_conntrack_ipv4      <span class="token number">19149</span>  <span class="token number">1</span>
nf_defrag_ipv4         <span class="token number">12729</span>  <span class="token number">1</span> nf_conntrack_ipv4
nf_nat_ipv4            <span class="token number">14115</span>  <span class="token number">1</span> iptable_nat
nf_nat                 <span class="token number">26583</span>  <span class="token number">1</span> nf_nat_ipv4
nf_conntrack          <span class="token number">143360</span>  <span class="token number">3</span> nf_nat,nf_nat_ipv4,nf_conntrack_ipv4
iptable_filter         <span class="token number">12810</span>  <span class="token number">0</span>
nfit                   <span class="token number">59735</span>  <span class="token number">0</span>
libnvdimm             <span class="token number">163620</span>  <span class="token number">1</span> nfit
iosf_mbi               <span class="token number">15582</span>  <span class="token number">0</span>
crc32_pclmul           <span class="token number">13133</span>  <span class="token number">0</span>
ghash_clmulni_intel    <span class="token number">13273</span>  <span class="token number">0</span>
aesni_intel           <span class="token number">189456</span>  <span class="token number">0</span>
ppdev                  <span class="token number">17671</span>  <span class="token number">0</span>
lrw                    <span class="token number">13286</span>  <span class="token number">1</span> aesni_intel
gf128mul               <span class="token number">15139</span>  <span class="token number">1</span> lrw
glue_helper            <span class="token number">13990</span>  <span class="token number">1</span> aesni_intel
ablk_helper            <span class="token number">13597</span>  <span class="token number">1</span> aesni_intel
cryptd                 <span class="token number">21190</span>  <span class="token number">3</span> ghash_clmulni_intel,aesni_intel,ablk_helper
parport_pc             <span class="token number">28205</span>  <span class="token number">0</span>
parport                <span class="token number">46395</span>  <span class="token number">2</span> ppdev,parport_pc
i2c_piix4              <span class="token number">22401</span>  <span class="token number">0</span>
pcspkr                 <span class="token number">12718</span>  <span class="token number">0</span>
ip_tables              <span class="token number">27126</span>  <span class="token number">2</span> iptable_filter,iptable_nat
xfs                  <span class="token number">1014152</span>  <span class="token number">1</span>
libcrc32c              <span class="token number">12644</span>  <span class="token number">3</span> xfs,nf_nat,nf_conntrack
crct10dif_pclmul       <span class="token number">14307</span>  <span class="token number">0</span>
crct10dif_common       <span class="token number">12595</span>  <span class="token number">1</span> crct10dif_pclmul
crc32c_intel           <span class="token number">22094</span>  <span class="token number">1</span>
nvme                   <span class="token number">32382</span>  <span class="token number">1</span>
serio_raw              <span class="token number">13434</span>  <span class="token number">0</span>
ena                    <span class="token number">96895</span>  <span class="token number">0</span>
nvme_core              <span class="token number">63547</span>  <span class="token number">3</span> nvme
sunrpc                <span class="token number">366617</span>  <span class="token number">1</span></code></pre>

<p>&#x2F;proc&#x2F;modules 的输出结果</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/modules</span>
iptable_nat <span class="token number">12875</span> <span class="token number">0</span> - Live 0xffffffffc0661000
nf_conntrack_ipv4 <span class="token number">19149</span> <span class="token number">1</span> - Live 0xffffffffc065b000
nf_defrag_ipv4 <span class="token number">12729</span> <span class="token number">1</span> nf_conntrack_ipv4, Live 0xffffffffc05fd000
nf_nat_ipv4 <span class="token number">14115</span> <span class="token number">1</span> iptable_nat, Live 0xffffffffc05f4000
nf_nat <span class="token number">26583</span> <span class="token number">1</span> nf_nat_ipv4, Live 0xffffffffc0603000
nf_conntrack <span class="token number">143360</span> <span class="token number">3</span> nf_conntrack_ipv4,nf_nat_ipv4,nf_nat, Live 0xffffffffc0634000
iptable_filter <span class="token number">12810</span> <span class="token number">0</span> - Live 0xffffffffc05dd000
nfit <span class="token number">59735</span> <span class="token number">0</span> - Live 0xffffffffc066d000
libnvdimm <span class="token number">163620</span> <span class="token number">1</span> nfit, Live 0xffffffffc060b000
iosf_mbi <span class="token number">15582</span> <span class="token number">0</span> - Live 0xffffffffc05ed000
crc32_pclmul <span class="token number">13133</span> <span class="token number">0</span> - Live 0xffffffffc05e5000
ghash_clmulni_intel <span class="token number">13273</span> <span class="token number">0</span> - Live 0xffffffffc059e000
aesni_intel <span class="token number">189456</span> <span class="token number">0</span> - Live 0xffffffffc05ad000
ppdev <span class="token number">17671</span> <span class="token number">0</span> - Live 0xffffffffc05a4000
lrw <span class="token number">13286</span> <span class="token number">1</span> aesni_intel, Live 0xffffffffc0575000
gf128mul <span class="token number">15139</span> <span class="token number">1</span> lrw, Live 0xffffffffc0590000
glue_helper <span class="token number">13990</span> <span class="token number">1</span> aesni_intel, Live 0xffffffffc0570000
ablk_helper <span class="token number">13597</span> <span class="token number">1</span> aesni_intel, Live 0xffffffffc0418000
cryptd <span class="token number">21190</span> <span class="token number">3</span> ghash_clmulni_intel,aesni_intel,ablk_helper, Live 0xffffffffc0569000
parport_pc <span class="token number">28205</span> <span class="token number">0</span> - Live 0xffffffffc0596000
parport <span class="token number">46395</span> <span class="token number">2</span> ppdev,parport_pc, Live 0xffffffffc0583000
i2c_piix4 <span class="token number">22401</span> <span class="token number">0</span> - Live 0xffffffffc057c000
pcspkr <span class="token number">12718</span> <span class="token number">0</span> - Live 0xffffffffc0466000
ip_tables <span class="token number">27126</span> <span class="token number">2</span> iptable_nat,iptable_filter, Live 0xffffffffc045e000
xfs <span class="token number">1014152</span> <span class="token number">1</span> - Live 0xffffffffc0470000
libcrc32c <span class="token number">12644</span> <span class="token number">3</span> nf_nat,nf_conntrack,xfs, Live 0xffffffffc0459000
crct10dif_pclmul <span class="token number">14307</span> <span class="token number">0</span> - Live 0xffffffffc0438000
crct10dif_common <span class="token number">12595</span> <span class="token number">1</span> crct10dif_pclmul, Live 0xffffffffc046b000
crc32c_intel <span class="token number">22094</span> <span class="token number">1</span> - Live 0xffffffffc041d000
nvme <span class="token number">32382</span> <span class="token number">1</span> - Live 0xffffffffc040f000
serio_raw <span class="token number">13434</span> <span class="token number">0</span> - Live 0xffffffffc0407000
ena <span class="token number">96895</span> <span class="token number">0</span> - Live 0xffffffffc0440000
nvme_core <span class="token number">63547</span> <span class="token number">3</span> nvme, Live 0xffffffffc0427000
sunrpc <span class="token number">366617</span> <span class="token number">1</span> - Live 0xffffffffc03ac000</code></pre>

<h2 id="调试-Iptables-的方法"><a href="#调试-Iptables-的方法" class="headerlink" title="调试 Iptables 的方法"></a>调试 Iptables 的方法</h2><p>Kubernetes 里面大量的使用了iptables 规则的各种转换，可以使用iptables的trace功能进行追踪， 查看具体经过了哪些链表。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-t</span> raw <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-s</span> <span class="token number">172.31</span>.47.174/32 <span class="token parameter variable">-j</span> TRACE
or
iptables <span class="token parameter variable">-t</span> raw <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-d</span> <span class="token number">172.31</span>.71.167 <span class="token parameter variable">--dport</span> <span class="token number">8090</span> <span class="token parameter variable">-j</span> TRACE

modprobe ipt_LOG ip6t_LOG nfnetlink_log
modprobe nf_log_ipv4
xtables-monitor  <span class="token parameter variable">--trace</span></code></pre>
<p>完成之后就可以在 message 里面看到记录了。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:PREROUTING:rule:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:KUBE-SERVICES:return:45 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:PREROUTING:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-PROXY-FIREWALL:return:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:return:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:24 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-SERVICES:return:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-EXTERNAL-SERVICES:return:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:policy:5 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:POSTROUTING:rule:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:KUBE-POSTROUTING:rule:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:POSTROUTING:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:AWS-SNAT-CHAIN-0:return:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: nat:POSTROUTING:policy:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">60</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26039</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415057</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">62727</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 SYN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>020423010402080ADBFD1C1B0000000001030307<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26040</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">135</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26041</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415058</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616626</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">491</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK PSH <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1E0F3D8DDFB5<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26042</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26043</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415141</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616804</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK FIN <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1EFA3D8DE09F<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: raw:PREROUTING:policy:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:PREROUTING:policy:4 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span> <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:FORWARD:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:FORWARD:rule:2 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: filter:KUBE-FORWARD:rule:3 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span>
kern  :warn  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>Thu Sep <span class="token number">21</span> <span class="token number">15</span>:01:25 <span class="token number">2023</span><span class="token punctuation">]</span> TRACE: mangle:POSTROUTING:policy:1 <span class="token assign-left variable">IN</span><span class="token operator">=</span>eth3 <span class="token assign-left variable">OUT</span><span class="token operator">=</span>eni7b7c562198a <span class="token assign-left variable">MAC</span><span class="token operator">=</span>02:19:e6:40:fc:c8:02:55:96:c9:21:66:08:00 <span class="token assign-left variable">SRC</span><span class="token operator">=</span><span class="token number">172.31</span>.47.174 <span class="token assign-left variable">DST</span><span class="token operator">=</span><span class="token number">172.31</span>.55.27 <span class="token assign-left variable">LEN</span><span class="token operator">=</span><span class="token number">52</span> <span class="token assign-left variable">TOS</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">PREC</span><span class="token operator">=</span>0x00 <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">63</span> <span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token number">26044</span> DF <span class="token assign-left variable">PROTO</span><span class="token operator">=</span>TCP <span class="token assign-left variable">SPT</span><span class="token operator">=</span><span class="token number">22896</span> <span class="token assign-left variable">DPT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token assign-left variable">SEQ</span><span class="token operator">=</span><span class="token number">1763415142</span> <span class="token assign-left variable">ACK</span><span class="token operator">=</span><span class="token number">2994616805</span> <span class="token assign-left variable">WINDOW</span><span class="token operator">=</span><span class="token number">490</span> <span class="token assign-left variable">RES</span><span class="token operator">=</span>0x00 ACK <span class="token assign-left variable">URGP</span><span class="token operator">=</span><span class="token number">0</span> OPT <span class="token punctuation">(</span>0101080ADBFD1FE43D8DE18A<span class="token punctuation">)</span></code></pre>
<p>移除规则的命令： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-F</span> PREROUTING <span class="token parameter variable">-t</span> raw</code></pre>

<p>详细的命令参考这个Blog ： <a href="https://blog.csdn.net/qq_43684922/article/details/126815699">https://blog.csdn.net/qq_43684922/article/details/126815699</a></p>
<p>注： 这个功能非常清晰， 但是如果网络流量比较大会导致内核输出了太多的信息， 会卡， 谨慎写策略。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>CheatSheet_Kubernetes</title>
    <url>/2023/12/08/CheatSheet_Kubernetes/</url>
    <content><![CDATA[<h3 id="移除所有失败的pod"><a href="#移除所有失败的pod" class="headerlink" title="移除所有失败的pod"></a>移除所有失败的pod</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl delete pod --field-selector<span class="token operator">=</span><span class="token string">"status.phase==Failed"</span></code></pre>

<h2 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h2><p>查看 AWS LoadBalancer 证书的信息，检查证书的有效期： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io aws-load-balancer-webhook <span class="token parameter variable">-ojsonpath</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>.webhooks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.clientConfig.caBundle<span class="token punctuation">&#125;</span>  <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span>  <span class="token operator">|</span> openssl x509 <span class="token parameter variable">-noout</span> <span class="token parameter variable">-text</span></code></pre>

<h2 id="使用-Debug-容器"><a href="#使用-Debug-容器" class="headerlink" title="使用 Debug 容器"></a>使用 Debug 容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给特定的容器附加一个Sidecar， 并启动shell。</span>
kubectl debug <span class="token parameter variable">-it</span> <span class="token parameter variable">--image</span><span class="token operator">=</span>public.ecr.aws/amazonlinux/amazonlinux:latest aws-node-cpmck
<span class="token comment"># netshoot容器， 比较方便的用来进行网络部分的调试。</span>
<span class="token comment"># 项目仓库地址： https://github.com/nicolaka/netshoot</span>
kubectl debug mypod <span class="token parameter variable">-it</span> <span class="token parameter variable">--image</span><span class="token operator">=</span>nicolaka/netshoot</code></pre>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>CheatSheet_Linux</title>
    <url>/2023/12/08/CheatSheet_Linux/</url>
    <content><![CDATA[<h3 id="PS-Command"><a href="#PS-Command" class="headerlink" title="PS Command"></a>PS Command</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Top CPU users</span>
<span class="token function">ps</span> auxwww <span class="token parameter variable">--sort</span> -%cpu <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span>

<span class="token comment"># Top memory users</span>
<span class="token function">ps</span> auxwww <span class="token parameter variable">--sort</span> <span class="token parameter variable">-rss</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span>

<span class="token function">ps</span> auxf <span class="token parameter variable">--width</span><span class="token operator">=</span><span class="token number">200</span>
or 
<span class="token function">ps</span> auxwwwf</code></pre>
<h3 id="Curl-Command"><a href="#Curl-Command" class="headerlink" title="Curl Command"></a>Curl Command</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> <span class="token string">"time_namelookup:%&#123;time_namelookup&#125;<span class="token entity" title="\n">\n</span>time_connect: %&#123;time_connect&#125;<span class="token entity" title="\n">\n</span>time_appconnect: %&#123;time_appconnect&#125;<span class="token entity" title="\n">\n</span>time_redirect:  %&#123;time_redirect&#125;<span class="token entity" title="\n">\n</span>time_pretransfer:  %&#123;time_pretransfer&#125;<span class="token entity" title="\n">\n</span>time_starttransfer: %&#123;time_starttransfer&#125;<span class="token entity" title="\n">\n</span>time_total: %&#123;time_total&#125;<span class="token entity" title="\n">\n</span>"</span>  http://nginx.liarlee.site/Fedora-Workstation-Live-x86_64-38_Beta-1.3.iso</code></pre>
<h3 id="Sysctl-Command"><a href="#Sysctl-Command" class="headerlink" title="Sysctl Command"></a>Sysctl Command</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">"rmem|wmem|tcp_mem|adv_win|moderate"</span></code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CheatSheet_awscli</title>
    <url>/2023/12/08/Cheatsheet_AWS-CLI/</url>
    <content><![CDATA[<h3 id="查看实例和对应实例的系统平台信息"><a href="#查看实例和对应实例的系统平台信息" class="headerlink" title="查看实例和对应实例的系统平台信息"></a>查看实例和对应实例的系统平台信息</h3><pre class="language-bash" data-language="bash"><code class="language-bash">aws ec2 describe-instances <span class="token parameter variable">--query</span> <span class="token string">"Reservations[*].Instances[*].&#123;InstanceId:InstanceId,PlatformDetails:Platform&#125;"</span> <span class="token parameter variable">--output</span> table</code></pre>
<h3 id="查看实例和EBS的关联关系"><a href="#查看实例和EBS的关联关系" class="headerlink" title="查看实例和EBS的关联关系"></a>查看实例和EBS的关联关系</h3><pre class="language-bash" data-language="bash"><code class="language-bash">aws ec2 describe-volumes <span class="token parameter variable">--query</span> <span class="token string">'Volumes[*].[VolumeId, Attachments[0].InstanceId, Size]'</span> <span class="token parameter variable">--output</span> table</code></pre>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>添加一个Redhat到EKS集群， 基于Packer的步骤</title>
    <url>/2023/07/11/AWS/EKS_Add-redhat-release-to-eks/</url>
    <content><![CDATA[<p>Copy From zhojiew 的私有仓库文档， 已经经过授权  ~ </p>
<hr>
<p>官方提供了基于packer工具的构建脚本</p>
<p>这里手动把相关的步骤执行下，基于redhat9构建一个自定义ami。据称eks优化的ami也是通过以下步骤完成的</p>
<h1 id="手动构建ami"><a href="#手动构建ami" class="headerlink" title="手动构建ami"></a>手动构建ami</h1><p>拉仓库</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ec2-suer
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span> <span class="token parameter variable">-y</span>
<span class="token function">git</span> clone https://github.com/awslabs/amazon-eks-ami.git</code></pre>

<p>配置环境变量</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">KUBERNETES_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">1.26.4</span> 
<span class="token key attr-name">KUBERNETES_BUILD_DATE</span><span class="token punctuation">=</span><span class="token value attr-value">2023-05-11</span> 
<span class="token key attr-name">BINARY_BUCKET_NAME</span><span class="token punctuation">=</span><span class="token value attr-value">amazon-eks</span>
<span class="token key attr-name">BINARY_BUCKET_REGION</span><span class="token punctuation">=</span><span class="token value attr-value">cn-north-1</span>
<span class="token key attr-name">DOCKER_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">20.10.23-1.amzn2.0.1</span>
<span class="token key attr-name">CONTAINERD_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">1.6.*</span>
<span class="token key attr-name">RUNC_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">1.1.5-1.amzn2</span>
<span class="token key attr-name">CNI_PLUGIN_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">v0.8.6</span>
<span class="token key attr-name">PULL_CNI_FROM_GITHUB</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">SONOBUOY_E2E_REGISTRY</span><span class="token punctuation">=</span><span class="token value attr-value">""</span>
<span class="token key attr-name">PAUSE_CONTAINER_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">3.5</span>
<span class="token key attr-name">CACHE_CONTAINER_IMAGES</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">WORKING_DIR</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/worker</span>
<span class="token key attr-name">TEMPLATE_DIR</span><span class="token punctuation">=</span><span class="token value attr-value">/home/ec2-user/amazon-eks-ami</span></code></pre>

<p>复制文件更新内核（可以跳过）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$WORKING_DIR</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$WORKING_DIR</span>/log-collector-script
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$WORKING_DIR</span>/bin

<span class="token function">mv</span> <span class="token variable">$TEMPLATE_DIR</span>/files/* <span class="token variable">$WORKING_DIR</span>/
<span class="token function">mv</span> <span class="token variable">$TEMPLATE_DIR</span>/log-collector-script/linux/eks-log-collector.sh <span class="token variable">$WORKING_DIR</span>/log-collector-script/
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> a+x <span class="token variable">$WORKING_DIR</span>/bin/
<span class="token function">sudo</span> <span class="token function">mv</span> /tmp/worker/bin/* /usr/bin/

<span class="token comment"># sudo bash $TEMPLATE_DIR/scripts/upgrade_kernel.sh</span>
<span class="token assign-left variable">KERNEL_VERSION</span><span class="token operator">=</span><span class="token number">5.10</span>
<span class="token function">sudo</span> grubby <span class="token punctuation">\</span>
  --update-kernel<span class="token operator">=</span>ALL <span class="token punctuation">\</span>
  <span class="token parameter variable">--args</span><span class="token operator">=</span><span class="token string">"psi=1"</span>

<span class="token function">sudo</span> grubby <span class="token punctuation">\</span>
  --update-kernel<span class="token operator">=</span>ALL <span class="token punctuation">\</span>
  <span class="token parameter variable">--args</span><span class="token operator">=</span><span class="token string">"clocksource=tsc tsc=reliable"</span>

<span class="token function">sudo</span> <span class="token function">reboot</span></code></pre>

<p>构建的主要逻辑在脚本<code>install-worker.sh</code>中</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo bash $TEMPLATE_DIR/scripts/install-worker.sh</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_DEFAULT_OUTPUT</span><span class="token operator">=</span><span class="token string">"json"</span>
<span class="token assign-left variable">ARCH</span><span class="token operator">=</span><span class="token string">"amd64"</span>

<span class="token function">sudo</span> yum update <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token punctuation">\</span>
  chrony <span class="token punctuation">\</span>
  conntrack <span class="token punctuation">\</span>
  <span class="token function">curl</span> <span class="token punctuation">\</span>
  <span class="token function">ethtool</span> <span class="token punctuation">\</span>
  ipvsadm <span class="token punctuation">\</span>
  jq <span class="token punctuation">\</span>
  nfs-utils <span class="token punctuation">\</span>
  socat <span class="token punctuation">\</span>
  <span class="token function">unzip</span> <span class="token punctuation">\</span>
  <span class="token function">wget</span> <span class="token punctuation">\</span>
  yum-utils <span class="token punctuation">\</span>
  yum-plugin-versionlock <span class="token punctuation">\</span>
  <span class="token function">mdadm</span> <span class="token punctuation">\</span>
  pigz

<span class="token comment"># Remove any old kernel versions.</span>
<span class="token function">sudo</span> package-cleanup <span class="token parameter variable">--oldkernels</span> <span class="token parameter variable">--count</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-y</span>

<span class="token comment"># Remove the ec2-net-utils package</span>
<span class="token keyword">if</span> yum list installed <span class="token operator">|</span> <span class="token function">grep</span> ec2-net-utils<span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token function">sudo</span> yum remove ec2-net-utils <span class="token parameter variable">-y</span> -q<span class="token punctuation">;</span> <span class="token keyword">fi</span>

<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/eks/
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/configure-clocksource.service /etc/eks/configure-clocksource.service

<span class="token comment"># iptables </span>
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/iptables-restore.service /etc/eks/iptables-restore.service

<span class="token comment"># awscli</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">less</span> <span class="token function">unzip</span> jq <span class="token parameter variable">-y</span>
<span class="token function">curl</span> <span class="token string">"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"</span> <span class="token parameter variable">-o</span> <span class="token string">"awscliv2.zip"</span>
<span class="token function">unzip</span> awscliv2.zip
<span class="token function">sudo</span> ./aws/install <span class="token parameter variable">--update</span>
complete <span class="token parameter variable">-C</span> <span class="token string">'/usr/local/bin/aws_completer'</span> aws

<span class="token comment"># systemd</span>
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token string">"<span class="token variable">$&#123;WORKING_DIR&#125;</span>/runtime.slice"</span> /etc/systemd/system/runtime.slice
</code></pre>
<p>编译安装runc</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># install runc and lock version</span>
<span class="token comment"># sudo yum install -y runc-$&#123;RUNC_VERSION&#125;</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> libseccomp-devel.x86_64 golang <span class="token parameter variable">-y</span>
go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct
<span class="token function">git</span> clone https://github.com/opencontainers/runc
<span class="token builtin class-name">cd</span> runc
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre>

<p>安装containerd</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># install containerd and lock version</span>

<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2
<span class="token comment"># sudo yum install -y containerd-$&#123;CONTAINERD_VERSION&#125;</span>
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> containerd <span class="token comment"># 1.6.21</span></code></pre>

<p>配置containerd</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/eks/containerd
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/containerd-config.toml /etc/eks/containerd/containerd-config.toml

<span class="token comment"># containerd and related service</span>
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/kubelet-containerd.service /etc/eks/containerd/kubelet-containerd.service
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/sandbox-image.service /etc/eks/containerd/sandbox-image.service
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/pull-sandbox-image.sh /etc/eks/containerd/pull-sandbox-image.sh
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/pull-image.sh /etc/eks/containerd/pull-image.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/eks/containerd/pull-sandbox-image.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/eks/containerd/pull-image.sh

<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/containerd.service.d
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/containerd.service.d/10-compat-symlink.conf</span>
[Service]
ExecStartPre=/bin/ln -sf /run/containerd/containerd.sock /run/dockershim.sock
EOF</span>

<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/modules-load.d/containerd.conf</span>
overlay
br_netfilter
EOF</span>

<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/99-kubernetes-cri.conf</span>
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF</span>

<span class="token comment"># skip docker</span>
</code></pre>
<p>日志轮换配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># logrotate</span>
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/logrotate-kube-proxy /etc/logrotate.d/kube-proxy
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/logrotate.conf /etc/logrotate.conf
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/logrotate.d/kube-proxy
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/logrotate.conf
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/log/journal</code></pre>

<p>下载kubelet和aws-iam-authenticator</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## download bin in china region</span>
<span class="token assign-left variable">S3_DOMAIN</span><span class="token operator">=</span><span class="token string">"amazonaws.com.cn"</span>

<span class="token assign-left variable">S3_PATH</span><span class="token operator">=</span><span class="token string">"s3://amazon-eks/1.26.4/2023-05-11/bin/linux/amd64"</span>

<span class="token comment"># Verify that the aws-iam-authenticator is at last v0.5.9 or greater</span>
<span class="token assign-left variable">BINARIES</span><span class="token operator">=</span><span class="token punctuation">(</span>
  kubelet
  aws-iam-authenticator
<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">binary</span> <span class="token keyword">in</span> <span class="token variable">$&#123;BINARIES<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    aws s3 <span class="token function">cp</span> <span class="token variable">$S3_PATH</span>/<span class="token variable">$binary</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--region</span> cn-north-1
    <span class="token function">sudo</span> <span class="token function">chmod</span> +x <span class="token variable">$binary</span>
    <span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$binary</span> /usr/bin/
<span class="token keyword">done</span></code></pre>

<p>继续配置服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kubernetes</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/manifests
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/lib/kubernetes
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/lib/kubelet
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/cni/bin

<span class="token assign-left variable">CNI_PLUGIN_FILENAME</span><span class="token operator">=</span><span class="token string">"cni-plugins-linux-<span class="token variable">$&#123;ARCH&#125;</span>-<span class="token variable">$&#123;CNI_PLUGIN_VERSION&#125;</span>"</span>
aws s3 <span class="token function">cp</span> <span class="token parameter variable">--region</span> <span class="token variable">$BINARY_BUCKET_REGION</span> <span class="token variable">$S3_PATH</span>/<span class="token variable">$&#123;CNI_PLUGIN_FILENAME&#125;</span>.tgz <span class="token builtin class-name">.</span>
<span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> <span class="token string">"<span class="token variable">$&#123;CNI_PLUGIN_FILENAME&#125;</span>.tgz"</span> <span class="token parameter variable">-C</span> /opt/cni/bin
<span class="token function">rm</span> <span class="token string">"<span class="token variable">$&#123;CNI_PLUGIN_FILENAME&#125;</span>.tgz"</span>

<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/kubelet
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/kubelet.service.d
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/kubelet-kubeconfig /var/lib/kubelet/kubeconfig
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /var/lib/kubelet/kubeconfig

<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/kubelet.service /etc/systemd/system/kubelet.service
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/systemd/system/kubelet.service
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/kubelet-config.json /etc/kubernetes/kubelet/kubelet-config.json
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/kubernetes/kubelet/kubelet-config.json

<span class="token function">sudo</span> systemctl daemon-reload
<span class="token comment"># Disable the kubelet until the proper dropins have been configured</span>
<span class="token function">sudo</span> systemctl disable kubelet</code></pre>

<p>配置各种脚本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/eks
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/get-ecr-uri.sh /etc/eks/get-ecr-uri.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/eks/get-ecr-uri.sh
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/eni-max-pods.txt /etc/eks/eni-max-pods.txt
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/bootstrap.sh /etc/eks/bootstrap.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/eks/bootstrap.sh
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/max-pods-calculator.sh /etc/eks/max-pods-calculator.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/eks/max-pods-calculator.sh
</code></pre>

<p>配置ecr助手</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ECR CREDENTIAL PROVIDER</span>
<span class="token assign-left variable">ECR_CREDENTIAL_PROVIDER_BINARY</span><span class="token operator">=</span><span class="token string">"ecr-credential-provider"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"AWS cli present - using it to copy <span class="token variable">$&#123;ECR_CREDENTIAL_PROVIDER_BINARY&#125;</span> from s3."</span>
aws s3 <span class="token function">cp</span> <span class="token parameter variable">--region</span> <span class="token variable">$BINARY_BUCKET_REGION</span> <span class="token variable">$S3_PATH</span>/<span class="token variable">$ECR_CREDENTIAL_PROVIDER_BINARY</span> <span class="token builtin class-name">.</span>

<span class="token function">sudo</span> <span class="token function">chmod</span> +x <span class="token variable">$ECR_CREDENTIAL_PROVIDER_BINARY</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/eks/image-credential-provider
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$ECR_CREDENTIAL_PROVIDER_BINARY</span> /etc/eks/image-credential-provider/
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token variable">$WORKING_DIR</span>/ecr-credential-provider-config.json /etc/eks/image-credential-provider/config.json
</code></pre>

<p>安装ssm（可选）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssm-agent</span>
<span class="token comment"># sudo yum install -y amazon-ssm-agent</span>
<span class="token function">sudo</span> dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm</code></pre>

<p>标记发行信息</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># AMI Metadata</span>
<span class="token assign-left variable">BASE_AMI_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>imds /latest/meta-data/ami-id<span class="token variable">)</span></span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> <span class="token string">"<span class="token variable">$&#123;WORKING_DIR&#125;</span>/release"</span></span>
BASE_AMI_ID="<span class="token variable">$BASE_AMI_ID</span>"
BUILD_TIME="<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"
BUILD_KERNEL="<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>"
ARCH="<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"
EOF</span>
<span class="token function">sudo</span> <span class="token function">mv</span> <span class="token string">"<span class="token variable">$&#123;WORKING_DIR&#125;</span>/release"</span> /etc/eks/release
<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> root:root /etc/eks</code></pre>

<p>额外配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Stuff required by "protectKernelDefaults=true"</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/99-amazon.conf</span>
vm.overcommit_memory=1
kernel.panic=10
kernel.panic_on_oops=1
EOF</span>

<span class="token comment"># Setting up sysctl properties</span>
<span class="token builtin class-name">echo</span> <span class="token assign-left variable">fs.inotify.max_user_watches</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf
<span class="token builtin class-name">echo</span> <span class="token assign-left variable">fs.inotify.max_user_instances</span><span class="token operator">=</span><span class="token number">8192</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf
<span class="token builtin class-name">echo</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf

<span class="token comment"># adding log-collector-script </span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/eks/log-collector-script/
<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token variable">$WORKING_DIR</span>/log-collector-script/eks-log-collector.sh /etc/eks/log-collector-script/

<span class="token comment"># Remove Yum Update from cloud-init config</span>
<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token punctuation">\</span>
  <span class="token string">'s/ - package-update-upgrade-install/# Removed so that nodes do not have version skew based on when the node was started.\n# - package-update-upgrade-install/'</span> <span class="token punctuation">\</span>
  /etc/cloud/cloud.cfg</code></pre>

<h1 id="测试加入集群"><a href="#测试加入集群" class="headerlink" title="测试加入集群"></a>测试加入集群</h1><p>配置节点的标签和权限，将节点角色提前加入auth map</p>
<p>提前手动拉取pause镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ctr <span class="token parameter variable">--namespace</span> k8s.io image pull <span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5 <span class="token parameter variable">--user</span> AWS:<span class="token variable"><span class="token variable">`</span>aws ecr get-login-password <span class="token parameter variable">--region</span> cn-north-1<span class="token variable">`</span></span></code></pre>

<p>这里执行启动脚本每次在<code>systemctl start kubelet</code>时报找不到<code>kubelet.service</code>。不知道原因</p>
<p>干脆手动启动kubelet</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/usr/bin/kubelet <span class="token punctuation">\</span>
    <span class="token parameter variable">--config</span> /etc/kubernetes/kubelet/kubelet-config.json <span class="token punctuation">\</span>
    <span class="token parameter variable">--kubeconfig</span> /var/lib/kubelet/kubeconfig <span class="token punctuation">\</span>
    --container-runtime-endpoint unix:///run/containerd/containerd.sock <span class="token punctuation">\</span>
    --image-credential-provider-config /etc/eks/image-credential-provider/config.json <span class="token punctuation">\</span>
    --image-credential-provider-bin-dir /etc/eks/image-credential-provider <span class="token punctuation">\</span>
    --node-ip<span class="token operator">=</span><span class="token number">192.168</span>.2.174 <span class="token punctuation">\</span>
    --pod-infra-container-image<span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5 <span class="token punctuation">\</span>
    <span class="token parameter variable">--v</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\</span>
    --hostname-override<span class="token operator">=</span>ip-192-168-2-174.cn-north-1.compute.internal <span class="token punctuation">\</span>
    --cloud-provider<span class="token operator">=</span>external <span class="token punctuation">\</span>
    --container-runtime<span class="token operator">=</span>remote</code></pre>

<p>加入成功</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubectl Apply 报错 annotation Too long</title>
    <url>/2023/12/22/AWS/EKS_Apply%20%E6%8F%90%E7%A4%BA%20TooLong/</url>
    <content><![CDATA[<p>重装Prometheus operator 的时候报错， 提示annotation 太长了， 不能 apply</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> kubectl apply <span class="token parameter variable">-f</span> ./setup
customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/scrapeconfigs.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com created
Warning: Detected changes to resource monitoring <span class="token function">which</span> is currently being deleted.
namespace/monitoring unchanged
Error from server <span class="token punctuation">(</span>Invalid<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0prometheusCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> CustomResourceDefinition.apiextensions.k8s.io <span class="token string">"prometheuses.monitoring.coreos.com"</span> is invalid: metadata.annotations: Too long: must have at <span class="token function">most</span> <span class="token number">262144</span> bytes
Error from server <span class="token punctuation">(</span>Invalid<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0prometheusagentCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> CustomResourceDefinition.apiextensions.k8s.io <span class="token string">"prometheusagents.monitoring.coreos.com"</span> is invalid: metadata.annotations: Too long: must have at <span class="token function">most</span> <span class="token number">262144</span> bytes
</code></pre>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用-Create-或者-Replace"><a href="#使用-Create-或者-Replace" class="headerlink" title="使用 Create 或者 Replace"></a>使用 Create 或者 Replace</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> kubectl create <span class="token parameter variable">-f</span> ./setup
customresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com created
customresourcedefinition.apiextensions.k8s.io/prometheusagents.monitoring.coreos.com created
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0alertmanagerConfigCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"alertmanagerconfigs.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0alertmanagerCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"alertmanagers.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0podmonitorCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"podmonitors.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0probeCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"probes.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0prometheusruleCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"prometheusrules.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0scrapeconfigCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"scrapeconfigs.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0servicemonitorCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"servicemonitors.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/0thanosrulerCustomResourceDefinition.yaml"</span><span class="token builtin class-name">:</span> customresourcedefinitions.apiextensions.k8s.io <span class="token string">"thanosrulers.monitoring.coreos.com"</span> already exists
Error from server <span class="token punctuation">(</span>AlreadyExists<span class="token punctuation">)</span>: error when creating <span class="token string">"setup/namespace.yaml"</span><span class="token builtin class-name">:</span> object is being deleted: namespaces <span class="token string">"monitoring"</span> already exists
</code></pre>
<p>使用create命令去创建crd ，使用replace更新crd，他们都不添加 <code>last-applied-configuration</code>  这个字段，</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> kubectl replace <span class="token parameter variable">-f</span> ./setup
customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/prometheusagents.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/scrapeconfigs.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com replaced
customresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com replaced
namespace/monitoring replaced</code></pre>
<h3 id="SSA-的方式创建"><a href="#SSA-的方式创建" class="headerlink" title="SSA 的方式创建"></a>SSA 的方式创建</h3><p>当然还有另一个方法就是使用server-side apply： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> kubectl apply --server-side <span class="token parameter variable">-f</span> ./setup</code></pre>

<p><a href="https://kubernetes.io/docs/reference/using-api/server-side-apply/">https://kubernetes.io/docs/reference/using-api/server-side-apply/</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>查看EKS集群节点上的容器和ENI的对应关系</title>
    <url>/2023/12/08/AWS/EKS_Container-Pod-ENI/</url>
    <content><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~ <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># containerd -v</span>
containerd github.com/containerd/containerd v1.6.16 31aa4358a36870b21a992d3ad2bef29e1d693bec.m

root@ip-172-31-35-61 ~<span class="token comment"># uname -a</span>
Linux ip-172-31-35-61.cn-north-1.compute.internal <span class="token number">6.1</span>.10-arch1-1 <span class="token comment">#1 SMP PREEMPT_DYNAMIC Mon, 06 Feb 2023 09:28:04 +0000 x86_64 GNU/Linux</span>

root@ip-172-31-35-60 ~ <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># kubelet --version</span>
Kubernetes v1.24.9-eks-49d8fe8</code></pre>
<h2 id="容器虚拟网卡和节点网卡的关"><a href="#容器虚拟网卡和节点网卡的关" class="headerlink" title="容器虚拟网卡和节点网卡的关"></a>容器虚拟网卡和节点网卡的关</h2><p>主要的思路是通过veth的id 。</p>
<p>找到 Pod 的 Pause 容器</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~<span class="token comment"># nerdctl -n k8s.io ps | grep -v pause</span>
CONTAINER ID    IMAGE                                                                                         COMMAND                   CREATED           STATUS    PORTS    NAMES
218279edbee1    <span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/kube-proxy:v1.24.9-minimal-eksbuild.1    <span class="token string">"kube-proxy --v=2 --…"</span>    <span class="token number">14</span> hours ago      Up                 k8s://kube-system/kube-proxy-kqlj2/kube-proxy
3a8aaf963501    <span class="token number">123456123456</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/haydenarchlinux:latest                       <span class="token string">"sleep 365d"</span>              <span class="token number">8</span> minutes ago     Up                 k8s://default/haydenarch-77c4f7cff9-dxsps/haydenarch</code></pre>
<p>进入容器内部查看网卡的ID</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~<span class="token comment"># nerdctl -n k8s.io exec -it 3a8aaf963501 fish</span>

root@haydenarch-77c4f7cff9-dxsps /<span class="token comment"># cat /sys/class/net/eth0/iflink</span>
<span class="token number">54</span>

root@haydenarch-77c4f7cff9-dxsps /<span class="token comment"># ip ad</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: eth0@if54: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">9001</span> qdisc noqueue state UP group default
    link/ether <span class="token number">66</span>:3a:fb:f2:00:b2 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet <span class="token number">172.31</span>.39.84/32 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::643a:fbff:fef2:b2/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever</code></pre>
<p>在实例上面查看 网卡的信息， 找到带有 id 54 的虚拟网卡对。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~<span class="token comment"># ip ad | grep 54</span>
<span class="token number">54</span>: enid573ff579e6@if3: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">9001</span> qdisc noqueue state UP group default</code></pre>
<p>查看这个虚拟网卡的全部信息， 可以看到 link-netns， 这是容器的Network NameSpace。 </p>
<pre class="language-none"><code class="language-none">&#96;&#96;&#96;shell
root@ip-172-31-35-61 ~ [1]# ip link show enid573ff579e6
54: enid573ff579e6@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc noqueue state UP mode DEFAULT group default
    link&#x2F;ether 36:06:dc:85:42:a4 brd ff:ff:ff:ff:ff:ff link-netns cni-bb451da7-00be-2d59-b5e0-1dd4e77565e8</code></pre>
<p>可以使用下面的命令查看所有的ns并找到对应的id。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~<span class="token comment"># ip netns list</span>
cni-2e29d022-09f4-6626-f416-29cfb9652e78 <span class="token punctuation">(</span>id: <span class="token number">13</span><span class="token punctuation">)</span>
cni-e5be29a1-d111-53ec-8f88-94118eb1466c <span class="token punctuation">(</span>id: <span class="token number">10</span><span class="token punctuation">)</span>
cni-bb451da7-00be-2d59-b5e0-1dd4e77565e8 <span class="token punctuation">(</span>id: <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 这个就是</span>
cni-673e1c4b-acd1-ab7e-b374-1a4192eea86e <span class="token punctuation">(</span>id: <span class="token number">6</span><span class="token punctuation">)</span>
cni-1207e72f-e68e-a7e7-161e-979e9e9ada7a <span class="token punctuation">(</span>id: <span class="token number">5</span><span class="token punctuation">)</span>
cni-a8b7807f-a37e-dd4e-98cb-9d3e7cd42f11 <span class="token punctuation">(</span>id: <span class="token number">4</span><span class="token punctuation">)</span>
cni-08a7a0e2-8e33-b669-83ee-75957676ffbb <span class="token punctuation">(</span>id: <span class="token number">3</span><span class="token punctuation">)</span>
cni-8a26c501-2ea9-f4be-36ae-745a5c307fbc <span class="token punctuation">(</span>id: <span class="token number">0</span><span class="token punctuation">)</span>
cni-2598e89a-d2ba-38a8-6412-92fbff32871b <span class="token punctuation">(</span>id: <span class="token number">9</span><span class="token punctuation">)</span>
cni-817961be-8d28-b32c-816f-a842b9d243fe <span class="token punctuation">(</span>id: <span class="token number">2</span><span class="token punctuation">)</span>
cni-a84561aa-8668-8b7c-4b5e-56568e14dc83 <span class="token punctuation">(</span>id: <span class="token number">12</span><span class="token punctuation">)</span>
cni-5de27d6e-c311-6ee3-4ed5-85b2a05b6943 <span class="token punctuation">(</span>id: <span class="token number">11</span><span class="token punctuation">)</span>
cni-d102a5e6-d6ea-fb90-2ac8-a97cd8df9c85 <span class="token punctuation">(</span>id: <span class="token number">7</span><span class="token punctuation">)</span>
cni-88bf7480-bdd6-e063-3103-894d29b16302 <span class="token punctuation">(</span>id: <span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<p>可以直接进入pod 的network ns 查看容器的网络信息， 这和上面在容器内直接看到的信息是一致的。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ip-172-31-35-61 ~ <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># ip netns exec cni-bb451da7-00be-2d59-b5e0-1dd4e77565e8 ip ad</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: eth0@if54: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">9001</span> qdisc noqueue state UP group default
    link/ether <span class="token number">66</span>:3a:fb:f2:00:b2 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet <span class="token number">172.31</span>.39.84/32 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::643a:fbff:fef2:b2/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever</code></pre>
<h2 id="如何确定容器的网卡绑定在了哪个ENI上面"><a href="#如何确定容器的网卡绑定在了哪个ENI上面" class="headerlink" title="如何确定容器的网卡绑定在了哪个ENI上面"></a>如何确定容器的网卡绑定在了哪个ENI上面</h2><p>由于VPC CNI本身的实现， 在EKS的节点上面会出现多的ENI，具体pod的流量是怎么走向eth网卡的，去了eth0 还是 eth1 或者其他的网卡， 需要通过路由条目来确定。<br>和上面的记录时间不同， 所以这个部分的记录，是另一个节点的另一个容器了， ip地址会不一致。</p>
<p>查看容器的IP地址</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> kubectl get pods <span class="token parameter variable">-o</span> wide
NAME                          READY   STATUS    RESTARTS   AGE   IP              NODE                                          NOMINATED NODE   READINESS GATES
haydenarch-7d9ff55cbd-4b7pl   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18h   <span class="token number">172.31</span>.55.218   ip-172-31-55-30.cn-north-1.compute.internal   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span></code></pre>
<p>查看节点的路由表， 看看这个ip地址的路由信息。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-55-30 ~<span class="token punctuation">]</span><span class="token comment"># ip rule list | grep 172.31.55.218</span>
<span class="token number">512</span>:	from all to <span class="token number">172.31</span>.55.218 lookup main
<span class="token number">1536</span>:	from <span class="token number">172.31</span>.55.218 lookup <span class="token number">2</span></code></pre>
<p>那么上面的结果显示， 这个IP地址的数据包会查 table 2， 查看 table 2</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-55-30 ~<span class="token punctuation">]</span><span class="token comment"># ip r s table 2</span>
default via <span class="token number">172.31</span>.48.1 dev eth1
<span class="token number">172.31</span>.48.1 dev eth1 scope <span class="token function">link</span></code></pre>
<p>观察的这个容器现在是在 eth1 上面的， 查看节点的网卡信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-172-31-55-30 ~<span class="token punctuation">]</span><span class="token comment"># ip ad s eth1</span>
<span class="token number">17</span>: eth1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">9001</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether 02:d1:7d:e3:9c:ca brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.31</span>.58.94/20 brd <span class="token number">172.31</span>.63.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::d1:7dff:fee3:9cca/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever</code></pre>
]]></content>
      <categories>
        <category>EKS</category>
      </categories>
      <tags>
        <tag>EKS， Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Core EKS 节点管理命令</title>
    <url>/2023/12/05/AWS/EKS_Windows%20core%20%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>windows 查看磁盘空间的使用情况: </p>
<pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-PSDrive</span> <span class="token operator">-</span>Name C <span class="token punctuation">|</span> <span class="token function">Select-Object</span> Name<span class="token punctuation">,</span> Free</code></pre>

<p>windows 实例的磁盘空间扩容</p>
<pre class="language-powershell" data-language="powershell"><code class="language-powershell">diskpart
list volume
<span class="token function">select</span> volume 0
extend</code></pre>
<p>从ecr下载镜像</p>
<pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$ecrCreds</span> = <span class="token punctuation">(</span><span class="token function">Get-ECRLoginCommand</span><span class="token punctuation">)</span><span class="token punctuation">.</span>password

<span class="token function">Write-Host</span> <span class="token variable">$ecrCreds</span>

ctr  <span class="token operator">-</span>n k8s<span class="token punctuation">.</span>io image pull <span class="token operator">-</span>u AWS:<span class="token variable">$ecrCreds</span> ecr link</code></pre>
<p>pull image 需要使用节点的C盘空间, 　在节点的磁盘空间不足的情况下，会报错。　</p>
<pre class="language-powershell" data-language="powershell"><code class="language-powershell">rpc error: code = Unknown desc = failed to pull and unpack image 
failed to extract layer sha256:9ee7a25f1f619685e0c27cd1f08b34fd7a567f8f0fa789gf9aeb79c72169afa: hcsshim::ImportLayer failed in Win32: There is not enough space on the disk<span class="token punctuation">.</span> <span class="token punctuation">(</span>0x70<span class="token punctuation">)</span>: unknown</code></pre>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes, EKS</tag>
      </tags>
  </entry>
  <entry>
    <title>自管理节点加入集群</title>
    <url>/2023/12/08/AWS/EKS_%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91bootstrap%E8%84%9A%E6%9C%AC%E5%B0%86%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="添加一个自管理的节点"><a href="#添加一个自管理的节点" class="headerlink" title="添加一个自管理的节点"></a>添加一个自管理的节点</h1><ol>
<li><p>创建集群，启动一个新的 EC2， 登录到已经启动的 EKS 优化 OS 内，准备复制一些脚本过来。</p>
</li>
<li><p>添加EC2的标签： kubernetes.io&#x2F;cluster&#x2F;clusterName  owned</p>
</li>
<li><p>配置EC2的Instance Profile</p>
</li>
<li><p>控制台获取 Kubernetes APIServer的Endpoint URL</p>
</li>
<li><p>获取 apiserver b64 CA : <code>cat ~/.kube/config</code> 这个文件里面可以找到 ，或者是通过EKS的控制台上面， 找到 Base64 的 CA。</p>
</li>
<li><p>编辑 userdata， 或者 ssh 登录到ec2上面创建一个bash脚本用来调用 bootstrap.sh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/eks<span class="token punctuation">;</span> <span class="token function">touch</span> ~/eks/start.sh
---
<span class="token comment">#!/bin/bash</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-ex</span>

<span class="token assign-left variable">B64_CLUSTER_CA</span><span class="token operator">=</span>
<span class="token assign-left variable">API_SERVER_URL</span><span class="token operator">=</span>
<span class="token assign-left variable">K8S_CLUSTER_DNS_IP</span><span class="token operator">=</span><span class="token number">10.100</span>.0.10

/etc/eks/bootstrap.sh <span class="token variable">$&#123;ClusterName&#125;</span> --b64-cluster-ca <span class="token variable">$&#123;B64_CLUSTER_CA&#125;</span> --apiserver-endpoint <span class="token variable">$&#123;API_SERVER_URL&#125;</span></code></pre>
</li>
<li><p>集群里面<strong>没有节点组 ， 也不会创建aws-auth configmap</strong> 所以节点无法正常的加入集群， 需要手动创建。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapRoles</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: [CLUSTER_ROLE]
      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span>
  <span class="token key atrule">mapUsers</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    []</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>auth
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system</code></pre></li>
</ol>
<h1 id="需要复制的文件"><a href="#需要复制的文件" class="headerlink" title="需要复制的文件"></a>需要复制的文件</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> containerd <span class="token comment"># 安装Containerd</span>
<span class="token function">scp</span> /etc/eks/bootstrap.sh root@54.222.253.235:/etc/eks/bootstrap.sh <span class="token comment"># 复制bootstrap</span>
<span class="token function">scp</span> /usr/bin/imds root@54.222.253.235:/usr/bin/imds <span class="token comment"># shell 脚本， 用来帮忙调用ec2 metadata 获取实例和VPC子网的信息</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/eks/ root@54.222.253.235:/etc/eks/ <span class="token comment"># 直接复制了eks的相关脚本和配置模板</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /var/lib/kubelet/kubeconfig root@54.222.253.235:/var/lib/kubelet/kubeconfig <span class="token comment"># 复制kubeletconfig配置文件模板</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/kubernetes/ root@54.222.253.235:/etc/kubernetes/ <span class="token comment"># 复制 kubernetes 的配置文件</span>
<span class="token function">scp</span> <span class="token parameter variable">-pr</span> /etc/kubernetes/kubelet/ root@54.222.253.235:/etc/kubernetes/kubelet/ <span class="token comment"># 上面的命令没有递归复制， 所以需要指定</span>

<span class="token comment"># 设置对应的内核参数， 如果不做kubelet 会报错提示 这些参数不符合要求。</span>
kernel.panic <span class="token operator">=</span> <span class="token number">10</span>
kernel.panic_on_oops <span class="token operator">=</span> <span class="token number">1</span>
vm.overcommit_memory <span class="token operator">=</span> <span class="token number">1</span></code></pre>

<h1 id="Bootstrap-脚本内容"><a href="#Bootstrap-脚本内容" class="headerlink" title="Bootstrap 脚本内容"></a>Bootstrap 脚本内容</h1><p>记录一下脚本自动配置的内容， 大概就是 获取变量， aws的服务地址， ec2 元数据地址， 替换模板中的变量生成Kubelet配置文件 和 Containerd 的配置文件（这个替换是一次性的， 也就是说， bootstrap只能变更模板中的变量一次， 第二次执行只会生成刷新一次集群的信息， 以及重启服务）。</p>
<ol>
<li>读取bootstrap后面给出的参数，设置变量， 例如： ClusterName etc.</li>
<li>查看Kubelet的版本， 决定Runtime， containerd | dockerd, 判断条件是 kubelet 版本 大于 1.24<pre class="language-bash" data-language="bash"><code class="language-bash">++ kubelet <span class="token parameter variable">--version</span>
++ <span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">'[0-9]\.[0-9]+\.[0-9]+'</span>
+ <span class="token assign-left variable">KUBELET_VERSION</span><span class="token operator">=</span><span class="token number">1.24</span>.9
---
+ <span class="token assign-left variable">IS_124_OR_GREATER</span><span class="token operator">=</span>true
+ <span class="token assign-left variable">DEFAULT_CONTAINER_RUNTIME</span><span class="token operator">=</span>containerd</code></pre></li>
<li>设置ECR以及Pause容器地址<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取region以及aws service domain</span>
+ <span class="token assign-left variable">AWS_DEFAULT_REGION</span><span class="token operator">=</span>cn-north-1
+ <span class="token assign-left variable">AWS_SERVICES_DOMAIN</span><span class="token operator">=</span>amazonaws.com.cn

<span class="token comment"># 调用脚本 /etc/eks/get-ecr-uri.sh cn-north-1 amazonaws.com.cn ''</span>
+ <span class="token assign-left variable">ECR_URI</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn
+ <span class="token assign-left variable">PAUSE_CONTAINER_IMAGE</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause
+ <span class="token assign-left variable">PAUSE_CONTAINER</span><span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5
+ <span class="token assign-left variable">CA_CERTIFICATE_DIRECTORY</span><span class="token operator">=</span>/etc/kubernetes/pki
+ <span class="token assign-left variable">CA_CERTIFICATE_FILE_PATH</span><span class="token operator">=</span>/etc/kubernetes/pki/ca.crt</code></pre></li>
<li>创建证书目录：<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/pki
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,MASTER_ENDPOINT,https://CE0253A94B6B14215AE3282580CFA5E3.yl4.cn-north-1.eks.amazonaws.com.cn,g /var/lib/kubelet/kubeconfig
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,AWS_REGION,cn-north-1,g /var/lib/kubelet/kubeconfig
+ <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,CLUSTER_NAME,NewClusterForManualJoin,g /var/lib/kubelet/kubeconfig</code></pre></li>
<li>获取 VPC CIDR<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># imds shell script help to get metadata.</span>
imds: /usr/bin/imds
++ imds latest/meta-data/local-ipv4
++ imds latest/meta-data/network/interfaces/macs/02:66:06:2e:48:08/vpc-ipv4-cidr-blocks</code></pre></li>
<li>创建kubelet 配置, 计算预留的资源 和 MaxPod 等等参数的数值。<pre class="language-bash" data-language="bash"><code class="language-bash">/etc/kubernetes/kubelet/kubelet-config.json
+ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/kubelet.service.d
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/containerd
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/cni/net.d
+ <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/systemd/system/containerd.service.d</code></pre></li>
<li>创建containerd 配置文件<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token builtin class-name">printf</span> <span class="token string">'[Service]\nSlice=runtime.slice\n'</span>
+ <span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/containerd.service.d/00-runtime-slice.conf
+ <span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> s,SANDBOX_IMAGE,918309763551.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5,g /etc/eks/containerd/containerd-config.toml</code></pre></li>
<li>kubelet配置和启动。<pre class="language-bash" data-language="bash"><code class="language-bash">+ <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-v</span> /etc/eks/containerd/kubelet-containerd.service /etc/systemd/system/kubelet.service
+ <span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/systemd/system/kubelet.service
+ <span class="token function">sudo</span> containerd config dump
+ systemctl <span class="token builtin class-name">enable</span> kubelet
+ systemctl start kubelet</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>EKS</category>
      </categories>
      <tags>
        <tag>EKS， Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Filebeat 输出日志到 Opensearch</title>
    <url>/2023/12/08/AWS/Opensearch_Filebeat%20%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E5%88%B0%20Opensearch/</url>
    <content><![CDATA[<p>这个最后基本上可以确认是一个兼容性问题，测试完成发现， 开启兼容模式的Opensearch+filebeat的组合， filebeat 还是会不定期重启。 </p>
<hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>需求是，使用ES + filebeat 模式在收集日志。<br>使用Supervisor作为容器的主进程管理工具，启动后分别运行 应用（这里用nginx代替） + filebeat</p>
<p>现在想要用ECS Fargate， 然后依旧还是这个模式， 尽可能新的变动之前的架构， ES 替换成 OpenSearch。</p>
<p>按照这个路数测试。 </p>
<h2 id="创建Opensearch"><a href="#创建Opensearch" class="headerlink" title="创建Opensearch"></a>创建Opensearch</h2><p>版本：<br>OpenSearch 2.11 (latest)<br>OpenSearch_2_11_R20231113-P1 (latest)<br>Availability Zone(s)<br>1-AZ without standby</p>
<h2 id="构建Supervisor管理的容器"><a href="#构建Supervisor管理的容器" class="headerlink" title="构建Supervisor管理的容器"></a>构建Supervisor管理的容器</h2><h3 id="创建dockerfile"><a href="#创建dockerfile" class="headerlink" title="创建dockerfile"></a>创建dockerfile</h3><p>创建dockerfile的部分， 比较难的是 ， 需要找到合适的filebeat版本<br>参考页面:  <a href="https://opensearch.org/docs/latest/tools/index/#agents-and-ingestion-tools">Agents and ingestion tools</a><br>其他的步骤就下载安装就可以. </p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 使用官方Nginx作为基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> reg.liarlee.site/docker.io/nginx</span>

<span class="token comment"># 安装Supervisor</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y supervisor</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /var/log/supervisor</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /etc/filebeat/</span>
<span class="token comment">#RUN curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.11.3-amd64.deb &amp;&amp; dpkg -i filebeat-8.11.3-amd64.deb</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-oss-7.12.1-amd64.deb &amp;&amp; dpkg -i filebeat-oss-7.12.1-amd64.deb</span>


<span class="token instruction"><span class="token keyword">COPY</span> filebeat.yml /etc/filebeat/filebeat.yml</span>
<span class="token instruction"><span class="token keyword">COPY</span> nginx.conf /etc/nginx/nginx.conf</span>

<span class="token comment"># 将Supervisor配置文件复制到容器中</span>
<span class="token instruction"><span class="token keyword">COPY</span> supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span>

<span class="token comment"># 启动Supervisor来管理Nginx进程</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">"/usr/bin/supervisord"</span>, <span class="token string">"-n"</span> ]</span></code></pre>
<h3 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h3><p>需要准备的配置文件一共3个： </p>
<ul>
<li><p>supervisord.conf  supervisor的管理配置， 决定了那些进程被管理。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">cat</span> ./supervisord.conf
<span class="token punctuation">[</span>unix_http_server<span class="token punctuation">]</span>
<span class="token assign-left variable">file</span><span class="token operator">=</span>/var/run/supervisor.sock   <span class="token punctuation">;</span> <span class="token punctuation">(</span>the path to the socket <span class="token function">file</span><span class="token punctuation">)</span>
<span class="token assign-left variable">chmod</span><span class="token operator">=</span>0700                       <span class="token punctuation">;</span> socket <span class="token function">file</span> mode <span class="token punctuation">(</span>default 0700<span class="token punctuation">)</span>
<span class="token assign-left variable">chown</span><span class="token operator">=</span>nobody:nogroup             <span class="token punctuation">;</span> socket <span class="token function">file</span> uid:gid owner

<span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span>
<span class="token assign-left variable">logfile_maxbytes</span><span class="token operator">=</span>50MB                          <span class="token punctuation">;</span> 日志文件的最大大小
<span class="token assign-left variable">logfile_backups</span><span class="token operator">=</span><span class="token number">10</span>                             <span class="token punctuation">;</span> 日志文件的备份数
<span class="token assign-left variable">loglevel</span><span class="token operator">=</span>info                                  <span class="token punctuation">;</span> 日志级别
<span class="token assign-left variable">nodaemon</span><span class="token operator">=</span>false                                 <span class="token punctuation">;</span> 是否以守护进程模式启动Supervisor
<span class="token assign-left variable">minfds</span><span class="token operator">=</span><span class="token number">1024</span>                                    <span class="token punctuation">;</span> 可以打开的文件描述符的最小数量
<span class="token assign-left variable">minprocs</span><span class="token operator">=</span><span class="token number">200</span>                                   <span class="token punctuation">;</span> 可以创建的进程的最小数量

<span class="token punctuation">[</span>program:nginx<span class="token punctuation">]</span>
<span class="token assign-left variable">command</span><span class="token operator">=</span>/usr/sbin/nginx <span class="token parameter variable">-g</span> <span class="token string">"daemon off;"</span>  <span class="token punctuation">;</span> 启动Nginx的命令
<span class="token assign-left variable">autostart</span><span class="token operator">=</span>true                             <span class="token punctuation">;</span> 在Supervisor启动时自动启动
<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true                           <span class="token punctuation">;</span> 程序异常退出后自动重启
<span class="token assign-left variable">stderr_logfile</span><span class="token operator">=</span>/var/log/nginx/error.log    <span class="token punctuation">;</span> 错误日志文件路径
<span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/var/log/access.log   <span class="token punctuation">;</span> 访问日志文件路径

<span class="token punctuation">[</span>program:filebeat<span class="token punctuation">]</span>
<span class="token assign-left variable">command</span><span class="token operator">=</span>/usr/bin/filebeat <span class="token parameter variable">-e</span> <span class="token parameter variable">-c</span> /etc/filebeat/filebeat.yml  <span class="token punctuation">;</span> 启动Filebeat的命令
<span class="token assign-left variable">autostart</span><span class="token operator">=</span>true
<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true
<span class="token assign-left variable">stderr_logfile</span><span class="token operator">=</span>/var/log/filebeat.err.log
<span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/var/log/filebeat.out.log</code></pre></li>
<li><p>filebeat.yml   filebeat的配置文件。  这配置文件 GPT 会直接写出一个可以用 <code>output.opensearch:</code>， 其实还是不能的， 只能使用原本的配置文件。 (也许是我选择的filebeats版本不正确,  所以不行吧</p>
<p> filebeat本身是es序列里面的产品， 不支持opensearch也合理， 如果写成opensearch 会找不到output 的定义， 也说明并不支持这个字段。</p>
</li>
</ul>
<p>2023-12-14T12:03:12.560Z	INFO	[publisher_pipeline_output]	pipeline&#x2F;output.go:145	Attempting to reconnect to backoff(elasticsearch(<a href="https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn/">https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn:443</a>)) with 7 reconnect attempt(s)</p>
<pre class="language-none"><code class="language-none">&#96;&#96;&#96;shell
&gt; cat .&#x2F;filebeat.yml
filebeat.inputs:
- type: filestream
  id: nginxaccesslog
  paths:
    - &#x2F;var&#x2F;log&#x2F;access.log
  fields:
    log_type: access

seccomp.enabled: false # 这个不关闭的话可能会是一个干扰。
logging.level: debug # 由于调试方便设置了DEBUG。 

# 这个配置段是关闭 xpack， xpack功能只在es里面提供， 商业版本。
ilm.enabled: false
setup.ilm.enabled: false
setup.pack.security.enabled: false
setup.xpack.graph.enabled: false
setup.xpack.watcher.enabled: false
setup.xpack.monitoring.enabled: false
setup.xpack.reporting.enabled: false

# output就是还用es
output.elasticsearch:
  enable: true
  hosts: [&quot;vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn:443&quot;] # 这个部分需要手动指定443, 因为是es的默认配置, 所以直接去 9200,就会连接不上.
  protocol: &quot;https&quot;</code></pre>

<p>  xpack 报错的日志大概是这样的： </p>
<blockquote>
<p> 2023-12-14T12:03:12.560Z	ERROR	[publisher_pipeline_output]	pipeline&#x2F;output.go:154	Failed to connect to backoff(elasticsearch(<a href="https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn/">https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn:443</a>)): Connection marked as failed because the onConnect callback failed: request checking for ILM availability failed: 401 Unauthorized: {“Message”:”Your request: ‘&#x2F;_xpack’ is not allowed.”}<br> 2023-12-14T12:03:12.560Z	INFO	[publisher_pipeline_output]	pipeline&#x2F;output.go:145	Attempting to reconnect to backoff(elasticsearch(<a href="https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn/">https://vpc-ecs-nginx-opensearch-qt7m5rmhddggkiuapyybcmz5oe.cn-north-1.es.amazonaws.com.cn:443</a>)) with 7 reconnect attempt(s)</p>
</blockquote>
<ul>
<li>nginx.conf   这个是nginx 应用文件， 模拟一个应用程序， 提供webserver服务。配置文件就是标准的配置文件, 修改一下日志输出的路径. <pre class="language-bash" data-language="bash"><code class="language-bash">access_log  /var/log/access.log  main<span class="token punctuation">;</span></code></pre>
 由于baseimage用的是nginx的， 所以nginx 的日志输出会软链接到&#x2F;dev&#x2F;stdout, filebeat 不收软链接的文件, 开了DEBUG会看到跳过这个文件的日志.</li>
</ul>
<h2 id="Buildstage"><a href="#Buildstage" class="headerlink" title="Buildstage"></a>Buildstage</h2><p>接下来就可以Build镜像然后进行测试了。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> dive build <span class="token parameter variable">-t</span> reg.liarlee.site/library/superv-nginx:v31 <span class="token builtin class-name">.</span>
<span class="token operator">></span> <span class="token function">docker</span> push reg.liarlee.site/library/superv-nginx:v31
<span class="token operator">></span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> superv-nginx <span class="token parameter variable">--rm</span>  reg.liarlee.site/library/superv-nginx:v31</code></pre>
<p>运行启动之后可以看到输出的日志是： </p>
<pre class="language-log" data-language="log"><code class="language-log"><span class="token date number">2023-12-14</span> <span class="token time number">14:03:31,093</span> <span class="token level info keyword">INFO</span> <span class="token property">success:</span> filebeat entered RUNNING state<span class="token punctuation">,</span> process has stayed up for <span class="token operator">></span> than <span class="token number">1</span> seconds <span class="token operator">(</span>startsecs<span class="token operator">)</span>
<span class="token date number">2023-12-14</span> <span class="token time number">14:03:31,093</span> <span class="token level info keyword">INFO</span> <span class="token property">success:</span> nginx entered RUNNING state<span class="token punctuation">,</span> process has stayed up for <span class="token operator">></span> than <span class="token number">1</span> seconds <span class="token operator">(</span>startsecs<span class="token operator">)</span></code></pre>
<p>然后查看Opensearch 创建了默认index， 名称是<code>filebeat-7.12.1-2023.12.14</code></p>
<h2 id="放到-Ecs-里面去"><a href="#放到-Ecs-里面去" class="headerlink" title="放到 Ecs 里面去"></a>放到 Ecs 里面去</h2><p>我直接使用我自己的仓库里面拉取了 ，创建ecs service然后curl请求发送到 alb ， 转给 task。<br>观察opensearch中收集的访问日志。 </p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>AWS, ELK, OpenSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>TrueNas Scale 让 ZFS 占用更多内存作为 ARC</title>
    <url>/2023/10/08/Other/NAS_TrueNas%20Scale%20%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>这个命令的记录在 TrueNas Scale ,也就是linux场景下的， Linux 这个版本在我的蜗牛星际上面我看到了一些兼容性问题， 可能会导致磁盘的状态异常， 遂弃之。 回FreeBSD的版本就没事了，还没有那个碍事的集成 k3s.</p>
<p>TrueNas Scale<br>Some param can use to tunning Memory Usage : </p>
<p>Config the ARC Memory to 75% Total Memory :</p>
<p>root@haydentruenas:&#x2F;sys&#x2F;block# echo 2995556352 &gt; &#x2F;sys&#x2F;module&#x2F;zfs&#x2F;parameters&#x2F;zfs_arc_max<br>root@haydentruenas:&#x2F;sys&#x2F;block# echo 268435456 &gt; &#x2F;sys&#x2F;module&#x2F;zfs&#x2F;parameters&#x2F;zfs_arc_sys_free</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/bin:/sbin:/usr/bin:/usr/sbin:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span>"</span>
<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>

<span class="token assign-left variable">ARC_PCT</span><span class="token operator">=</span><span class="token string">"90"</span>
<span class="token assign-left variable">ARC_BYTES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'^MemTotal'</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">pct</span><span class="token operator">=</span>$<span class="token punctuation">&#123;</span>ARC_PCT<span class="token punctuation">&#125;</span> <span class="token string">'&#123;printf "%d", $2 * 1024 * (pct / 100.0)&#125;'</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;ARC_BYTES&#125;</span> <span class="token operator">></span> /sys/module/zfs/parameters/zfs_arc_max

<span class="token assign-left variable">SYS_FREE_BYTES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;SYS_FREE_BYTES&#125;</span> <span class="token operator">></span> /sys/module/zfs/parameters/zfs_arc_sys_free</code></pre>]]></content>
      <categories>
        <category>Tools, Toy</category>
      </categories>
      <tags>
        <tag>TrueNasScale, NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>rime的配置</title>
    <url>/2023/08/13/Other/Other_InputMethodForRIME/</url>
    <content><![CDATA[<p><a href="https://github.com/iDvel/rime-ice">https://github.com/iDvel/rime-ice</a></p>
<p><a href="https://rime.im/">https://rime.im/</a></p>
<p>小狼毫输入法， 或者Fcitx5 挂载 rime 即可。 </p>
<p>后面如果还有输入法相关的内容会放在这个里面。 </p>
<h2 id="小鹤双拼"><a href="#小鹤双拼" class="headerlink" title="小鹤双拼"></a>小鹤双拼</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">cat</span> ./default.custom.yaml
patch:
  schema_list:
    - schema: double_pinyin_flypy    <span class="token comment"># 小鹤双拼</span>
  ascii_composer:
    good_old_caps_lock: <span class="token boolean">true</span>  <span class="token comment"># true | false</span>
    switch_key:
      Caps_Lock: <span class="token function">clear</span>      <span class="token comment"># commit_code | commit_text | clear</span>
      Shift_L: noop  <span class="token comment"># commit_code | commit_text | inline_ascii | clear | noop</span>
      Shift_R: noop         <span class="token comment"># commit_code | commit_text | inline_ascii | clear | noop</span>
      Control_L: noop       <span class="token comment"># commit_code | commit_text | inline_ascii | clear | noop</span>
      Control_R: noop       <span class="token comment"># commit_code | commit_text | inline_ascii | clear | noop</span></code></pre>
<h2 id="输入法默认不切换全半角"><a href="#输入法默认不切换全半角" class="headerlink" title="输入法默认不切换全半角"></a>输入法默认不切换全半角</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">></span> cat ./default.custom.yaml
<span class="token key atrule">patch</span><span class="token punctuation">:</span>
  <span class="token key atrule">switches</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ascii_mode
      <span class="token key atrule">states</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 中 <span class="token punctuation">]</span>
      <span class="token key atrule">reset</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ascii_punct <span class="token comment"># 中英标点</span>
      <span class="token key atrule">states</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> ¥<span class="token punctuation">,</span> $ <span class="token punctuation">]</span>
      <span class="token key atrule">reset</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> traditionalization
      <span class="token key atrule">states</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 简<span class="token punctuation">,</span> 繁 <span class="token punctuation">]</span>
      <span class="token key atrule">reset</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> emoji
      <span class="token key atrule">states</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 💀<span class="token punctuation">,</span> 😄 <span class="token punctuation">]</span>
      <span class="token key atrule">reset</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> full_shape
      <span class="token key atrule">states</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 半角<span class="token punctuation">,</span> 全角 <span class="token punctuation">]</span>
      <span class="token key atrule">reset</span><span class="token punctuation">:</span> <span class="token number">0</span></code></pre>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>RIME, Linux, Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 笔记</title>
    <url>/2023/12/22/Database/Databases_Redis-note/</url>
    <content><![CDATA[<h2 id="ElastiCache主要概念"><a href="#ElastiCache主要概念" class="headerlink" title="ElastiCache主要概念"></a>ElastiCache主要概念</h2><ol>
<li><p>ElastiCache nodes<br>A node is the smallest building block of an ElastiCache deployment.<br>node is a fixed-size chunk of secure, network-attached RAM.<br>总结来说， 就是ec2实例上面跑了相同版本的Engine for Redis。</p>
</li>
<li><p>ElastiCache for Redis shards<br><img src="https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/images/ElastiCacheClusters-CSN-RedisShards.png" alt="Explaining Shared"> </p>
<p>A Redis shard (called a node group in the API and CLI) is a grouping of one to six related nodes. A Redis (cluster mode disabled) cluster always has one shard.<br>Redis (cluster mode enabled) clusters can have up to 500 shards, with your data partitioned across the shards.</p>
<p>Shard 是多个 Nodes 的集合， 或者叫作节点组. 一个Shard包括的节点有不同的角色， 一个Primary 和 最多5个 Replica.</p>
</li>
<li><p>ElastiCache for Redis clusters<br>A Redis cluster is a logical grouping of one or more ElastiCache for Redis shards. Data is partitioned across the shards in a Redis (cluster mode enabled) cluster.<br>集群模式关闭， 1 Cluster – 1 Shard – 1 - 6 Nodes: 1 Primary and 5 Nodes<br>集群模式开启， 1 Cluster – 500 Shard – 1 - 6 Nodes: 1 Primary Per Shard</p>
</li>
<li><p>ElastiCache for Redis replication<br>Redis (cluster mode disabled) clusters support one shard (in the API and CLI, called a node group).<br>Redis (cluster mode enabled) clusters can have up to 500 shards, with your data partitioned across the shards. </p>
<p>每个Replica都是Primary中全部数据的复制。 Replica使用异步的方式进行与Primary的数据同步。 </p>
<p>第一次 psync2 全量复制所有内存当前存储的数据， 后续使用redis的增量复制。 </p>
</li>
<li><p>AWS Regions and availability zones<br>目前中国区不能使用 GlobalStore， 并且Region之间也是无法相互同步数据的。 在不同的az 之间可以做高可用来降低停机的时间。 </p>
</li>
<li><p>ElastiCache for Redis endpoints<br>An endpoint is the unique address your application uses to connect to an ElastiCache node or cluster.</p>
<ul>
<li><p>Redis 禁用集群模式的单节点端点<br>单节点的集群端点用于读取和写入. In one word, Single Primary, read and write at one point.<br><strong>用这个节点的 Endpoint 即可。</strong></p>
</li>
<li><p>Redis 禁用集群模式的多节点端点<br>多节点有两个不同的端点， Primary 端点总是连接到Primary 节点，故障切换会切换这个dns指向的后端。<br>Reader Endpoint 在所有的 Replica节点之间分流Connection 用来提供读取行为。</p>
</li>
</ul>
<p><strong>用控制台上面的 Primary Endpoint 和 Reader Endpoint</strong></p>
<ul>
<li>Redis 启用集群模式的端点<br>集群模式下， 只是配置一个endpoint， 但是连接到Endpoint之后， 客户端可以发现所有的主节点和从节点。</li>
</ul>
<p>** 用Configuration Endpoint 可以找到集群内部的每一个 Primary 和 Replica节点 **</p>
</li>
<li><p>ElastiCache parameter groups<br>Cache parameter groups are an easy way to manage runtime settings for supported engine software. Parameters are used to control memory usage, eviction policies, item sizes, and more.</p>
<p>简单来说， 创建每一个配置文件在aws的控制台上， 可以调整一部分Redis的参数， 然后可能在集群内可以实时生效， 也可能需要触发一次Failover才能生效。<br><a href="https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.html">elasticache的参数管理</a> </p>
<p>通常来说， 改动了参数组中的几个参数可能会需要重启节点： </p>
<ul>
<li>activerehashing</li>
<li>databases</li>
</ul>
</li>
<li><p>ElastiCache for Redis security<br>PENDING… Maybe follow offical guide.</p>
</li>
<li><p>ElastiCache security groups<br>创建集群的时候需要指定一个安全组， 需要放行 6379 port， DONE。</p>
</li>
<li><p>ElastiCache subnet groups<br>子网组是运行 Redis 的所有子网的集合， 创建一个子网， 让托管的节点的把ENI放在这个子网里面， 私有子网。 </p>
</li>
<li><p>ElastiCache for Redis backups<br>备份特定时间的数据， 可以使用这个用来还原成新的集群， 或者是创建一个集群的种子， 备份中包括所有的data， 和一部分集群的metadata。<br>bgsave 或者 forkless save, 这两个取决于是否有足够的内存空间， 当空间充足的时候使用的默认的 bgsave， 但是肯定的是， bhsave 会有性能的开销，所以最好是使用副本节点来创建备份或者快照。<br>对于forkless本身是另一个机制，但是forkless会尝试delay 写入的延迟，从而确保不会积累过多的change 导致内存压力过大失败。 </p>
</li>
<li><p>ElastiCache events<br>PENDING… Maybe follow offical guide.</p>
</li>
</ol>
<h2 id="Redis-缓存穿透，-击穿-和-雪崩"><a href="#Redis-缓存穿透，-击穿-和-雪崩" class="headerlink" title="Redis 缓存穿透， 击穿 和 雪崩"></a>Redis 缓存穿透， 击穿 和 雪崩</h2><h3 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a>穿透</h3><p>主要是指异常的查询请求， 缓存未命中的场景下直接访问后端， 后端承载了大量请求导致的崩溃。<br>目前看到需要两个条件： </p>
<ul>
<li>数据在缓存层未命中。 </li>
<li>大量的请求转移到了后端。</li>
<li>请求的数据可能在缓存层 以及 后端都不存在。</li>
</ul>
<p>避免的方法可能有：</p>
<ul>
<li>在redis 前面添加一个 BloomFilter， 在请求进来的时候进行过滤， 对于异常的请求直接拒绝或者返回一个NULL。</li>
<li>提前缓存一部分数值为 NULL 的数据， 在缓存层直接接下这些请求。这个本身是有点问题的。</li>
</ul>
<h3 id="击穿"><a href="#击穿" class="headerlink" title="击穿"></a>击穿</h3><p>这个概念是指的 <strong>少部分热点数据</strong>被大量的查询时候，  数据突然从缓存中消失， 可能是过期也可能删除等等， 这样有大量的<strong>相同请求</strong>发送到后端。<br>解决方案： </p>
<ul>
<li>设置部分数据永远不过期。 </li>
<li>后端进行加分布式锁。</li>
</ul>
<h3 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h3><p><strong>批量的热数据过期</strong>， 这时候大部分的请求可能还在继续尝试查询不同的数据，直接将这些请求发送到了后端的数据库， 数据库崩了。<br>解决方案： </p>
<ul>
<li>创建多个实例， 和副本来提高可用性。 </li>
<li>后端加锁限流。</li>
<li>调整过期时间， 让不同的数据过期的时间错开，防止批量的key 相同的时间过期。</li>
</ul>
<blockquote>
<p>总结起来就是， 避免缓存在特定的场景下失效， 想各种方法保护缓存的可用性。 </p>
</blockquote>
<h2 id="More-Note"><a href="#More-Note" class="headerlink" title="More Note"></a>More Note</h2><p>COB: Client Output Buffer,   Primary 向 Replica 同步数据使用， Max Memory 没有计算这部分的内存， 使用的是Redis引擎之外的内存（os管理的内存）。 </p>
<p>Policy ： LRU 不严格， 随机选择三个。maxmemory-sample: 3， 可以调大。 sample越大， 信号的时间越长。 </p>
<p>Reclaim策略里面， 每秒扫描200个key， 如果数据量比较大的话， Redis会进入loop阶段， 反复尝试Reclaim到25% 以下。 </p>
<p>可以尝试使用 scan 命令扫描全部的数据， 遍历所有的key，这样会触发lazyway主动进行回收。<br>扫描的指令： </p>
<pre class="language-none"><code class="language-none">scan 0 match * count 20000</code></pre>

<p>LRU vs LFU</p>
<hr>
<p>为了保持主从一致， primary 上过期或者删除的key， 会同步发送一个显式的 delete 指令，  这个会统计在replica的settypecmd。</p>
<p>snapshot里面的数据在恢复的时候，会检查key 的ttl ， 如果超过会直接删除。<br>在Redis内存与物理内存mapping由操作系统的虚拟内存管理器 和 指定的内存分配器进行处理。</p>
<p>关于Info指令的所有参数的解释：<br><a href="https://redis.io/commands/info/">https://redis.io/commands/info/</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">localhost:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info memory
<span class="token comment"># Memory</span>
used_memory:938464
used_memory_human:916.47K <span class="token comment"># Redis 存储数据的使用量</span>
used_memory_rss:10747904
used_memory_rss_human:10.25M <span class="token comment"># Redis 常住内存集的用量</span>
used_memory_peak:1134048
used_memory_peak_human:1.08M <span class="token comment"># Redis 的内存峰值</span>
used_memory_peak_perc:82.75% 
used_memory_overhead:888488
used_memory_startup:865904
used_memory_dataset:49976
used_memory_dataset_perc:68.88%
allocator_allocated:1479168  <span class="token comment"># 内存分配器已经分配的量</span>
allocator_active:1601536
allocator_resident:4575232 
total_system_memory:8182751232
total_system_memory_human:7.62G <span class="token comment"># 系统内存的总量</span>
used_memory_lua:31744
used_memory_vm_eval:31744
used_memory_lua_human:31.00K <span class="token comment"># Lua 引擎的内存使用量</span>
used_memory_scripts_eval:0
number_of_cached_scripts:0
number_of_functions:0
number_of_libraries:0
used_memory_vm_functions:32768
used_memory_vm_total:64512
used_memory_vm_total_human:63.00K
used_memory_functions:184
used_memory_scripts:184
used_memory_scripts_human:184B
maxmemory:0  <span class="token comment"># Max Memory 当前的配置</span>
maxmemory_human:0B
maxmemory_policy:noeviction
allocator_frag_ratio:1.08
allocator_frag_bytes:122368
allocator_rss_ratio:2.86
allocator_rss_bytes:2973696
rss_overhead_ratio:2.35
rss_overhead_bytes:6172672
mem_fragmentation_ratio:11.46
mem_fragmentation_bytes:9809640
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_total_replication_buffers:0
mem_clients_slaves:0
mem_clients_normal:22400
mem_cluster_links:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.3.0
active_defrag_running:0
lazyfree_pending_objects:0
lazyfreed_objects:0
localhost:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exit</span></code></pre>
<h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>Redis的内存中主要是如下数据： </p>
<h3 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h3><pre><code>用户数据是作为内存的数据库的关键，也是占用Mem最多的部分， 计算在 used_memory  中。 数据 和 数据结构。
</code></pre>
<h3 id="自身进程的内存"><a href="#自身进程的内存" class="headerlink" title="自身进程的内存"></a>自身进程的内存</h3><pre><code>  这部分是Redis自己占用的内存， 代码， 常量池等等。
</code></pre>
<h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><a href="https://www.cnblogs.com/mainwoods/p/15064949.html">三大缓冲区</a><br>    1. 客户端缓冲区<br>        1. 输入缓冲区: 客户端输入指令Buffer， 输入缓冲区默认是每客户端 1GB， 不计入maxmemory,  无法配置。<br>        2. 输出缓冲区: 返回响应结果的Buffer， 可以调整输出缓冲区的大小。 通过 <code>client-output-buffer-limit</code> 配置<br>        <pre class="language-bash" data-language="bash"><code class="language-bash">client-output-buffer-limit <span class="token operator">&lt;</span>class<span class="token operator">></span> <span class="token operator">&lt;</span>hard limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft seconds<span class="token operator">></span>
client-output-buffer-limit normal <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token comment"># 会被限制在maxmemory中</span>
client-output-buffer-limit slave 256mb 64mb <span class="token number">60</span>  <span class="token comment"># 不会限制在maxmemory</span>
client-output-buffer-limit pubsub 32mb 8mb <span class="token number">60</span>  <span class="token comment"># 客户使用Pub/Sub Channel 的时候会用， 比较少看到客户使用</span></code></pre><br>         Usedmemory 大于 Maxmemory   原因是 SlaveCOB 不计算 Maxmemory， 不会触发Evcation。<br>    2. 复制缓冲区<br>        1. 复制缓冲区: 主要是全量复制的时候使用的空间. 主从同步的时候使用的是 COB 缓冲区。<br>        2. 复制积压缓冲区:  增量同步的缓冲区， 使用参数 <code>repl-backlog-size</code> 配置， 控制是否是增量或者全量同步。 backlog 越大， 越容易进行增量。<br>    3. AOF 缓冲区（这玩意儿好像Ecache里面没有.<br>        1. AOF缓冲区： 写AOF日志异步落到磁盘的Buffer<br>        3. AOF重写缓冲区: AOF重写流程中使用的Buffer<br><a href="https://oss-emcsprod-public.modb.pro/wechatSpider/modb_20210621_e018a38e-d26a-11eb-b77e-00163e068ecd.png">https://oss-emcsprod-public.modb.pro/wechatSpider/modb_20210621_e018a38e-d26a-11eb-b77e-00163e068ecd.png</a></p>
<h2 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h2><p>内存碎片有外部碎片 和 内部碎片： </p>
<ul>
<li>外部碎片指os分配内存的时候造成的碎片， 这个部分的碎片主要是和os申请的时候才会出现。 （ 测试的过程中发现， 如果Key过期了， 那么redis是会将内存归还给os的， 那么下次再使用的时候还是会有新的碎片。）</li>
<li>内部碎片是 redis 使用的Memory Allocator 分配造成的碎片。 </li>
<li>参数组中可以有autodefrag参数可以触发Redis 主进程的内存规整。</li>
</ul>
<h1 id="一些参数"><a href="#一些参数" class="headerlink" title="一些参数"></a>一些参数</h1><h2 id="Used-Memory"><a href="#Used-Memory" class="headerlink" title="Used Memory"></a>Used Memory</h2><pre class="language-bash" data-language="bash"><code class="language-bash">used_memory:938464
used_memory_human:916.47K</code></pre>

<p>这里面的指标包括了如下的数据：<br>  KeyValue 的存储，用户数据。<br>  InternalOverload: 内部开销， 表示Redis支持的数据类型的信息。</p>
<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><pre class="language-bash" data-language="bash"><code class="language-bash">used_memory_rss:10747904
used_memory_rss_human:10.25M

From OS: RSS KB
<span class="token environment constant">USER</span>         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
<span class="token number">999</span>         <span class="token number">9694</span>  <span class="token number">0.0</span>  <span class="token number">0.1</span>  <span class="token number">55588</span> <span class="token number">10496</span> pts/0    Ssl+ <span class="token number">14</span>:48   <span class="token number">0</span>:00 redis-server *:6379</code></pre>
<p>RSS指标记录的是操作系统已经分配给 RedisInstance 的物理内存大小， rss的这个指标还包括了内部碎片。<br>造成内存碎片的原因是：操作系统低效的内存分配行为。</p>
<h2 id="Max-Memory"><a href="#Max-Memory" class="headerlink" title="Max Memory"></a>Max Memory</h2><pre class="language-bash" data-language="bash"><code class="language-bash">maxmemory:1103269725
maxmemory_human:1.03G</code></pre>

<p>Max Memory 包括哪些部分<br>根据Redis的文档，MaxMemory的限制主要影响以下几个方面的内存：</p>
<ul>
<li>Redis中存储的键值对数据，包括字符串、列表、集合、哈希表、有序集合等类型。</li>
<li>Redis中使用的数据结构和对象，例如字典、跳跃表、压缩列表、整数集合等。</li>
</ul>
<p>Ecache 的MaxMemory 是基于节点类型的固定数值， 无法修改。</p>
<p>设置MaxMemory的方法</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">localhost:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET maxmemory
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"maxmemory"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"100000000"</span>
localhost:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG SET maxmemory 2G
OK
localhost:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> CONFIG GET maxmemory
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"maxmemory"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2000000000"</span></code></pre>

<p>底层的物理内存不能很容易的被操作系统释放， 因为可能需要删除的数据 与 依旧有效并使用中的数据 在相同的物理内存页中。<br>因此redis会在需要的时候分配内存， 在回收的时候进行程序侧的回收， 并不将内存完全free给操作系统。内存分配器会尽可能的使用RSS已经分配给程序的内存。<br>如果需要做内存预留， 那么应该基于历史的峰值来进行调整。 </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">used_memory_peak:1134048
used_memory_peak_human:1.08M
used_memory_peak_perc:82.75%</code></pre>

<h2 id="mem-fragmentation-ratio"><a href="#mem-fragmentation-ratio" class="headerlink" title="mem_fragmentation_ratio"></a>mem_fragmentation_ratio</h2><pre class="language-bash" data-language="bash"><code class="language-bash">mem_fragmentation_ratio:11.46
mem_fragmentation_bytes:9809640</code></pre>
<p>Memory Fragmentation Ratio &#x3D; Used Memory RSS &#x2F; Used Memory<br>内存碎片比率：<br>Memory Fragmentation Ratio &lt; 1   # 表示已经有数据被写入交换分区，这通常是一个异常的指标。<br>Memory Fragmentation Ratio &gt; 1  # normal<br>Memory Fragmentation Ratio &gt; 1.5   # normal</p>
<p>指标计算的方式导致可能并不能准确的体现发生的问题， 现在比较新的版本更加推荐查看下面的指标： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">allocator_frag_ratio:1.08
allocator_frag_bytes:122368
allocator_rss_ratio:2.86
allocator_rss_bytes:2973696</code></pre>

<h3 id="解决内存碎片的方法"><a href="#解决内存碎片的方法" class="headerlink" title="解决内存碎片的方法"></a>解决内存碎片的方法</h3><ol>
<li>Restart Redis. </li>
<li>修改参数， 激活Redis的自动碎片整理在参数组中开启。<strong>activedefrag</strong> 开启这个参数可能会造成延迟变高， 由于内存的整理也是需要在内存中进行数据迁移和调整的。<br><em>3.  Limit memory swapping( 这个没看懂。</em></li>
<li>改变内存分配器（ 指升级Redis的版本</li>
</ol>
<p>或者<br>当存储的数据长短差异较大时， 以下场景容易出现高内存碎片问题：</p>
<ul>
<li>频繁做更新操作， 例如频繁对已存在的键执行append、 setrange等更新操作。</li>
<li>大量过期键删除， 键对象过期删除后， 释放的空间无法得到充分利用， 导致碎片率上升。</li>
</ul>
<p>出现高内存碎片问题时常见的解决方式如下：</p>
<ul>
<li>数据对齐： 在条件允许的情况下尽量做数据对齐， 比如数据尽量采用数字类型或者固定长度字符串等， 但是这要视具体的业务而定， 有些场景无法做到。</li>
<li>安全重启： 重启节点可以做到内存碎片重新整理， 因此可以利用高可用架构， 如Sentinel或Cluster， 将碎片率过高的主节点转换为从节点， 进行安全重启。</li>
</ul>
<h1 id="内存驱逐"><a href="#内存驱逐" class="headerlink" title="内存驱逐"></a>内存驱逐</h1><p>当 Redis 内存使用达到 <code>maxmemory</code> 时，需要选择设置好的 <code>maxmemory-policy</code> 进行对老数据的置换。</p>
<p>下面是可以选择的置换策略：<br>The following policies are available:<br>    noeviction： 达到内存限制时不保存新值。当数据库使用复制时，这适用于主数据库<br>    allkeys-lru： 保留最近使用的键值；删除最近使用最少（LRU）的键值<br>    allkeys-lfu： 保留经常使用的key；删除最不经常使用（LFU）的key<br>    volatile-lru： 删除过期字段设置为 true 的最近最少使用的key。<br>    volatile-lfu： 删除过期字段设置为 true 的最不常用key。<br>    allkeys-random： 随机删除key，为新添加的数据腾出空间。<br>    volatile-random： 随机删除过期字段设置为 true 的key。<br>    volatile-ttl： 删除过期字段设置为 true 且剩余生存时间（TTL）值最短的key。</p>
<p>如果没有指定TTL， 那么volatile的驱逐规则就相当于 noeviction.</p>
<p>key过期回收<br>Redis有两种方式：</p>
<ol>
<li>Lazy Way： 当请求这个key 发现他已经过期的时候， 清理。</li>
<li>Active Way:  每100ms过期一小部分key。</li>
</ol>
<p>主动过期的方式每100ms扫描20个key（带有 TTL 的）， 也就是每秒可以扫描200个key标记为过期。如果依旧有超过25%的key被标记为过期，那么就再来一次。</p>
<p>如果过期的时间比较合理， 那么大约会有25% 左右的key处于过期的状态。 </p>
<p>可以使用scan指令来尝试访问key，scan到的key如果已经过期会被回收。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">SCAN <span class="token number">0</span> MATCH *example* COUNT <span class="token number">20000</span></code></pre>

<p>预留内存： 通常是 25% ， 保留用来进行备份， bgsave 来使用。 </p>
<h1 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h1><p>内核使用交换空间的两个情况：</p>
<ol>
<li>系统处于内存压力下。</li>
<li>有些内存页面已经很长时间没有被访问了， 内核会将这些页面放入交换中，通常在Redis上不会发生。</li>
</ol>
<p>可能导致使用swap的场景： </p>
<ol>
<li>需要存储的数据超过物理内存的总量， 或者由于COB的使用率过高。</li>
<li>高内存碎片。</li>
<li>较高的连接数。</li>
<li>系统进程或者RBD AOF写入大文件， 给系统增加了压力， 导致使用了交换分区。</li>
</ol>
<p>通常情况使用交换是一定会发生的， 并且是正常的， 不会导致性能的下降， 因为swap指标收集的是操作系统指标， 包括非Redis内的数据被换出的情况， 通常可以使用 maxmemory_human  大于 used_memory_rss_human  来进行判断， 或者是 内存碎片 mem_fragmentation_ratio 小于 1. </p>
<p>Refer:</p>
<ol>
<li><a href="https://www.jianshu.com/p/d39f087850c9">https://www.jianshu.com/p/d39f087850c9</a></li>
<li>Understand VMM: <a href="https://www.kernel.org/doc/gorman/html/understand/">https://www.kernel.org/doc/gorman/html/understand/</a></li>
<li>Understand Memory Fragmention: <a href="https://jacktang816.github.io/post/memoryfragmentation/">https://jacktang816.github.io/post/memoryfragmentation/</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Database, Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>EBS性能优化</title>
    <url>/2023/08/16/Linux/EBS_performance-tuning-advise/</url>
    <content><![CDATA[<h2 id="EBS性能优化"><a href="#EBS性能优化" class="headerlink" title="EBS性能优化"></a>EBS性能优化</h2><p>Agenda</p>
<ol>
<li>磁盘调优方法论</li>
<li>常用的磁盘调优方法</li>
<li>磁盘压测工具</li>
<li>磁盘性能检测工具</li>
</ol>
<p>目前比较常用的是 GP3。 </p>
<h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><p>应用程序 –》 操作系统 –》 虚拟机 –》 EBS 服务器</p>
<p>应用程序IO请求下发的路径。</p>
<p>三个方向， iops， 带宽， 延迟，按照这三个方面来观察这个EBS本身的性能。 </p>
<h3 id="使用新版本的内核："><a href="#使用新版本的内核：" class="headerlink" title="使用新版本的内核："></a>使用新版本的内核：</h3><ol>
<li>3.8 以上内核使用的Indirect descriptors</li>
<li>突破 I&#x2F;O size 44kiB限制， 可以一次请求下发 128KiB的IO大小。</li>
<li>建议使用 amazonlinux 2023 （悲</li>
<li>uname -r 查看内核的版本。</li>
</ol>
<h3 id="使用-Raid0"><a href="#使用-Raid0" class="headerlink" title="使用 Raid0"></a>使用 Raid0</h3><p>使用 Raid0 可以提高带宽， 并且节省成本。</p>
<ol>
<li>能更换磁盘类型达到性能， 可以使用Raid0 </li>
<li>不建议在EBS 做 Raid1 5 6 三种， 校验的方式会降低性能。</li>
<li>推荐使用 mdadm ， 不一定要用LVM。</li>
</ol>
<h3 id="关注队列长度"><a href="#关注队列长度" class="headerlink" title="关注队列长度"></a>关注队列长度</h3><p>SSD： 每 1000iops 队列长度是 1 ， SSD是合适的吧</p>
<p>​      观察队列长度， 如果能达到 IOPS 的情况下， 队列越低越好。</p>
<p>HDD： 1MiB的IOsize ， 建议的队列长度 4</p>
<p>​      降低io队列的方法,取决于发送IO的速度和线程数量。 或者提高磁盘的IOPS</p>
<h3 id="HDD吞吐量设计增加预读取大小"><a href="#HDD吞吐量设计增加预读取大小" class="headerlink" title="HDD吞吐量设计增加预读取大小"></a>HDD吞吐量设计增加预读取大小</h3><p>For st1&#x2F;sc1. </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">blockdev <span class="token parameter variable">--report</span> /dev/nvme1n1 <span class="token comment"># 查看块设备的参数</span>
blockdev <span class="token parameter variable">--setra</span> <span class="token number">2048</span> /dev/nvme1n1  <span class="token comment"># 设置块设备预读取数据量的大小</span>
blockdev <span class="token parameter variable">--getra</span> /dev/nvme1n1 <span class="token comment"># 查看参数是否生效。</span></code></pre>

<p>这个部分是为了增加吞吐量而在Read的同时将后面的一部分数据读取进入内存， 这样可以提高顺序读取的效率， 提高读取的效率， 让顺序读取的业务数据提前进入内存。</p>
<h3 id="使用-Nitro-架构实例"><a href="#使用-Nitro-架构实例" class="headerlink" title="使用 Nitro 架构实例"></a>使用 Nitro 架构实例</h3><ul>
<li><p>之前使用zen的时候有一个Dom0来进行实例的管理。 nitro 做成 Hardware， nitro 管理VPC等等等， 尽可能把 X86 过度给客户来使用。</p>
<p>Refer to： <a href="https://zhuanlan.zhihu.com/p/270522703">https://zhuanlan.zhihu.com/p/270522703</a></p>
</li>
<li><p>开启EBS优化选项。 非优化的场景下，会与网络请求共享带宽， EBS优化这个功能单独隔离了EBS的网络请求。</p>
</li>
</ul>
<h3 id="使用正确的实例类型"><a href="#使用正确的实例类型" class="headerlink" title="使用正确的实例类型"></a>使用正确的实例类型</h3><p>关注实例的限制， 例如实例的上限是 14000 ， 那么实例使用EBS的瓶颈不在磁盘本身， 在实例的性能上限。</p>
<h2 id="压测工具"><a href="#压测工具" class="headerlink" title="压测工具"></a>压测工具</h2><ul>
<li><p>dd </p>
</li>
<li><p>hdparm </p>
</li>
<li><p>sysbench</p>
</li>
<li><p>iometer</p>
</li>
<li><p>iozone</p>
</li>
</ul>
<p>推荐fio </p>
<p><a href="https://fio.readthedocs.io/en/latest/fio_doc.html">https://fio.readthedocs.io/en/latest/fio_doc.html</a></p>
<p>ebs设置默认的 Block Size是 16k ， 其他厂商可能是 4k的。 这个部分可能会在测试的时候造成差异。 </p>
<h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 这个命令的运行结果是， 一个 job 在 iodepth 为 1 的时候， 写入与底层一样的块大小，在iostat 中可以看到  avgqu-zs 的大小是 1。</span>
<span class="token comment"># 添加一个process之后， 队列的size 变成了2 ； 添加一个 iodepth 之后， 队列的大小为 1 ~ 2 之间。 </span>
<span class="token comment"># 大佬认为内核的蓄流将请求合并了， 所以没有造成对应的压力。 </span>

fio <span class="token parameter variable">--directory</span><span class="token operator">=</span>/mnt <span class="token parameter variable">--name</span> fio_test_file <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--rw</span><span class="token operator">=</span>read <span class="token parameter variable">--rate_iops</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--bs</span><span class="token operator">=</span>16k <span class="token parameter variable">--size</span><span class="token operator">=</span>200M <span class="token parameter variable">--iodepth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--time_based</span> <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">600</span> <span class="token parameter variable">--group_reporting</span> <span class="token parameter variable">--norandommap</span>
</code></pre>

<p>perf record -g result (libaio):</p>
<pre class="language-ini" data-language="ini"><code class="language-ini">fio 319375 86964.196578:     250000 cpu-clock:pppH:
        ffffffff88355470 put_dec+0x0 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff8835584b number+0x33b (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff8835ac9d vsnprintf+0x44d (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff8835afe2 sprintf+0x62 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87efc94c dev_show+0x2c (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87efbc6c dev_attr_show+0x1c (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87abac9b sysfs_kf_seq_show+0xab (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87a2a7a3 seq_read_iter+0x123 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff879f4c06 vfs_read+0x1f6 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff879f59ff ksys_read+0x6f (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff88364360 do_syscall_64+0x60 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff884000f3 entry_SYSCALL_64+0xb3 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
                  103fdc read+0x4c (/usr/lib/libc.so.6)
                       0 [unknown] ([unknown])</code></pre>

<p>perf record -g result (psync):</p>
<pre class="language-ini" data-language="ini"><code class="language-ini">fio 324148 87167.271746:     250000 cpu-clock:pppH:
        ffffffff8835480c strlen+0xc (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87a2990b seq_puts+0x1b (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87aa94ee render_sigset_t+0x1e (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87aa9c96 proc_pid_status+0x716 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87aa1e34 proc_single_show+0x54 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87a2a7a3 seq_read_iter+0x123 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff87a2abe4 seq_read+0xd4 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff879f4abc vfs_read+0xac (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff879f59ff ksys_read+0x6f (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff88364360 do_syscall_64+0x60 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
        ffffffff884000f3 entry_SYSCALL_64+0xb3 (/lib/modules/6.4.10-arch1-1/build/vmlinux)
                  103fa1 read+0x11 (/usr/lib/libc.so.6)
                       0 [unknown] ([unknown])</code></pre>

<h2 id="观测"><a href="#观测" class="headerlink" title="观测"></a>观测</h2><p>[[Linux_iostat|Linux_iostat]]<br>可以直接使用这个命令来观察磁盘的使用情况， 磁盘的使用率其实并不太准确，这个表示单位时间内cpu时间被io请求占用的时间。 </p>
<p>个别的 10ms 之上的IO请求的长尾现象是正常的， 这个无法避免。</p>
<p>关于长尾现象的说明： </p>
<blockquote>
<p>长尾请求一般是指明显高于均值的那部分占比较小的请求。  业界关于延迟有一个常用的P99标准， 也就是99%的请求延迟要满足在一定耗时以内， 1%的请求会大于这个耗时， 而这1%就可以认为是长尾请求。  </p>
<p>Refer to:  <a href="https://zhuanlan.zhihu.com/p/35516682">https://zhuanlan.zhihu.com/p/35516682</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, EBS, IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_Kubernetes常用debug命令</title>
    <url>/2023/09/04/Linux/Linux_Kubernetes%E5%B8%B8%E7%94%A8debug%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>查看 AWS LoadBalancer 证书的信息，检查证书的有效期： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io aws-load-balancer-webhook <span class="token parameter variable">-ojsonpath</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>.webhooks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.clientConfig.caBundle<span class="token punctuation">&#125;</span>  <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span>  <span class="token operator">|</span> openssl x509 <span class="token parameter variable">-noout</span> <span class="token parameter variable">-text</span></code></pre>

<p>使用 debug 容器： </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给特定的容器附加一个Sidecar， 并启动shell。</span>
kubectl debug <span class="token parameter variable">-it</span> <span class="token parameter variable">--image</span><span class="token operator">=</span>public.ecr.aws/amazonlinux/amazonlinux:latest aws-node-cpmck
<span class="token comment"># netshoot容器， 比较方便的用来进行网络部分的调试。</span>
<span class="token comment"># 项目仓库地址： https://github.com/nicolaka/netshoot</span>
kubectl debug mypod <span class="token parameter variable">-it</span> <span class="token parameter variable">--image</span><span class="token operator">=</span>nicolaka/netshoot</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux, Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Iostat 参数说明</title>
    <url>/2023/12/22/Linux/Linux_iostat/</url>
    <content><![CDATA[<blockquote>
<p>从manpage 里面直接获取的命令说明， 汇报CPU指标 和 设备 或者 分区 的 I&#x2F;O指标。<br>       iostat - Report Central Processing Unit (CPU) statistics and input&#x2F;output statistics for devices and partitions.</p>
</blockquote>
<p>指标的解释说明如下：<br><strong>rrqm&#x2F;s - wrqm&#x2F;s</strong>  两个看的是的merge的请求数量， 表示发送给驱动程序并被驱动程序合并的请求数量，表示有没有进行合并，这也表示系统将随机IO请求合并成连续以提高性能。<br><strong>r&#x2F;s - w&#x2F;s</strong>  IO读写的请求数量IOPS， 发送给磁盘设备的请求数。<br><strong>rKB&#x2F;s - wKB&#x2F;s</strong> 吞吐量， 可以使用 -m 转换成MB&#x2F;s， 设备的传输数据量的吞吐量信息。<br><strong>avgrq-sz</strong>  平均请求大小， 也就是IOsize 的大小。单位是扇区（512B）。<br><strong>rareq-sz -  wareq-sz</strong> 新版本的iostat已经是这两个指标了， 这两个指标单位是 KB.<br><strong>avgqu-sz</strong>  在驱动队列和设备队列中或活跃的平均请求数量。 单位是 个。<br><strong>await</strong> 这个指标记录的总的延迟， 新的版本也包括 rw 两类请求的延迟。 延迟单位是 ms ，通常不应该超过10ms.</p>
<p>命令输出结果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">iostat <span class="token parameter variable">-dx</span> <span class="token number">3</span>

Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
nvme0n1       <span class="token number">2147.33</span>  <span class="token number">34842.67</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.46</span>    <span class="token number">16.23</span>    <span class="token number">0.33</span>      <span class="token number">1.33</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">1.00</span>     <span class="token number">4.00</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">1.00</span> <span class="token number">100.00</span>

Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
nvme0n1       <span class="token number">2128.33</span>  <span class="token number">34248.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.46</span>    <span class="token number">16.09</span>    <span class="token number">5.33</span>     <span class="token number">49.83</span>     <span class="token number">1.33</span>  <span class="token number">20.00</span>    <span class="token number">0.94</span>     <span class="token number">9.34</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.99</span>  <span class="token number">99.87</span>

iostat <span class="token parameter variable">-dcpx</span> <span class="token number">5</span>
Linux <span class="token number">6.4</span>.10-arch1-1 <span class="token punctuation">(</span>arch.liarlee.site<span class="token punctuation">)</span> 	08/22/2023 	_x86_64_	<span class="token punctuation">(</span><span class="token number">4</span> CPU<span class="token punctuation">)</span>

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           <span class="token number">5.23</span>    <span class="token number">0.00</span>    <span class="token number">2.05</span>    <span class="token number">0.01</span>    <span class="token number">0.01</span>   <span class="token number">92.71</span>

Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
nvme0n1          <span class="token number">1.00</span>     <span class="token number">32.72</span>     <span class="token number">0.00</span>   <span class="token number">0.04</span>    <span class="token number">0.66</span>    <span class="token number">32.86</span>    <span class="token number">1.24</span>     <span class="token number">23.27</span>     <span class="token number">0.18</span>  <span class="token number">12.62</span>    <span class="token number">0.99</span>    <span class="token number">18.79</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">0.18</span>
nvme0n1p1        <span class="token number">1.00</span>     <span class="token number">32.72</span>     <span class="token number">0.00</span>   <span class="token number">0.04</span>    <span class="token number">0.66</span>    <span class="token number">32.86</span>    <span class="token number">1.24</span>     <span class="token number">23.27</span>     <span class="token number">0.18</span>  <span class="token number">12.62</span>    <span class="token number">0.99</span>    <span class="token number">18.79</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">0.18</span>


avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           <span class="token number">1.80</span>    <span class="token number">0.00</span>    <span class="token number">0.95</span>    <span class="token number">0.05</span>    <span class="token number">0.00</span>   <span class="token number">97.20</span>

Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
nvme0n1          <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">1.60</span>     <span class="token number">10.40</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.62</span>     <span class="token number">6.50</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">0.32</span>
nvme0n1p1        <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">1.60</span>     <span class="token number">10.40</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.62</span>     <span class="token number">6.50</span>    <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">0.00</span>   <span class="token number">0.00</span>    <span class="token number">0.00</span>     <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>    <span class="token number">0.00</span>   <span class="token number">0.34</span></code></pre>

<p>监控数据来源： <code>cat /proc/diskstats</code><br>这些所有的指标都是By Device的， 与进程的部分无关，统计的是发送到设备或者发送到设备分区的请求。<br>基于man page 中的描述， 这四个参数分别是：<br>     r&#x2F;s    The number (after merges) of read requests completed per second for the device.<br>     w&#x2F;s    The number (after merges) of write requests completed per second for the device.<br>     d&#x2F;s    The number (after merges) of discard requests completed per second for the device.<br>     f&#x2F;s    The number (after merges) of flush requests completed per second for the device.  This counts flush requests executed by disks. Flush requests are not tracked for partitions.  Before being merged, flush operations are counted as writes.</p>
<p>命令行参数的一部分解释<br><strong>-d</strong> 展示磁盘设备使用率的信息。<br><strong>-x</strong> 扩展显示更多的指标数据， 不添加这个参数不区分设备 读&#x2F;写&#x2F;磁盘&#x2F;文件系统 这四个维度。<br><strong>-c</strong> 查看CPU统计的使用率指标。<br><strong>-p</strong> 磁盘分区的指标。<br><strong>-z</strong> 只是输出一些有IO的设备的统计信息。 性能之巅里面有写出这个参数。 </p>
<p>使用这个命令的思路： </p>
<ol>
<li>看设备， 具体是那个设备上面有IO请求。</li>
<li>看await，等待的时间长不长， 这里面的等待时间是从请求进入设备队列到请求返回成功的时间 ， 通常情况下应该是在10ms以内， 尤其是 ssd。</li>
<li>看 q-sz， 按照EBS的规则，说法， 应该是每 1000 IOPS 队列数为 1。 </li>
<li>综合看 IOPS， 块大小， 吞吐量，  使用率， 确认设备是不是达到了瓶颈。 </li>
<li>最后切换工具定位具体是那个进程在大量的发送IO请求 ，大概可能的工具是 pidstat， htop ， atop ， sar 等等， 感觉工具还可能有 pm 的这部分工具。</li>
</ol>
<p>通常可以直接使用命令 ： <code>iostat -xz 1</code> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vmstat 参数说明</title>
    <url>/2023/12/22/Linux/Linux_vmstat/</url>
    <content><![CDATA[<h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><p>vmstat 提供的信息是从硬件和物理参数的角度。<strong>vmstat 第一次的数据显示的是从上一次重启到现在的平均值，所以只能用来参考。</strong><br>标题内容就不在解释了，分别是 <strong>进程 ， 内存， 交换 ， IO， 系统 ， 和 CPU</strong>。</p>
<p>详细参数如下：<br>  r - 等待运行的进程数量,  多少个进程在R状态， 并一直取得并占用CPU时间片。<br>  b - Uninterreptable Sleep的进程数量， 有多少个处于D状态显示的进程， 通常代表有多少个进程正常等待IO资源。<br>  swpd： VirtualMemory的值 （KB）, 交换的使用量，如果未开启交换分区就会显示是 0。 这个指标和后面的 si so 是整体的， swpd 有用量， 那么si&#x2F;so 就有数据， swpd 是 0， 那么永远不会有 si&#x2F;so。<br>  free： IdleMemory的值（KB), 完全可用的内存，  这里free的内存是 完全没有被分配的。total - buffer - cache - used 计算完了之后剩下的, 与 free 命令中的 free 字段是同样的含义。<br>  buff： 被buffer使用的内存量（KB），被 buff 使用的内存空间。<br>  cache： 被cache使用的内存量（KB）， 被 cache 占用的内存空间， 这部分和buffer 一样， 是临时数据，在落盘后buffer 会被释放， cache可以直接被释放。<br>  si： Swapin 内存从硬盘换入的数据量 （KB&#x2F;s)， <strong>读取交换分区（disk）到 内存</strong> 的数据量 。<br>  so：Swapout 内存交换到硬盘的数据量 （KB&#x2F;s）， <strong>写入磁盘交换分区</strong>的数据量。<br>  bi： blockin， 发送到块设备的块数量（blocks&#x2F;s),   系统收到disk发送来的数据量， 也就是通常说的<strong>读磁盘数据。</strong><br>  bo： blockout ， 从块设备接收的块数量（blocks&#x2F;s）， 系统写入disk的数据量， 也就是通常说的<strong>写磁盘数据</strong>。<br>  in： 包括时钟在内的那<strong>每秒中断数</strong>。<br>  cs： <strong>进程上下文每秒切换</strong>的次数。<br>  us：非内核代码使用的CPU百分比， 包括<strong>用户时间和Nice时间</strong>。<br>  sy：<strong>内核代码</strong>使用的CPU时间百分比。<br>  id： CPU的<strong>空闲时间</strong>百分比。<br>  wa：<strong>等待IO操作</strong>花费的时间百分比。 这个容易误解的是， wa 其实cpu 是空闲的， 统计的方式是， 在收集数据的时候有多少个进程处于需要处理io或者等待处理io的状态， 当时那个时刻的百分比， 而实际上等待io的时间其实CPU没有做事， 所以在CPU的度量上， 这个时间的CPU是可以做其他事情的， 可以被其他需要进行计算的进程使用掉这部分时间。<br>  st：<strong>虚拟化层</strong>操作花费的时间百分比。这个通常是指虚拟化层的限制。 这个指标如果有， 那么表示虚拟化层对cpu的使用进行了限制（EC2 T系列实例） 或者是 底层的资源并不完全满足需求而导致的争抢。<br>  gu： Time spent running KVM guest code (guest time, including guest nice). ， 这个是新添加的指标， 之前没有见过。 如果是KVM host os 上面这个指标还是比较有用的。  </p>
<h2 id="输出结果如下："><a href="#输出结果如下：" class="headerlink" title="输出结果如下：   "></a>输出结果如下：<br>   <pre class="language-bash" data-language="bash"><code class="language-bash">~ <span class="token function">vmstat</span> <span class="token parameter variable">-w</span> <span class="token number">1</span>
--procs-- -----------------------memory---------------------- ---swap-- -----io---- -system-- ----------cpu----------
   r    b         swpd         <span class="token function">free</span>         buff        cache   si   so    bi    bo   <span class="token keyword">in</span>   cs  us  sy  <span class="token function">id</span>  wa  st  gu
   <span class="token number">2</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">42600</span>         <span class="token number">1328</span>      <span class="token number">1973356</span>    <span class="token number">4</span>    <span class="token number">7</span>    <span class="token number">77</span>   <span class="token number">312</span> <span class="token number">1767</span>    <span class="token number">6</span>   <span class="token number">2</span>   <span class="token number">2</span>  <span class="token number">95</span>   <span class="token number">1</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">42652</span>         <span class="token number">1328</span>      <span class="token number">1973360</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">2519</span> <span class="token number">3373</span>   <span class="token number">1</span>   <span class="token number">2</span>  <span class="token number">97</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">42652</span>         <span class="token number">1328</span>      <span class="token number">1973360</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">8</span> <span class="token number">1001</span> <span class="token number">1844</span>   <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">42652</span>         <span class="token number">1328</span>      <span class="token number">1973360</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">12</span> <span class="token number">1056</span> <span class="token number">1822</span>   <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">42652</span>         <span class="token number">1328</span>      <span class="token number">1973368</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">1308</span> <span class="token number">2150</span>   <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">98</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">43156</span>         <span class="token number">1328</span>      <span class="token number">1973376</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">1394</span> <span class="token number">2245</span>   <span class="token number">3</span>   <span class="token number">1</span>  <span class="token number">97</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">43156</span>         <span class="token number">1328</span>      <span class="token number">1973376</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">1125</span> <span class="token number">1898</span>   <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">43408</span>         <span class="token number">1328</span>      <span class="token number">1973376</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">55</span> <span class="token number">1229</span> <span class="token number">2218</span>   <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">99</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">44948</span>         <span class="token number">1328</span>      <span class="token number">1973392</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">3544</span> <span class="token number">5490</span>   <span class="token number">7</span>   <span class="token number">4</span>  <span class="token number">89</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span>
   <span class="token number">1</span>    <span class="token number">0</span>      <span class="token number">1005492</span>        <span class="token number">45228</span>         <span class="token number">1328</span>      <span class="token number">1973428</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">1410</span> <span class="token number">2082</span>   <span class="token number">3</span>   <span class="token number">4</span>  <span class="token number">93</span>   <span class="token number">0</span>   <span class="token number">0</span>   <span class="token number">0</span></code></pre></h2><h3 id="分析指标的逻辑"><a href="#分析指标的逻辑" class="headerlink" title="分析指标的逻辑"></a>分析指标的逻辑</h3><p>输出之后 先看前几次输出的 r 和 b。<br>  r 有没有超过核心数；<br>  b 这里是不是有数据， 数据在运行命令的周期是不是一直存在， 数量有没有超过CPU核心数。变化的频率的幅度是什么样的。<br>    例子：<br>    总共观察10s ， 每秒输出一次数据， 每秒都有 超过cpu 核心数的 不可中断进程， 那么这代表当前的操作系统可能存在大量io进程，被阻塞的IO进程比较多 。 </p>
<p>然后看最后一列的CPU情况， id的数据是多少，如果这个时候id 比较小， 看 us&#x2F;sy&#x2F;wa ，cpu 把时间花费在了什么地方。<br>通常的场景下， cpu 应该把时间尽可能的使用在 us 这个部分。 如果其他而部分比较多的就需要关注较多的那个部分了。 </p>
<p>有交换就看看交换， 没有交换直接看内存相关， cache + free 总共有多少。如果内存用量是不是在oom 的边缘 ，然后再看 in&#x2F;cs，  一个是硬中断次数， 一个是进程上下文切换次数， 这两个一个可能代表潜在的cpu被硬件事件终止， 另一个cpu忙于在进程之间反复横跳。 这些都可能指向当前系统的效率并不高， 或者潜在的问题。 </p>
<h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><p>   vmstat -m – 显示内核占用内存的分配情况。<br>   vmstat -a – 将内存的使用量分为<strong>活动内存</strong>和<strong>非活动内存</strong>。<br>   vmstat -n 2 10 – 展示vmstat的结果10次， 每两秒一次。</p>
<h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p><a href="https://docs.oracle.com/cd/E19455-01/805-7229/6j6q8svh5/index.html">https://docs.oracle.com/cd/E19455-01/805-7229/6j6q8svh5/index.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
